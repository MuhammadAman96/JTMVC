
Training & Development: 
It is a web application to provide softskills trainings to company employees.Through admin area,Admin can provide manage trainings,set audience,see trainings' feedback,upload training materials,videos,presentation etc.Through trainee area,users can take assements and give feedback on completion.
webforms,windows services,

Recruiment system:
Application to manage recruitment cycle of candidate including managing profile,communication,scheduling,assessment etc.
webforms,Crystal reports,windows services,

BOlJob Program:
A website to enroll news/sales professionals to different trainig programs organinzed by Bol.

Project : AutoMobile.Admin
Folder: App_start

+BundleConfig.cs

using System.Web.Optimization;
namespace Automobile.Admin.App_Start
{
    public class BundleConfig
    {
        public static void RegisterBundles(BundleCollection bundles)
        {
            BundleTable.EnableOptimizations = true;
            bundles.Add(new StyleBundle("~/Assets/css/bundle").Include(
               "~/Assets/bootstrap/css/bootstrap.css"
               , "~/Assets/plugins/font-awesome/css/font-awesome.min.css"
               , "~/Assets/plugins/ionicons/css/ionicons.min.css"
               , "~/Assets/plugins/pace/pace.css"
               , "~/Assets/css/AdminLTE.min.css"
               , "~/Assets/plugins/select2/select2.min.css"
               , "~/Assets/css/skins/_all-skins.min.css"               
               , "~/Assets/plugins/datatables/dataTables.bootstrap.min.css"  
             
                      ));

            bundles.Add(new ScriptBundle("~/Assets/Scripts").Include(
                "~/Assets/plugins/jQuery/jquery.min.js"
                , "~/Assets/bootstrap/js/bootstrap.min.js"
                , "~/Assets/plugins/pace/pace.min.js"
                , "~/Assets/js/app.min.js"
                , "~/Assets/js/Helper.js"
                , "~/Assets/plugins/select2/select2.full.min.js"
                , "~/Assets/plugins/datatables/jquery.dataTables.min.js"
                , "~/Assets/plugins/datatables/dataTables.bootstrap.min.js"
                ,"~/Assets/js/knockout-3.1.0.js"
                ,"~/Assets/js/knockout-3.1.0.debug.js"
                      ));            
        }
    }
}

+ FilerConfig.cs

using System.Web;
using System.Web.Mvc;

namespace Automobile.Admin
{
    public class FilterConfig
    {
        public static void RegisterGlobalFilters(GlobalFilterCollection filters)
        {
            filters.Add(new HandleErrorAttribute());
        }
    }
}

+WebApiConfig.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Http;

namespace Automobile.Admin
{
    public static class WebApiConfig
    {
        public static void Register(HttpConfiguration config)
        {
            config.Routes.MapHttpRoute(
                name: "DefaultApi",
                routeTemplate: "api/{controller}/{id}",
                defaults: new { id = RouteParameter.Optional }
            );
        }
    }
}

Folder:assests

+ Helper.js
var Helper = {};
Helper.Methods = {};
Helper.Properties = {};
Helper.ServicePath = '';
Helper.AjaxCall = {};

Helper.Methods.ApplyPagination = function (currentPage, pageSize, totalResults, availableResults , templateHTML) {
    var totalPage;
    var paginationHtmlRefernece = $(".customPagination ul.pagination");

    $("html, body").animate({ scrollTop: 0 }, "slow");

    $(paginationHtmlRefernece).html('');
    $(".customTotalResult").text(totalResults);
    var from = (currentPage - 1) * pageSize + 1;
    var to = (from + parseInt(availableResults) - 1);
    $(".customRange").text(from + " - " + to);

    $(paginationHtmlRefernece).append('<li class="leftnav" data-toggle="tooltip" data-placement="top" title="Previous Page" style=' + (currentPage == 1 ? "pointer-events:none;opacity:0.4;" : "") + '><a href="javascript:;">&laquo;</a></li>');
    totalPage = Math.ceil(totalResults / pageSize);

    var endIndex = totalPage;
    var startIndex = 1;

    if (totalPage >= 5) {
        startIndex = currentPage - 1;
        endIndex = currentPage + 3;

        if (startIndex <= 0) {
            startIndex = 1;
            endIndex = startIndex + 4;
        }

        if (endIndex > totalPage) {
            endIndex = totalPage;
            startIndex = totalPage - 4;
        }
    }

    for (var i = startIndex ; i <= endIndex ; i++) {

        $(paginationHtmlRefernece).append(templateHTML.replace("{{i}}", i)
                                                      .replace("{{currentPage}}", i)
                                                      .replace("{{activeClassName}}", i == currentPage ? "active" : ""));
    }

    $(paginationHtmlRefernece).append('<li class="rightnav" data-toggle="tooltip" data-placement="top" title="Next Page" style=' + (currentPage == endIndex ? "pointer-events:none;opacity:0.4;" : "") + '  ><a href="javascript:;">&raquo;</a></li>');

};

Helper.Methods.ShowPopUp = function (title, body) {
    $('#msgModal').find('.modal-title b').html(title);
    $('#msgModal').find('.modal-body p').html(body);

    $('#msgModal').modal('show');

    setTimeout(function () {
        $('#msgModal').modal('hide');
    }, 3000);
}


Helper.Methods.ValidateEmail = function (email) {
    var regExp = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return regExp.test(email);
}

Helper.AjaxCall.GetCallWithoutLoaderImage = function (uri, data, onSuccess, onError) {
    var loaderInterval;
    var request = data;

    Helper.Properties.PostCalls++;

    var req = $.ajax({
        url: Helper.ServicePath + uri,
        async: true,
        type: 'GET',
        cache: false,
        data: data,
        dataType: 'json',
        contentType: 'application/json; charset=utf-8',
        crossDomain: true,
        beforeSend: function () {
        },
        complete: function () {
        },
        success: function (data) {

            Helper.Properties.PostCalls--;
            if (Helper.Properties.PostCalls == 0) {
                clearTimeout(loaderInterval);
            }
            if (data != "Failed" && onSuccess) {
                onSuccess(data);
            }
        },
        error: function (XMLHttpRequest, textStatus, errorThrown) {
            Helper.Properties.PostCalls--;
            if (Helper.Properties.PostCalls == 0) {
                clearTimeout(loaderInterval);
            }
            if (onError) { onError(data); }
        }
    });

    return req;
};

Helper.AjaxCall.PostCall = function (uri, data, onSuccess, onError) {
    var loaderInterval;
    var request = data;
    Helper.Properties.PostCalls++;

    var req = $.ajax({
        url: Helper.ServicePath + uri,
        async: true,
        type: 'POST',
        cache: false,
        data: data,
        crossDomain: true,
        beforeSend: function () {
            //var LoadingimageLink = '/assets/images/preloader.gif';
            //$('#loadingImg').attr('src', LoadingimageLink);
            //$('.loadingDiv').show();
        },
        complete: function () {
            //$('.loadingDiv').hide();
        },
        success: function (data) {
            Helper.Properties.PostCalls--;
            if (Helper.Properties.PostCalls == 0) {
                // clearTimeout(loaderInterval);
            }
            if (onSuccess) {
                onSuccess(data);
            }
        },
        error: function (XMLHttpRequest, textStatus, errorThrown) {

            Helper.Properties.PostCalls--;
            if (Helper.Properties.PostCalls == 0) {
                //clearTimeout(loaderInterval);
            }
            if (onError) { onError(data); }
        }
    });

    return req;
};

Folder : Controller

+ AccountContoller.cs

using System;
using System.Collections.Generic;
using System.Web;
using System.Web.Mvc;
using Automobile.Admin.Models;
using System.Data;
using System.Data.SqlClient;
using JTJapan.Core;
using JTJapan.Core.Helper;


namespace Automobile.Admin.Controllers
{
    public class AccountController : Controller
    {

        [HttpGet]
        public ActionResult Login(string returnUrl)
        {
            if (Request.Cookies["cuid"] != null)
                return RedirectToAction("Index", "Home");

            if (string.IsNullOrEmpty(returnUrl) && Request.UrlReferrer != null)
                returnUrl = Server.UrlEncode(Request.UrlReferrer.PathAndQuery);

            if (Url.IsLocalUrl(returnUrl) && !string.IsNullOrEmpty(returnUrl))
                ViewBag.ReturnURL = returnUrl;

            return View();
        }
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public ActionResult Login(LoginViewModel model, string returnUrl)
        {
            returnUrl = returnUrl == "/" ? "" : returnUrl;
            ViewBag.ReturnUrl = returnUrl;

            if (ModelState.IsValid)
            {
                List<LoginViewModel> LoginList = GetLoginCredentials(model.UserName, model.Password);
                if (LoginList != null && LoginList.Count > 0)
                {

                    HttpCookie UserIdCookie = new HttpCookie("cuid");
                    UserIdCookie.Value = LoginList[0].UserId.ToString();

                    HttpCookie ClientIdCookie = new HttpCookie("ccid");
                    ClientIdCookie.Value = "-1";//LoginList[0].ClientId.ToString();

                    HttpCookie UserNameCookie = new HttpCookie("cun");
                    UserNameCookie.Value = LoginList[0].UserName.ToString();

                    UserIdCookie.Expires = DateTime.Now.AddHours(12);
                    Response.Cookies.Add(UserIdCookie);

                    ClientIdCookie.Expires = DateTime.Now.AddHours(12);
                    Response.Cookies.Add(ClientIdCookie);

                    UserNameCookie.Expires = DateTime.Now.AddHours(12);
                    Response.Cookies.Add(UserNameCookie);

                    return RedirectToAction("Index", "Home");
                }

                else
                {
                    ModelState.AddModelError("", "Invalid username or password.");
                    return View();
                }
            }
            return View(model);
        }

        public static List<LoginViewModel> GetLoginCredentials(string UserName, string Password)
        {
            DataTable dt = new DataTable();
            List<LoginViewModel> lst = new List<LoginViewModel>();
            SqlParameter[] parameters =
            {    
                new SqlParameter("@UserName", SqlDbType.VarChar) { Value = UserName },
                 new SqlParameter("@Password", SqlDbType.VarChar) { Value = Password }
            };
            dt = DataAccess.getDataTable("dbo.Login_Credentials", parameters, General.GetConstring());
            if (dt.Rows.Count > 0)
            {
                lst = EnumerableExtension.ToList<LoginViewModel>(dt);
            }

            return lst;
        }
        [HttpGet]
        public ActionResult LogOut()
        {
            string[] myCookies = Request.Cookies.AllKeys;
            foreach (string cookie in myCookies)
            {
                Response.Cookies[cookie].Expires = DateTime.Now.AddSeconds(-1);
            }
            return RedirectToAction("Login", "Account");
        }
    }
}


+ CatalogController.cs

using System;
using System.Linq;
using System.Web.Mvc;
using JTJapan.Core.AdminArea;
using JTJapan.Core.AdminArea.ViewModel;
using System.Data;
using JTJapan.Core;
using Automobile.Admin.Models; 
using System.Threading.Tasks;
using JTJapan.Core.Helper; 
using System.Data;
using System.Data.SqlClient;
using Newtonsoft.Json;
using System.Collections.Generic;


namespace Automobile.Admin.Controllers
{
    public class CatalogController : BaseController
    {
        private int? GetDefaultValue(int? id)
        {
            return id == -1 ? null : id;
        }
        public ActionResult RoleSetup()
        {
            AdminRole admin = new AdminRole();
            return View(admin);
        }

        [HttpPost]
        [ValidateInput(false)]
        [ValidateAntiForgeryToken]
        public ActionResult RoleSetup(AdminRole admin)
        {
            try
            {
                if (ModelState.IsValid)
                {
                    SqlParameter[] parameters =
               {
                  new SqlParameter("@RoleCode", SqlDbType.Int) { Value = admin.roleCode },
                  new SqlParameter("@RoleName", SqlDbType.VarChar) { Value = admin.RoleName.Trim() },
                  new SqlParameter("@CreatedBy", SqlDbType.Int) { Value = General.CurrentUserID },
                  new SqlParameter("@UserIP", SqlDbType.VarChar) { Value = General.CurrentIP }
               };
                    DataSet ds = DataAccess.getDataSet("Admin_InsertUpdate_Role", parameters, General.GetConstring());
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        if (ds.Tables[0].Rows[0]["Status"].ToString() == "inserted")
                        {
                            TempData["Success"] = "Role added successfully!";
                        }
                        else if (ds.Tables[0].Rows[0]["Status"].ToString() == "updated")
                        {
                            TempData["Success"] = "Role updated successfully!";
                        }
                        else
                        {
                            TempData["alreadyExist"] = "Role already exist!";
                        }
                    }
                    else
                    {
                        admin.IsError = true;
                        admin.ErrorMessage = Message.ErrorMesssage;
                    }
                }
                TempData["Validation"] = "Validation message";
                return View(admin);

            }
            catch (Exception ex)
            {                
                return View(admin);
            }
        }

        [HttpGet]
        public async Task<string> GetAllScreens(int roleCode)
        { 
            try
            {
              
            DataSet ds = null;          
                SqlParameter[] parameters = {
                            new SqlParameter("@roleCode", SqlDbType.VarChar) { Value = roleCode  },
                       };
                ds = await DataAccess.ExecuteDatasetAsync(General.GetConstring(), CommandType.StoredProcedure, "Admin_Select_Screens", parameters);
         
            return JsonConvert.SerializeObject(ds);
            }
             catch (Exception ex)
             {
                 return JsonConvert.SerializeObject("");
             }
        }

        [HttpGet]
        public async Task<string> GetRolesAsync()
        {
            try
            {
                DataSet ds = null;
                ds = await DataAccess.ExecuteDatasetAsync(General.GetConstring(), CommandType.StoredProcedure, "Admin_Select_Roles", null);
               
                return JsonConvert.SerializeObject(ds);
            }
            catch (Exception ex)
            {                
                return JsonConvert.SerializeObject("");
            }
        }
      
        [HttpPost]
        public ActionResult AddScreen(int roleCode, List<int> Screen)
        {
            AdminRole admin = new AdminRole();
            try
            {
                if (ModelState.IsValid)
                {
                    SqlParameter[] parameters = {
                            new SqlParameter("@RoleCode", SqlDbType.Int) { Value = roleCode  },
                            new SqlParameter("@NavigationCode", SqlDbType.VarChar) { Value = Screen.Count() > 0 ? string.Join(",", Screen) : null},
                            new SqlParameter("@CreatedBy", SqlDbType.Int) { Value = General.CurrentUserID },
                            new SqlParameter("@UserIP", SqlDbType.VarChar) { Value = General.CurrentIP }
                       };
                    if (DataAccess.executeNonQuery("Admin_RoleNavigation_Mapping", parameters, General.GetConstring(), true)) 
                    {
                        TempData["Success"] = "Screen added successfully!";
                        return RedirectToAction("RoleSetup");
                    }
                    else
                    {
                        admin.IsError = true;
                        admin.ErrorMessage = Message.ErrorMesssage;
                    }
                }
                return View(admin);
            }
            catch (Exception ex)
            {   
                return View(admin);
            }
        }

        [HttpPost]
        public int DeleteScreen(int NavigationCode, int RoleCode)
        {
            try
            {
                SqlParameter[] parameters = {
                            new SqlParameter("@RoleCode", SqlDbType.Int) { Value = RoleCode  },
                            new SqlParameter("@NavigationCode", SqlDbType.Int) { Value = NavigationCode  },
                            new SqlParameter("@UpdatedBy", SqlDbType.Int) { Value = General.CurrentUserID  },
                            new SqlParameter("@UserIP", SqlDbType.VarChar) { Value =  General.CurrentIP }
                       };

                if (DataAccess.executeNonQuery("Admin_Delete_Screen", parameters, General.GetConstring(), true))                            
                {
                    return 1;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {                
                return 0;
            }
        }

        [HttpPost]
        public ActionResult DeleteRole(int RoleCode)
        {
            AdminRole admin = new AdminRole();
            try
            {
                SqlParameter[] parameters = {
                            new SqlParameter("@RoleCode", SqlDbType.Int) { Value = RoleCode },
                            new SqlParameter("@UpdatedBy", SqlDbType.Int) { Value = General.CurrentUserID },
                            new SqlParameter("@UserIP", SqlDbType.VarChar) { Value =  General.CurrentIP }
                       };

                if (DataAccess.executeNonQuery("Admin_Delete_Role", parameters, General.GetConstring(), true))                
                {
                    TempData["DeleteRole"] = "Role deleted successfully!";
                    return RedirectToAction("RoleSetup");
                }
                else
                {
                    admin.IsError = true;
                    admin.ErrorMessage = Message.ErrorMesssage;
                }
                return View(admin);
            }
            catch (Exception ex)
            {                
                return View(admin);
            }
        }

         public DataTable GetScreens(int? ScreenId)
         {
            DataTable dt = new DataTable();
            SqlParameter[] sqlParam = new SqlParameter[]
              {
                    new SqlParameter("@ScreenId",DataAccess.GetDataValue(ScreenId) )
              };
            return dt = DataAccess.getDataTable("dbo.Admin_SelectScreen", sqlParam, General.GetConstring());
        }
         public  List<SelectListItem> GetParerntScreenList()
         {
             List<SelectListItem> Parentlist = new List<SelectListItem>();
             DataTable dt = new DataTable();
             List<ScreenList> lst = new List<ScreenList>();
             try
             {
                 SqlParameter[] sqlParam = null;

                 dt = DataAccess.getDataTable("dbo.Admin_Select_ScreenList", sqlParam, General.GetConstring());
                 if (dt.Rows.Count > 0)
                 {
                     lst = EnumerableExtension.ToList<ScreenList>(dt);
                 }
                 //json = Serializer.Serialize(lst);

                 Parentlist = lst.Select(i => new SelectListItem()
                 {
                     Value = i.Id.ToString(),
                     Text = i.Name
                 }).ToList();
                 Parentlist.Insert(0, new SelectListItem() { Value = "0", Text = "Select Parent" });
             }
             catch (Exception ex)
             {

             }

             return Parentlist;
         }
         public  List<SelectListItem> GetLevelList()
         {
             List<SelectListItem> Levellist = new List<SelectListItem>();
             DataTable dt = new DataTable();
             List<LevelList> lst = new List<LevelList>();
             try
             {
                 SqlParameter[] sqlParam = null;

                 dt = DataAccess.getDataTable("dbo.Select_LevelList", sqlParam, General.GetConstring());
                 if (dt.Rows.Count > 0)
                 {
                     lst = EnumerableExtension.ToList<LevelList>(dt);
                 }
                 //json = Serializer.Serialize(lst);

                 Levellist = lst.Select(i => new SelectListItem()
                 {
                     Value = i.Id.ToString(),
                     Text = i.Name
                 }).ToList();                 
             }
             catch (Exception ex)
             {

             }
             return Levellist;
         }
         public DataTable InsertScreen(int? ScreenId, string Title, string URL, string IconClass, int? ParentCode, int LevelType, int? Sequence)
         {
             DataTable dt = new DataTable();

             SqlParameter[] sqlParam = new SqlParameter[] {
                    new SqlParameter("@ScreenId",DataAccess.GetDataValue(ScreenId)),               
                    new SqlParameter("@Title",DataAccess.GetDataValue(Title)),
                    new SqlParameter("@URL",DataAccess.GetDataValue(URL)),
                    new SqlParameter("@IconClass",DataAccess.GetDataValue(IconClass)),
                    new SqlParameter("@ParentCode",DataAccess.GetDataValue(ParentCode)),
                    new SqlParameter("@LevelType",DataAccess.GetDataValue(LevelType)),
                    new SqlParameter("@Sequence ",DataAccess.GetDataValue(Sequence)),   
                    new SqlParameter("@UpdatedBy",DataAccess.GetDataValue(General.CurrentUserID)),
                    new SqlParameter("@UpdationIP",DataAccess.GetDataValue(General.CurrentIP))
                   };

             return dt = DataAccess.getDataTable("dbo.Admin_Insert_UpdateScreen", sqlParam, General.GetConstring());
         }
         public static bool DeleteAdminScreen(int ScreenId)
         {
             bool result = false;
             try
             {
                 SqlParameter[] sqlParam = new SqlParameter[] {
                     new SqlParameter("@ScreenId",DataAccess.GetDataValue(ScreenId)),
                      new SqlParameter("@UpdatedBy",DataAccess.GetDataValue(General.CurrentUserID)),
                    new SqlParameter("@UpdationIP",DataAccess.GetDataValue(General.CurrentIP))
                   };
                 result = true;
                 DataAccess.getDataTable("dbo.Admin_Delete_AdminScreen", sqlParam, General.GetConstring());
             }
             catch (Exception ex)
             {
                 throw;
             }
             return result;
         }

        [HttpGet]
        public ActionResult Screen(int? ScreenId = null)
        {
            ScreenResponseModel objScreenResponseModel = new ScreenResponseModel();
            DataTable datatable = GetScreens(ScreenId);
            objScreenResponseModel.ScreenList = EnumerableExtension.ToList<ScreenViewModel>(datatable);
            return View(objScreenResponseModel);
        }
        public ActionResult _Screen(int? Id)
        {
            ScreenViewModel model = new ScreenViewModel();
            ViewBag.Level =  GetLevelList();
            ViewBag.ParentScreen = GetParerntScreenList();

            if (Id != null)
            {
                DataTable dataTable = GetScreens(Id);
                model.Id = Id;
                model.Title = dataTable.Rows[0]["Title"].ToString();
                model.URL = dataTable.Rows[0]["Url"].ToString();
                model.Sequence = (int)dataTable.Rows[0]["Sequence"];
                model.ParentName = dataTable.Rows[0]["ParentName"].ToString();
                model.IconClass = dataTable.Rows[0]["IconClass"].ToString();
                model.ParentCode = string.IsNullOrEmpty(dataTable.Rows[0]["ParentCode"].ToString()) ? 0 : Convert.ToInt32(dataTable.Rows[0]["ParentCode"]);
                model.LevelType = (int)dataTable.Rows[0]["LevelType"];
            }
            return PartialView(model);
        }

        [HttpPost]
        public JsonResult _Screen(ScreenViewModel viewModel)
        {
            DataTable dataTable = InsertScreen(viewModel.Id, viewModel.Title.Trim(), string.IsNullOrEmpty(viewModel.URL) ? null : viewModel.URL.Trim(), string.IsNullOrEmpty(viewModel.IconClass) ? null : viewModel.IconClass.Trim(), viewModel.ParentCode, viewModel.LevelType, viewModel.Sequence);
            bool IsExists = Convert.ToBoolean(dataTable.Rows[0]["IsExists"]);
            if (IsExists)
            {
                viewModel.IsValid = false;
                viewModel.Message = "Screen already exists";
            }
            else
            {
                viewModel.IsValid = true;
            }
            return Json(viewModel, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public string DeleteRoleScreen(int Id)
        {
            string msg = "";
            try
            {
                DeleteAdminScreen(Id);
                msg = "success";
            }
            catch (Exception ex)
            {
                msg = ex.Message;
            }

            return msg;
        }
            


        #region PortCountry
        public ActionResult PortCountry()
        {
            CatalogueResponseModel responseModel = new CatalogueResponseModel();
            DataTable dataTable = CatalogueMethod.GetPortCountry();
            responseModel.CatalogueList = EnumerableExtension.ToList<CatalogueViewModel>(dataTable);
            return View(responseModel);
        }

        [HttpPost]
        public JsonResult _PortCountry(CatalogueResponseModel Objects)
        {
            string msg = "";
            try
            {
                foreach (var obj in Objects.CatalogueList)
                {
                    CatalogueMethod.UpdatePortCountry(obj.Id, obj.MeterCubeRate);
                }
                msg = "success";
            }
            catch (Exception ex)
            {
                msg = ex.Message;
            }

            return Json(msg, JsonRequestBehavior.AllowGet);
        }
        
        #endregion

        #region ShippingVendor
        public ActionResult ShippingVendor()
        {
            CatalogueResponseModel responseModel = new CatalogueResponseModel();
            DataTable dataTable = CatalogueMethod.GetShippingVendor();
            responseModel.CatalogueList = EnumerableExtension.ToList<CatalogueViewModel>(dataTable);
            return View(responseModel);
        }

        public ActionResult _ShippingVendor(int? id)
        {
            CatalogueViewModel model = new CatalogueViewModel();

            if (id != null)
            {
                DataTable dataTable = CatalogueMethod.GetShippingVendor(id);

                if (dataTable != null && dataTable.Rows.Count > 0)
                {
                    model = dataTable.ToList<CatalogueViewModel>().FirstOrDefault();
                }
            }
            return PartialView(model);
        }

        [HttpPost]
        [ValidateInput(false)]
        [ValidateAntiForgeryToken]
        public JsonResult _ShippingVendor(CatalogueViewModel viewModel)
        {
            DataTable dataTable = CatalogueMethod.InsertShippingVendor(viewModel.Id, viewModel.Title, viewModel.Email, viewModel.CCEmail);
            bool IsExists = Convert.ToBoolean(dataTable.Rows[0]["IsExists"]);

            if (IsExists)
            {
                viewModel.IsValid = false;
                viewModel.Message = "Vendor already exists";
            }

            else
            {
                viewModel.IsValid = true;
            }

            return Json(viewModel, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult DeleteShippingVendor(int id)
        {
            BaseModel baseModel = new BaseModel();
            CatalogueMethod.DeleteShippingVendor(id);
            baseModel.IsValid = true;
            return Json(baseModel, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region PurchaseVendor
        public ActionResult PurchaseVendor()
        {
            CatalogueResponseModel responseModel = new CatalogueResponseModel();
            DataTable dataTable = CatalogueMethod.GetPurchaseVendor();
            responseModel.CatalogueList = EnumerableExtension.ToList<CatalogueViewModel>(dataTable);
            return View(responseModel);
        }

        public ActionResult _PurchaseVendor(int? id)
        {
            CatalogueViewModel model = new CatalogueViewModel();

            if (id != null)
            {
                DataTable dataTable = CatalogueMethod.GetPurchaseVendor(id);
                model.Title = dataTable.Rows[0]["Title"].ToString();
                model.Address = dataTable.Rows[0]["Address"].ToString();
            }
            return PartialView(model);
        }

        [HttpPost]
        [ValidateInput(false)]
        [ValidateAntiForgeryToken]
        public JsonResult _PurchaseVendor(CatalogueViewModel viewModel)
        {
            DataTable dataTable = CatalogueMethod.InsertPurchaseVendor(viewModel.Title, viewModel.Address, viewModel.Id);
            bool IsExists = Convert.ToBoolean(dataTable.Rows[0]["IsExists"]);

            if (IsExists)
            {
                viewModel.IsValid = false;
                viewModel.Message = "Vendor already exists";
            }

            else
            {
                viewModel.IsValid = true;
            }

            return Json(viewModel, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult DeletePurchaseVendor(int id)
        {
            BaseModel baseModel = new BaseModel();
            CatalogueMethod.DeletePurchaseVendor(id);
            baseModel.IsValid = true;
            return Json(baseModel, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region Transport
        public ActionResult Transport(int? TransportVendorId = null)
        {
            CatalogueResponseModel objCatalogueResponseModel = new CatalogueResponseModel();

            DataTable dataTable = CatalogueMethod.GetTransportVendor(TransportVendorId);
            objCatalogueResponseModel.CatalogueList = EnumerableExtension.ToList<CatalogueViewModel>(dataTable);

            return View(objCatalogueResponseModel);
        }

        [HttpPost]
        public string DeleteTransportVendor(int Id)
        {
            string msg = "";
            try
            {
                CatalogueMethod.DeleteTransportVendor(Id);
                msg = "success";
            }
            catch (Exception ex)
            {
                msg = ex.Message;
            }

            return msg;
        }

        public ActionResult _AddEditTransport(int? TransportVendorId = null)
        {
            CatalogueViewModel model = new CatalogueViewModel();

            if (TransportVendorId != null)
            {
                DataTable dataTable = CatalogueMethod.GetTransportVendor(TransportVendorId);
                model.Id = TransportVendorId;
                model.Title = dataTable.Rows[0]["Title"].ToString();
                model.Email = dataTable.Rows[0]["Email"].ToString();
                model.CCEmail = dataTable.Rows[0]["CCEmail"].ToString();
            }

            return PartialView(model);
        }

        [HttpPost]
        [ValidateInput(false)]
        [ValidateAntiForgeryToken]
        public JsonResult _AddEditTransport(CatalogueViewModel viewModel)
        {
            DataTable dataTable = CatalogueMethod.InsertTransportVendor(viewModel.Id, viewModel.Title, viewModel.Email, viewModel.CCEmail);
            bool IsExists = Convert.ToBoolean(dataTable.Rows[0]["IsExists"]);

            if (IsExists)
            {
                viewModel.IsValid = false;
                viewModel.Message = "TransportVendor already exists";
            }

            else
            {
                viewModel.IsValid = true;
            }

            return Json(viewModel, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Yard
        public ActionResult Yard(int? UnitLocationId = null)
        {
            CatalogueResponseModel objCatalogueResponseModel = new CatalogueResponseModel();
            DataTable datatable = CatalogueMethod.GetUnitLocations(UnitLocationId);
            objCatalogueResponseModel.CatalogueList = EnumerableExtension.ToList<CatalogueViewModel>(datatable);
            return View(objCatalogueResponseModel);
        }

        public ActionResult _Yard(int? Id)
        {
            CatalogueViewModel model = new CatalogueViewModel();
            ViewBag.Vendor = OGMethods.ShippingVendorList();
            ViewBag.Port = OGMethods.GetPortList();

            if (Id != null)
            {
                DataTable dataTable = CatalogueMethod.GetUnitLocations(Id);
                model.Id = Id;
                model.Title = dataTable.Rows[0]["Title"].ToString();
                model.Email = dataTable.Rows[0]["Email"].ToString();
                model.CCEmail = dataTable.Rows[0]["CCEmail"].ToString();
                model.InchargePerson = dataTable.Rows[0]["InchargePerson"].ToString();
                model.AddressLine1 = dataTable.Rows[0]["AddressLine1"].ToString();
                model.AddressLine2 = dataTable.Rows[0]["AddressLine2"].ToString();
                model.Phone = dataTable.Rows[0]["Phone"].ToString();
                model.Port = dataTable.Rows[0]["Port"].ToString();
                model.ShippingVendor = dataTable.Rows[0]["ShippingVendor"].ToString();
                model.PortId = (int)dataTable.Rows[0]["PortId"];
                model.VendorId = (int)dataTable.Rows[0]["VendorId"];
            }

            return PartialView(model);
        }

        [HttpPost]
        public JsonResult _Yard(CatalogueViewModel viewModel)
        {
            DataTable dataTable = CatalogueMethod.InsertUnitLocation(viewModel.Id, viewModel.Title, viewModel.Email, viewModel.CCEmail, viewModel.InchargePerson, viewModel.AddressLine1, viewModel.AddressLine2, viewModel.Phone, viewModel.PortId, viewModel.VendorId);
            bool IsExists = Convert.ToBoolean(dataTable.Rows[0]["IsExists"]);
            if (IsExists)
            {
                viewModel.IsValid = false;
                viewModel.Message = "Yard already exists";
            }
            else
            {
                viewModel.IsValid = true;
            }
            return Json(viewModel, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public string DeleteYard(int Id)
        {
            string msg = "";
            try
            {
                CatalogueMethod.DeleteUnitLocation(Id);
                msg = "success";
            }
            catch (Exception ex)
            {
                msg = ex.Message;
            }

            return msg;
        }
        #endregion

        #region ExporterCompany
        public ActionResult ExporterCompany(int? ExporterCompanyId = null)
        {
            CatalogueResponseModel objCatalogueResponseModel = new CatalogueResponseModel();
            DataTable dataTable = CatalogueMethod.GetExporterCompany(ExporterCompanyId);
            objCatalogueResponseModel.CatalogueList = EnumerableExtension.ToList<CatalogueViewModel>(dataTable);
            return View(objCatalogueResponseModel);
        }

        public ActionResult _ExporterCompany(int? Id)
        {
            CatalogueViewModel model = new CatalogueViewModel();

            if (Id != null)
            {
                DataTable dataTable = CatalogueMethod.GetExporterCompany(Id);
                model.Id = Id;
                model.Descriptions = dataTable.Rows[0]["Descriptions"].ToString();
                model.Title = dataTable.Rows[0]["Title"].ToString();
                model.Phone = dataTable.Rows[0]["Phone"].ToString();
                model.Fax = dataTable.Rows[0]["Fax"].ToString();
                model.Address = dataTable.Rows[0]["Address"].ToString();
            }

            return PartialView(model);
        }

        [HttpPost]
        public JsonResult _ExporterCompany(CatalogueViewModel viewModel)
        {
            DataTable dataTable = CatalogueMethod.InsertExporterCompany(viewModel.Id, viewModel.Title, viewModel.Address, viewModel.Phone, viewModel.Fax);
            bool IsExists = Convert.ToBoolean(dataTable.Rows[0]["IsExists"]);
            if (IsExists)
            {
                viewModel.IsValid = false;
                viewModel.Message = "ExporterCompany already exists";
            }
            else
            {
                viewModel.IsValid = true;
            }
            return Json(viewModel, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public string DeleteExporterCompany(int Id)
        {
            string msg = "";
            try
            {
                CatalogueMethod.DeleteExporterCompany(Id);
                msg = "success";
            }
            catch (Exception ex)
            {
                msg = ex.Message;
            }

            return msg;
        }
        #endregion

        #region CountryInspection
        public ActionResult CountryInspection()
        {
            CatalogueResponseModel objCatalogueResponseModel = new CatalogueResponseModel();
            DataTable dataTable = CatalogueMethod.GetCountryInspection();
            objCatalogueResponseModel.CatalogueList = EnumerableExtension.ToList<CatalogueViewModel>(dataTable);
            return View(objCatalogueResponseModel);
        }

        [HttpPost]
        public JsonResult _CountryInspection(CatalogueResponseModel Objects)
        {
            string msg = "";
            try
            {
                foreach (var obj in Objects.CatalogueList)
                {
                    CatalogueMethod.UpdateCountryInspection(obj.Id, obj.InspectionCost);
                }
                msg = "success";
            }
            catch (Exception ex)
            {
                msg = ex.Message;
            }

            return Json(msg, JsonRequestBehavior.AllowGet);
        }
        #endregion


        #region AssignRole
        public ActionResult AssignRole()
        {
            Role R = new Role();
            List<SelectListItem> lstofDept = GetDeptName();
            lstofDept.Insert(0, new SelectListItem() { Value = "-1", Text = "Select" });
            R.DeptList = lstofDept;
            return View(R);
        }

        public List<SelectListItem> GetDeptName()
        {
            try
            {
                List<SelectListItem> lstDeptName = new List<SelectListItem>();
                SqlParameter[] parameters = { };
                DataTable dt = DataAccess.getDataTable("Admin_Select_Departments", parameters, General.GetConstring());
                if (dt != null)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        lstDeptName.Add(new SelectListItem() { Value = dt.Rows[i]["DepartmentCode"].ToString(), Text = dt.Rows[i]["DepartmentName"].ToString() });
                    }
                }
                return lstDeptName;
            }
            catch (Exception ex)
            {
                //LogError(ex);
                throw;
            }
        }

        [HttpGet]
        public async Task<string> GetRoleDetails(int UserCode)
        {
            DataSet ds = null;
            SqlParameter[] parameters =
                        {
                            new SqlParameter("@UserCode", SqlDbType.Int){ Value= UserCode }
                         };
            ds = await DataAccess.ExecuteDatasetAsync(General.GetConstring(), CommandType.StoredProcedure, "Admin_RoleDetails", parameters);
            return JsonConvert.SerializeObject(ds);
        }
        [HttpGet]
        public async Task<string> GetClientDetails(int UserCode)
        {
            try
            {
                DataSet ds = null;
                SqlParameter[] parameters = {
                            new SqlParameter("@UserCode", SqlDbType.VarChar) { Value = UserCode  },
                       };
                ds = await DataAccess.ExecuteDatasetAsync(General.GetConstring(), CommandType.StoredProcedure, "Admin_ClientDetails", parameters);

                return JsonConvert.SerializeObject(ds);
            }
            catch (Exception ex)
            {
                return JsonConvert.SerializeObject("");
            }
        }

        [HttpGet]
        public async Task<string> GetAssignRoleAsync(string FullName, int DeptCode)
        {
            SecureQueryString OBJ = new SecureQueryString();
            try
            {
                Uri url = Request.UrlReferrer;
                DataSet ds = null;
                if (true)
                {
                    SqlParameter[] parameters =
                         {
                            new SqlParameter("@DeptCode", SqlDbType.Int){ Value= DeptCode },
                            new SqlParameter("@FullName", SqlDbType.VarChar){ Value= FullName }

                         };
                    ds = await DataAccess.ExecuteDatasetAsync(General.GetConstring(), CommandType.StoredProcedure, "Admin_AssignRole", parameters);

                    if (ds != null && ds.Tables.Count != 0 && ds.Tables[0].Rows.Count > 0)
                    {
                        DataTable dt = ds.Tables[0];
                        dt.Columns.Add("EncryptedStakeholderCode", typeof(System.String));
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            dt.Rows[i]["EncryptedStakeholderCode"] = OBJ.encrypt(dt.Rows[i]["UserID"].ToString());
                        }
                    }
                }
                return JsonConvert.SerializeObject(ds);
            }
            catch (Exception ex)
            {
                //LogError(ex);
                return JsonConvert.SerializeObject("");
            }
        }


        [HttpPost]
        public async Task<int> InsertRole(string RoleCode, int UserCode,int RoleTypeId)
        {
            if (RoleCode == string.Empty)
            {
                RoleCode = null;

            }

            SqlParameter[] parameters = {
                            new SqlParameter("@RoleIds", SqlDbType.VarChar) { Value = RoleCode  },
                            new SqlParameter("@UserId", SqlDbType.Int) { Value = UserCode  },
                            new SqlParameter("@RoleTypeId", SqlDbType.Int) { Value = RoleTypeId  },
                            new SqlParameter("@CreatedBy", SqlDbType.Int) { Value = General.CurrentUserID },
                            new SqlParameter("@UserIP", SqlDbType.VarChar) { Value = General.CurrentIP }
                       };
            int rowaffected = await DataAccess.ExecuteNonQueryAsync(General.GetConstring(), CommandType.StoredProcedure, "Admin_Insert_AssignRole", parameters);
            return rowaffected;
        } 
        #endregion


        #region RoleReport
        public ActionResult RoleReport()
        {
            return View();
        }

        [ValidateInput(false)]
        [HttpGet]
        public async Task<string> GetInfoAsync(int pageNo, int pageSize, string FullName)
        {
            SecureQueryString OBJ = new SecureQueryString();
            try
            {
                Uri url = Request.UrlReferrer;
                DataSet ds = null;
                if (true)
                {
                    SqlParameter[] parameters =
                        {
                            new SqlParameter("@PageCount", SqlDbType.Int) { Value = pageNo  },
                            new SqlParameter("@PageSize", SqlDbType.Int) { Value = pageSize },
                            new SqlParameter("@FullName", SqlDbType.VarChar){ Value= FullName }
                         };

                    ds = await DataAccess.ExecuteDatasetAsync(General.GetConstring(), CommandType.StoredProcedure, "Admin_DefineRoles", parameters);

                    if (ds != null && ds.Tables.Count != 0 && ds.Tables[0].Rows.Count > 0)
                    {
                        DataTable dt = ds.Tables[0];
                        dt.Columns.Add("EncryptedStakeholderCode", typeof(System.String));
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            dt.Rows[i]["EncryptedStakeholderCode"] = OBJ.encrypt(dt.Rows[i]["UserID"].ToString());
                        }
                    }
                }
                return JsonConvert.SerializeObject(ds);
            }
            catch (Exception ex)
            {
                return JsonConvert.SerializeObject("");
            }
        }
        #endregion


    }
}


+ DocumentationController.cs

using JTJapan.Core.AdminArea.ViewModel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using JTJapan.Core;
using System.Data;
using Newtonsoft.Json;
using JTJapan.Core.Helper;
using System.IO;
using JTJapan.Core.AdminArea;

using Automobile.Admin.Models;

namespace Automobile.Admin.Controllers
{
    public class DocumentationController : BaseController
    {

        #region MainPage
        public ActionResult Index()
        {
            return View();
        }

        public ActionResult _DocumentStats()
        {
            DocumentCountViewModel countVM = ReportMethods.GetDocumentPendingCount();
            return PartialView(countVM);
        }
        #endregion

        #region DocumentReport
        [ValidateInput(false)]
        public ActionResult _PendingCarDocument(int pageSize, int pageNumber, string chassisNumbers, int documentStatusId)
        {
            List<SelectListItem> fileNumbersList = new List<SelectListItem>();
            fileNumbersList.Insert(0, new SelectListItem() { Value = "0", Text = "Select" });  

            DocumentReceivingViewModelResponseModel responseModel = new DocumentReceivingViewModelResponseModel();
            responseModel.MultipleChassisNumbers = chassisNumbers;
            chassisNumbers = string.IsNullOrEmpty(chassisNumbers) ? chassisNumbers : chassisNumbers.Trim().Replace(' ', ',');

            for (int i = 1; i <= 100; i++)
            {
                fileNumbersList.Insert(i, new SelectListItem() { Value = i.ToString(), Text = i.ToString() });
            }

            ViewBag.ShelfList = ReportMethods.OG_ShelfList();
            ViewBag.ExporterList = OGMethods.SelectExporterCompany();
            ViewBag.FileNumberList = fileNumbersList; 

            DataSet dataSet = ReportMethods.GetPendingCarDocument(pageSize, pageNumber, chassisNumbers, documentStatusId);

            if (dataSet != null)
            {
                if (dataSet.Tables[0] != null && dataSet.Tables[0].Rows.Count > 0 && dataSet.Tables[1] != null)
                {
                    responseModel.DocumentList = EnumerableExtension.ToList<DocumentReceivingViewModelNew>(dataSet.Tables[0]);

                    if (!string.IsNullOrEmpty(chassisNumbers))
                    {
                        List<string> chassisNumbersList = new List<string>();
                        chassisNumbersList = chassisNumbers.Split(',').ToList();

                        for (int item = 0; item < chassisNumbersList.Count; item++)
                        {
                            if (!responseModel.DocumentList.Where(x => chassisNumbersList[item].Contains(x.ChassisNumber)).Any())
                            {
                                responseModel.MissingChassisList.Add(new MissingChassisNumber
                                {
                                    ChassisNumber = chassisNumbersList[item]
                                });
                            }
                        }
                    }

                    responseModel.TotalResults = Convert.ToInt32(dataSet.Tables[1].Rows[0]["TotalResults"]);
                    responseModel.CurrentPage = pageNumber;
                }
            }

            responseModel.PageSize = pageSize;
            responseModel.DocumentStatusId = documentStatusId;
            ViewBag.Message = responseModel.DocumentList.Count == 0 ? "No records found." : "";
            return PartialView(responseModel);
        }

        public JsonResult GetAvailableFileNumber(int shelfId , int purchaseId)
        {
            DataTable dataTable = ReportMethods.GetAvailableFileNumberAgainstShelf(shelfId, purchaseId);
            List<SelectListItem> fileNumberList = dataTable.AsEnumerable().Select(x =>  new SelectListItem {

                Text = x.Field<int>("FileNumbers").ToString() ,
                Value = x.Field<int>("FileNumbers").ToString()
            
            }).ToList();
            return Json(fileNumberList, JsonRequestBehavior.AllowGet);
        }

        [ValidateInput(false)]
        public ActionResult _PendingExportCertificate(int pageSize, int pageNumber, string chassisNumbers, int documentStatusId)
        {
            DocumentReceivingViewModelResponseModel responseModel = new DocumentReceivingViewModelResponseModel();
            responseModel.MultipleChassisNumbers = chassisNumbers;
            chassisNumbers = string.IsNullOrEmpty(chassisNumbers) ? chassisNumbers : chassisNumbers.Trim().Replace(' ', ',');


            ViewBag.ShelfList = ReportMethods.OG_ShelfList();
            ViewBag.ExporterList = OGMethods.SelectExporterCompany();

            DataSet dataSet = ReportMethods.GetPendingExportCertificate(pageSize, pageNumber, chassisNumbers, documentStatusId);

            if (dataSet != null)
            {
                if (dataSet.Tables[0] != null && dataSet.Tables[0].Rows.Count > 0 && dataSet.Tables[1] != null)
                {
                    responseModel.DocumentList = EnumerableExtension.ToList<DocumentReceivingViewModelNew>(dataSet.Tables[0]);


                    if (!string.IsNullOrEmpty(chassisNumbers))
                    {
                        List<string> chassisNumbersList = new List<string>();
                        chassisNumbersList = chassisNumbers.Split(',').ToList();

                        for (int item = 0; item < chassisNumbersList.Count; item++)
                        {
                            if (!responseModel.DocumentList.Where(x => chassisNumbersList[item].Contains(x.ChassisNumber)).Any())
                            {
                                responseModel.MissingChassisList.Add(new MissingChassisNumber
                                {
                                    ChassisNumber = chassisNumbersList[item]
                                });
                            }
                        }
                    }

                    responseModel.TotalResults = Convert.ToInt32(dataSet.Tables[1].Rows[0]["TotalResults"]);
                    responseModel.CurrentPage = pageNumber;
                }
            }




            responseModel.PageSize = pageSize;
            responseModel.DocumentStatusId = documentStatusId;
            ViewBag.Message = responseModel.DocumentList.Count == 0 ? "No records found." : "";
            return PartialView(responseModel);
        }

        [ValidateInput(false)]
        public ActionResult _PendingInspectionCertificate(int pageSize, int pageNumber, string chassisNumbers)
        {
            DocumentReceivingViewModelResponseModel responseModel = new DocumentReceivingViewModelResponseModel();
            responseModel.MultipleChassisNumbers = chassisNumbers;
            chassisNumbers = string.IsNullOrEmpty(chassisNumbers) ? chassisNumbers : chassisNumbers.Trim().Replace(' ', ',');

            DataSet dataSet = ReportMethods.GetPendingInspectionCertioficate(pageSize, pageNumber, chassisNumbers);

            if (dataSet != null)
            {
                if (dataSet.Tables[0] != null && dataSet.Tables[0].Rows.Count > 0 && dataSet.Tables[1] != null)
                {
                    responseModel.DocumentList = EnumerableExtension.ToList<DocumentReceivingViewModelNew>(dataSet.Tables[0]);

                    if (!string.IsNullOrEmpty(chassisNumbers))
                    {
                        List<string> chassisNumbersList = new List<string>();
                        chassisNumbersList = chassisNumbers.Split(',').ToList();

                        for (int item = 0; item < chassisNumbersList.Count; item++)
                        {
                            if (!responseModel.DocumentList.Where(x => chassisNumbersList[item].Contains(x.ChassisNumber)).Any())
                            {
                                responseModel.MissingChassisList.Add(new MissingChassisNumber
                                {
                                    ChassisNumber = chassisNumbersList[item]
                                });
                            }
                        }
                    }

                    responseModel.TotalResults = Convert.ToInt32(dataSet.Tables[1].Rows[0]["TotalResults"]);
                    responseModel.CurrentPage = pageNumber;
                }
            }

            responseModel.PageSize = pageSize;
            ViewBag.Message = responseModel.DocumentList.Count == 0 ? "No records found." : "";
            return PartialView(responseModel);
        }
        #endregion

        #region ZipFileStatus
        [HttpGet]
        public ActionResult _ExportDocumentAttachFile()
        {
            return PartialView("_AttachFile");
        }

        [HttpPost]
        public ActionResult _ExportDocumentFileDetail()
        {
            ExportDocumentResponseModel responseModel = new ExportDocumentResponseModel();
            string chassisNumbers = Utilities.GetZipDirectoryNames(Request.Files);

            if (!string.IsNullOrEmpty(chassisNumbers))
            {
                DataTable dataTable = ReportMethods.SelectExportDocumentStatus(chassisNumbers);
                if (dataTable != null && dataTable.Rows.Count > 0)
                {
                    responseModel.ExportDocumentStatusList = EnumerableExtension.ToList<ExportDocumentStatus>(dataTable);
                }
                responseModel.IsValid = true;
            }

            else
            {
                responseModel.Message = "No folders found";
            }
            return PartialView("_ExportDocumentFileDetail", responseModel);
        }

        [HttpGet]
        public ActionResult _CarDocumentAttachFile()
        {
            return PartialView("_AttachFile");
        }

        [HttpPost]
        public ActionResult _CarDocumentFileDetail()
        {
            ExportDocumentResponseModel responseModel = new ExportDocumentResponseModel();
            string chassisNumbers = Utilities.GetZipDirectoryNames(Request.Files);

            if (!string.IsNullOrEmpty(chassisNumbers))
            {
                DataTable dataTable = ReportMethods.SelectCarDocumentStatus(chassisNumbers);
                if (dataTable != null && dataTable.Rows.Count > 0)
                {
                    responseModel.ExportDocumentStatusList = EnumerableExtension.ToList<ExportDocumentStatus>(dataTable);
                }
                responseModel.IsValid = true;
            }

            else
            {
                responseModel.Message = "No folders found";
            }
            return PartialView("_CarDocumentFileDetail", responseModel);
        }

        [HttpGet]
        public ActionResult _InspectionCertificateAttachFile()
        {
            return PartialView("_AttachFile");
        }

        [HttpPost]
        public ActionResult _InspectionCertificateFileDetail()
        {
            ExportDocumentResponseModel responseModel = new ExportDocumentResponseModel();
            string chassisNumbers = Utilities.GetZipDirectoryNames(Request.Files);

            if (!string.IsNullOrEmpty(chassisNumbers))
            {
                DataTable dataTable = ReportMethods.SelectInspectionCertificateStatus(chassisNumbers);
                if (dataTable != null && dataTable.Rows.Count > 0)
                {
                    responseModel.ExportDocumentStatusList = EnumerableExtension.ToList<ExportDocumentStatus>(dataTable);
                }
                responseModel.IsValid = true;
            }

            else
            {
                responseModel.Message = "No folders found";
            }
            return PartialView("_CarDocumentFileDetail", responseModel);
        }
        #endregion

        #region DocumentActions
        [HttpPost]
        public ActionResult UpdateCarDocumentStatus(ExportDocumentRequestModel requestModel)
        {
            BaseModel baseModel = new BaseModel();

            foreach (var item in requestModel.UpdatedListOfExportDocument)
            {
                DocumentMethod.UpdateProductDocumentDetail(item.PurchaseId, item.CustomerProductInvoiceId, GetDefaultValue(item.ShelfId), GetDefaultValue(item.FileNumber), GetDefaultValue(item.ExporterId));
                DocumentMethod.UpdateProductDocumentStatus(item.CustomerProductInvoiceId , Constants.DocumentType.CarDocument.GetHashCode() , item.DocumentStatusId);

                if(item.DocumentStatusId == Constants.OG_ProductDocumentStatus.CarDocument_Dispatched.GetHashCode())
                {
                    DocumentMethod.UpdateProductDocumentStatus(item.CustomerProductInvoiceId, Constants.DocumentType.ExportCertificate.GetHashCode(), 
                        Constants.OG_ProductDocumentStatus.ExportCertificate_Pending.GetHashCode());
                }

                //ReportMethods.UpdateCarDocumentStatus(item.ShelfId == 0 ? null : item.ShelfId, item.CustomerProductInvoiceId, item.DocumentStatusId, item.ExporterId == 0 ? null : item.ExporterId);
            }

            baseModel.IsValid = true;
            baseModel.Message = "";
            return Json(baseModel, JsonRequestBehavior.AllowGet);
        }


        private int? GetDefaultValue(int? id)
        {
            return id == 0 ? null : id; 
        }

        [HttpPost]
        public JsonResult UpdateExportCertificateStatus(ExportDocumentRequestModel requestModel)
        {
            BaseModel baseModel = new BaseModel();

            foreach (var item in requestModel.UpdatedListOfExportDocument)
            {
                ReportMethods.UpdateExportCertificateStatus(item.ExpiryDate, item.ExporterId == 0 ? null : item.ExporterId, item.ShelfId == 0 ? null : item.ShelfId, item.CustomerProductInvoiceId, item.DocumentStatusId);
            }

            baseModel.IsValid = true;
            baseModel.Message = "";

            return Json(baseModel, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region UplaodFiles
        [HttpPost]
        public JsonResult UploadExportCertificate(string requestModel)
        {
            var documentModel = JsonConvert.DeserializeObject<UploadDocumentRequestModel>(requestModel);

            for (int j = 0; j < documentModel.ListOfDocument.Count; j++)
            {
                if (documentModel.ListOfDocument[j].StatusId == 2)
                {
                    DocumentMethod.DeleteProductDocuments(documentModel.ListOfDocument[j].CustomerProductInvoiceId, (int)Constants.DocumentType.ExportCertificate);
                }
            }

            var responseMOdel = Utilities.UploadFile(documentModel, (int)Constants.DocumentType.ExportCertificate, Request.Files);

            for (int i = 0; i < documentModel.ListOfDocument.Count; i++)
            {
                if (documentModel.ListOfDocument[i].IsAvailable)
                {
                    DocumentMethod.UpdateProductDocumentStatus(documentModel.ListOfDocument[i].CustomerProductInvoiceId, (int)Constants.DocumentType.ExportCertificate
                                                            , (int)Constants.OG_ProductDocumentStatus.ExportCertifcate_Uploaded);
                }
            }

            return Json(responseMOdel, JsonRequestBehavior.AllowGet);

        }

        [HttpPost]
        public JsonResult UploadCarDocument(string requestModel)
        {
            var documentModel = JsonConvert.DeserializeObject<UploadDocumentRequestModel>(requestModel);

            for (int j = 0; j < documentModel.ListOfDocument.Count; j++)
            {
                if (documentModel.ListOfDocument[j].StatusId == 2)
                {
                    DocumentMethod.DeleteProductDocuments(documentModel.ListOfDocument[j].CustomerProductInvoiceId, (int)Constants.DocumentType.CarDocument);
                }
            }


            var responseMOdel = Utilities.UploadFile(documentModel, (int)Constants.DocumentType.CarDocument, Request.Files);

            for (int i = 0; i < documentModel.ListOfDocument.Count; i++)
            {
                if (documentModel.ListOfDocument[i].IsAvailable)
                {
                    DocumentMethod.UpdateProductDocumentStatus(documentModel.ListOfDocument[i].CustomerProductInvoiceId, (int)Constants.DocumentType.CarDocument
                                                            , (int)Constants.OG_ProductDocumentStatus.CarDocument_Uploaded);
                }
            }
            return Json(responseMOdel, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult UploadInspectionCertificate(string requestModel)
        {
            var documentModel = JsonConvert.DeserializeObject<UploadDocumentRequestModel>(requestModel);

            for (int j = 0; j < documentModel.ListOfDocument.Count; j++)
            {
                if (documentModel.ListOfDocument[j].StatusId == 2)
                {
                    DocumentMethod.DeleteProductDocuments(documentModel.ListOfDocument[j].CustomerProductInvoiceId, (int)Constants.DocumentType.InspectionCertificate);
                }
            }

            var responseMOdel = Utilities.UploadFile(documentModel, (int)Constants.DocumentType.InspectionCertificate, Request.Files);

            for (int i = 0; i < documentModel.ListOfDocument.Count; i++)
            {
                if (documentModel.ListOfDocument[i].IsAvailable)
                {
                    DocumentMethod.UpdateProductDocumentStatus(documentModel.ListOfDocument[i].CustomerProductInvoiceId, (int)Constants.DocumentType.InspectionCertificate
                                                            , (int)Constants.OG_ProductDocumentStatus.Inspection_Certificate_Uploaded);
                }
            }
            return Json(responseMOdel, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Export To Excel
        [HttpGet]
        public void CarDocumentToExcel(string chassisNumbers, int documentStatusId)
        {
            DataTable dt = new DataTable();
            chassisNumbers = string.IsNullOrEmpty(chassisNumbers) ? chassisNumbers : chassisNumbers.Trim().Replace(' ', ',');
            dt = ReportMethods.GetPendingCarDocument(null, null, chassisNumbers, documentStatusId).Tables[0];
            Utilities.ExportToExcel(dt, "CarDocumentReport");
        }

        [HttpGet]
        public void ExportCertificateToExcel(string chassisNumbers, int documentStatusId)
        {
            DataTable dt = new DataTable();
            chassisNumbers = string.IsNullOrEmpty(chassisNumbers) ? chassisNumbers : chassisNumbers.Trim().Replace(' ', ',');
            dt = ReportMethods.GetPendingExportCertificate(null, null, chassisNumbers, documentStatusId).Tables[0];
            Utilities.ExportToExcel(dt, "ExportCertificateReport");

        }

        [HttpGet]
        public void InspectionCertificateToExcel(string chassisNumbers, int documentStatusId)
        {
            DataTable dt = new DataTable();
            chassisNumbers = string.IsNullOrEmpty(chassisNumbers) ? chassisNumbers : chassisNumbers.Trim().Replace(' ', ',');
            dt = ReportMethods.GetPendingInspectionCertioficate(null, null, chassisNumbers).Tables[0];
            Utilities.ExportToExcel(dt, "InspectionCertificateReport");
        }

        [HttpGet]
        [ActionName("ExportToExcelPendingDocument")]
        public void ExportToExcel(DateTime? DateFrom, DateTime? ToDate, int? DocumentStatusId, int? ClientId)
        {
            DataTable dt = new DataTable();

            DataSet dataSet = DocumentMethod.GetPendingDocumentsDetail(DateFrom, ToDate, DocumentStatusId, ClientId);

            dt = dataSet.Tables[0];

            if (DocumentStatusId == null)
            {
                int[] DocumentPendingStatus = { (int)Constants.OG_ProductDocumentStatus.CarDocuments_Pending, (int)Constants.OG_ProductDocumentStatus.ExportCertificate_Pending, (int)Constants.OG_ProductDocumentStatus.UnitPictures_Pending, (int)Constants.OG_ProductDocumentStatus.Alteration_Pending, (int)Constants.OG_ProductDocumentStatus.Inspection_Pending, (int)Constants.OG_ProductDocumentStatus.ShipmentBooking_Pending, (int)Constants.OG_ProductDocumentStatus.ShipmentBooking_Requested, (int)Constants.OG_ProductDocumentStatus.BLPending, (int)Constants.OG_ProductDocumentStatus.BLUploadedPaymentPending, (int)Constants.OG_ProductDocumentStatus.BLPaymentDoneRequestEmailPending };

                Utilities.ExportToExcel(dt, "PendingDocumentReport", DocumentPendingStatus);
            }
            else
            {
                Utilities.ExportToExcel(dt, "PendingDocumentReport");
            }
        }
        #endregion

        #region Reports
        public ActionResult PendingDocumentReport()
        {
            return View();
        }
        public ActionResult _PendingDocumentReport(DateTime? DateFrom, DateTime? ToDate)
        {
            PendingDocumentReportModel objPendingDocumentReportModel = new PendingDocumentReportModel();

            DataSet dataSet = DocumentMethod.GetPendingDocuments(DateFrom, ToDate);

            if (dataSet != null)
            {
                objPendingDocumentReportModel.ListOfPendingDocument = EnumerableExtension.ToList<PendingDocument>(dataSet.Tables[0]);
                PendingDocument objPendingDocument = new PendingDocument();
                foreach (var listItems in objPendingDocumentReportModel.ListOfPendingDocument)
                {
                    objPendingDocument.ClientId = -1;
                    objPendingDocument.Title = "Grand Total";
                    objPendingDocument.CarDocumentsPending += listItems.CarDocumentsPending;
                    objPendingDocument.ExportCertificatePending += listItems.ExportCertificatePending;
                    objPendingDocument.UnitPicturesPending += listItems.UnitPicturesPending;
                    objPendingDocument.AlterationPending += listItems.AlterationPending;
                    objPendingDocument.InspectionPending += listItems.InspectionPending;
                    objPendingDocument.ShipmentBookingPending += listItems.ShipmentBookingPending;
                    objPendingDocument.ShipmentBookingRequested += listItems.ShipmentBookingRequested;
                    objPendingDocument.BLPending += listItems.BLPending;
                    objPendingDocument.BLUploaded += listItems.BLUploaded;
                    objPendingDocument.BLPaymentDone += listItems.BLPaymentDone;
                    objPendingDocument.DHLPending += listItems.DHLPending;
                }
                objPendingDocumentReportModel.ListOfPendingDocument.Add(objPendingDocument);
            }
            else
            {
                return Content("");
            }

            return PartialView(objPendingDocumentReportModel);
        }
        public ActionResult _PendingDocumentReportDetail(PendingDocumentDetailParameterModel objPendingDocumentDetailParameterModel)
        {

            PendingDocumentReportDetailModel objPendingDocumentReportDetailModel = new PendingDocumentReportDetailModel();

            DataSet dataSet = DocumentMethod.GetPendingDocumentsDetail(objPendingDocumentDetailParameterModel.DateFrom, objPendingDocumentDetailParameterModel.ToDate, objPendingDocumentDetailParameterModel.DocumentStatusId, objPendingDocumentDetailParameterModel.ClientId);

            if (dataSet != null)
            {

                objPendingDocumentReportDetailModel.ListOfPendingDocumentDetail = EnumerableExtension.ToList<PendingDocumentDetail>(dataSet.Tables[0]);
                objPendingDocumentReportDetailModel.DateFrom = objPendingDocumentDetailParameterModel.DateFrom;
                objPendingDocumentReportDetailModel.ToDate = objPendingDocumentDetailParameterModel.ToDate;
                objPendingDocumentReportDetailModel.DocumentStatusId = objPendingDocumentDetailParameterModel.DocumentStatusId;
                objPendingDocumentReportDetailModel.ClientId = objPendingDocumentDetailParameterModel.ClientId;
            }
            else
            {
                return Content("");
            }

            return PartialView(objPendingDocumentReportDetailModel);
        }
        #endregion
    }
}


+ HomeController.cs

using Automobile.Admin.Models;
using JTJapan.Core.AdminArea;
using JTJapan.Core.AdminArea.ViewModel;
using JTJapan.Core.Helper;
using System;
using System.Collections.Generic;
using System.Web.Mvc;
using Newtonsoft.Json;
using System.Configuration;
using Automobile.Admin.Models;
using System.Collections;
using System.Data;
using JTJapan.Core;
using System.Net.Http;
using System.Net;
using System.Text.RegularExpressions;
using System.Text;
using System.IO;
using System.Web.UI;
using System.Web.UI.HtmlControls;

namespace Automobile.Admin.Controllers
{
    public class HomeController : BaseController
    {
        public ActionResult Index()
        {
            return View();
        }

        public ActionResult Dashboard()
        {
            return View();
        }
        public ActionResult _Dashboard(DateTime DateFrom, DateTime ToDate)
        {

            DataTable dtDashboardCount = ScreenMethods.GetDashboardCount(DateFrom, ToDate);
            DataTable dtDocumentStatus = ScreenMethods.GetDashboardDocumentStatus();

            DashboardModel objDashboardModel = new DashboardModel();

            if (dtDashboardCount != null && dtDashboardCount.Rows.Count > 0)
            {
                objDashboardModel.DashboardCountList = EnumerableExtension.ToList<DashboardCounts>(dtDashboardCount);
            }
            if (dtDocumentStatus != null && dtDocumentStatus.Rows.Count > 0)
            {
                objDashboardModel.DocumentStatusList = EnumerableExtension.ToList<DocumentsStatus>(dtDocumentStatus);
            }
            return PartialView(objDashboardModel);
        }
        public ActionResult _Header()
        {
            try
            {
                ViewBag.ClientList = UsersMethods.GetUserClient(AuthBase.UserId, false);
            }
            catch (Exception)
            {

            }
            return View();
        }



        [HttpPost]
        [ValidateInput(false)]
        public ActionResult SearchMaster(string txtsearch)
        {
            ViewData["txtSearch"] = txtsearch;
            return View(GetSearchedResult(txtsearch));
        }

        [HttpGet]
        public ActionResult SearchMaster()
        {
            return View();
        }
        
        [AcceptVerbs("Get", "Post")]
        [ValidateInput(false)]
        public ActionResult _SearchMaster(string txtsearch = null, string clienttype = null)
        {
            ViewData["txtSearch"] = txtsearch;
            if (!string.IsNullOrEmpty(clienttype))
                ViewData["clienttype"] = "-1";
            else
                ViewData["clienttype"] = "1";

            return PartialView(GetSearchedResult(txtsearch));
        }
        [HttpGet]
        public ActionResult SearchMasterResult()
        {
            ViewData["txtSearch"] = "";
            return PartialView(GetSearchedResult(null));
        }
        public JsonResult MultipleImages(int dtid, int cpid,int purid)
        {
            DataSet dsImages = DocumentMethod.GetDocumentsByTypeId(cpid, dtid, purid);
            List<ProductDocumentViewModel> multiImages = EnumerableExtension.ToList<ProductDocumentViewModel>(dsImages.Tables[0]);
            return Json(multiImages, JsonRequestBehavior.AllowGet);
        }
    
        public ActionResult _LeftSidebar()
        {
            List<AdminMenu> lstMenu = new List<AdminMenu>();
            try
            {
                lstMenu = ReportMethods.GetAdminMenu(AuthBase.UserId, AuthBase.ClientId, true);
            }
            catch (Exception)
            {

            }
            return View(lstMenu);
        }
        public JsonResult UpdateClientId(int ClientId)
        {
            AuthBase.ClientId = ClientId;
            return Json(true);
        }

        #region internal methods for master search
        public List<SearchedResult> GetSearchedResult(string srchValue)
        {
            DataSet dsSearch = JTJapan.Core.AdminArea.ShipmentReportMethods.GetSearchedDataset(srchValue);
            SearchedResult srchResult = new SearchedResult();
            srchResult.Purchase = new List<SearchedPurchase>();
            srchResult.Invoice = new List<SearchedInvoice>();
            srchResult.ProductDocumentStatus = new List<SearchedProductDocumentStatus>();
            srchResult.Customer = new List<SearchedCustomer>();

            if (dsSearch.Tables.Count > 0)
            {
                srchResult.Purchase = EnumerableExtension.ToList<SearchedPurchase>(dsSearch.Tables[0]);
                srchResult.Invoice = EnumerableExtension.ToList<SearchedInvoice>(dsSearch.Tables[1]);
                srchResult.Customer = EnumerableExtension.ToList<SearchedCustomer>(dsSearch.Tables[2]);
                srchResult.ProductDocumentStatus = EnumerableExtension.ToList<SearchedProductDocumentStatus>(dsSearch.Tables[3]);
            }
            List<SearchedResult> ResultList = new List<SearchedResult>();
            ResultList.Add(srchResult);

            return ResultList;
        }



        #endregion





    }
}
 
+ ShipmentController.cs

using System;
using System.Collections.Generic;
using System.Web.Mvc;
using System.Data;
using JTJapan.Core;
using JTJapan.Core.Helper;
using JTJapan.Core.AdminArea;
using JTJapan.Core.AdminArea.ViewModel;
using Newtonsoft.Json;
using System.Configuration;
using Automobile.Admin.Models;
namespace Automobile.Admin.Controllers
{
    public class ShipmentController : BaseController
    {
        public int Count = 0;

        #region CarPending
        // CarPending 

        [HttpGet]
        public ActionResult CarPending()
        {
            ViewBag.Title = "Cars Pending";
            return View(GetPendingShipmentDetails(1, 10000, null));
        }


        [HttpGet]
        [ActionName("CarPendingExportToExcel")]
        public void ExportToExcel()
        {
            DataSet ExportData = ShipmentReportMethods.GetPendingShipments(null, null, AuthBase.ClientId, null);
            Utilities.ExportToExcel(ExportData.Tables[0],"UnitReceivingPending");
        }


        [HttpPost]
        [ValidateInput(false)]
        public ActionResult CarPending(string txtChassisNo)
        {
            return View(GetPendingShipmentDetails(1, 10000, txtChassisNo == "" ? null : txtChassisNo));
        }

        [HttpGet]
        public JsonResult CarPendingSearch(string txtChassisNo)
        {
            ViewBag.Title = "Cars Pending";
            return Json(GetPendingShipmentDetails(1, 10000, txtChassisNo), JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public string UpdateShipmentDetail(CarPendingData[] customerproductinvoiceids)
        {

            string msg = "";
            if (customerproductinvoiceids != null)
            {
                try
                {
                    foreach (CarPendingData cpdata in customerproductinvoiceids)
                    {
                        if (!string.IsNullOrEmpty(cpdata.cpid) && !string.IsNullOrEmpty(cpdata.stockid) && cpdata.stockid.Length < 15 && CheckInput(cpdata.stockid))
                            TransportMethods.UpdateTransportationStatusCPI(Convert.ToInt32(cpdata.cpid), Constants.OG_UnitTransportationStatus.UnitReceivedatYard.GetHashCode(), AuthBase.ClientId, AuthBase.UserId, cpdata.stockid);
                    }
                    msg = "success";
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                }
            }
            else
            {
                msg = "Please Select Record";
            }
            return msg;
        }

        #endregion


        #region CarInspection


        //CarInspection

        [HttpGet]
        public ActionResult CarInspection()
        {
            ViewBag.Title = "Cars Inspection";
            return View(GetPendingInspections(DateTime.Now, DateTime.Now, 1, 10000, null));
        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult CarInspection(string txtChassisNo)
        {
            return View(GetPendingInspections(DateTime.Now, DateTime.Now, 1, 10000, txtChassisNo == "" ? null : txtChassisNo));
        }

        [HttpGet]
        public ActionResult _SendEmailPreview(string CustomerProductInvoiceId,string Ins)
        {
            try
            {
                ViewBag.CustomerProductInvoiceId = CustomerProductInvoiceId;
                List<InspectionEmailModel> model = new List<InspectionEmailModel>();
                List<InspectionEmailModel> response = new List<InspectionEmailModel>();
                string Link = "";
                SecureQueryString ObjSecureQueryString = new SecureQueryString();
                Link = ObjSecureQueryString.encrypt("id=" + CustomerProductInvoiceId + "&type=" + 3);
                model = ShipmentReportMethods.GetEmailForPreview(Convert.ToInt32(CustomerProductInvoiceId));
                InspectionEmailModel obj = new InspectionEmailModel();
                obj = model[0];
                obj.EmailBody = obj.EmailBody.Replace("[Var_Shipper]", obj.Shipper);
                obj.EmailBody = obj.EmailBody.Replace("[Var_InspectionType]", Ins);
                obj.EmailBody = obj.EmailBody.Replace("[Var_TransportVendor]", obj.TransportVendor);
                obj.EmailBody = obj.EmailBody.Replace("[Var_Chassis]", obj.ChassisNumber);
                obj.EmailBody = obj.EmailBody.Replace("[Var_Year]", obj.ModelYear);
                obj.EmailBody = obj.EmailBody.Replace("[Var_Make]", obj.Make);
                obj.EmailBody = obj.EmailBody.Replace("[Var_Model]", obj.Model);
                obj.EmailBody = obj.EmailBody.Replace("[Var_Port]", obj.Port);
                obj.EmailBody = obj.EmailBody.Replace("[Var_Country]", obj.Country);
                obj.EmailBody = obj.EmailBody.Replace("[Var_PurVendor]", obj.PurchaseVendorId);
                obj.EmailBody = obj.EmailBody.Replace("[Var_PurDate]", obj.PurchaseDate);
                obj.EmailBody = obj.EmailBody.Replace("[VAR_Parameter]", Link);
                response.Add(obj);
                return PartialView(response);
            }
            catch
            {

                return null;
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public string InsertEmailTemplate(string customerproductinvoiceid, string fromemail, string toemail,string ccemail ,string body, string tmpId = "0")
        {
            try
            {
                ShipmentReportMethods.InsertEmailTemplateForInspection(Convert.ToInt32(customerproductinvoiceid), AuthBase.ClientId, fromemail, toemail, ccemail , int.Parse(tmpId), body);
                return "success";
            }
            catch (Exception ex) { return "error"; }
        }

        [HttpPost]
        public string UpdateInspectionDetail(object customerproductinvoiceids)
        {
            string msg = "";
            if (customerproductinvoiceids != null)
            {
                string[] customerproductids = (string[])customerproductinvoiceids;
                try
                {
                    foreach (string pid in customerproductids)
                    {
                        if (pid != null && pid != "" && pid != "0")
                            DocumentMethod.UpdateProductDocumentStatus(Convert.ToInt32(pid), Constants.DocumentType.InspectionCertificate.GetHashCode(), Constants.OG_ProductDocumentStatus.InspectionRequested.GetHashCode());
                    }
                    msg = "success";
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                }
            }
            else
            {
                msg = "Please Select Record";
            }
            return msg;
        }

        #endregion

        #region Car Inspection Request

        // Car inspection Approval

        [HttpGet]
        public ActionResult CarInspectionRequest()
        {
            ViewBag.Title = "Cars Inspection Request Pending";
            return View(GetPendingInspectionRequests(DateTime.Now, DateTime.Now, 1, 10000, null));
        }
        [HttpPost]
        [ValidateInput(false)]
        public ActionResult CarInspectionRequest(string txtChassisNo)
        {
            return View(GetPendingInspectionRequests(DateTime.Now, DateTime.Now, 1, 10000, txtChassisNo == "" ? null : txtChassisNo));
        }
        [HttpPost]
        public string UpdateInspectionRequestDetail(object customerproductinvoiceids, string cmd,string inspectId=null,string comment = null)
        {
            string msg = "";
            if (customerproductinvoiceids != null)
            {
                string[] customerproductids = (string[])customerproductinvoiceids;
                try
                {
                    foreach (string pid in customerproductids)
                    {
                        if (pid != null && pid != "" && pid != "0")
                        {
                            if (cmd == "1")
                                DocumentMethod.UpdateProductDocumentStatus(Convert.ToInt32(pid), Constants.DocumentType.InspectionCertificate.GetHashCode(), Constants.OG_ProductDocumentStatus.InpectionPassed.GetHashCode());
                            if (cmd == "0")
                             {
                                DocumentMethod.UpdateProductDocumentStatus(Convert.ToInt32(pid), Constants.DocumentType.InspectionCertificate.GetHashCode(), Constants.OG_ProductDocumentStatus.InpectionFailed.GetHashCode());
                                DocumentMethod.UpdateCustomerInvoiceInspection(Convert.ToInt32(pid), Convert.ToInt32(inspectId == null ? "0" : inspectId), comment);
                            }
                        }
                    }
                    msg = "success";
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                }
            }
            else
            {
                msg = "Please Select Record";
            }
            return msg;
        }

        [HttpGet]
        public ActionResult _FailDetailModal(string customerproductinvoiceid)
        {
            ViewData["InvoiceId"] = customerproductinvoiceid;
            return PartialView(ShipmentReportMethods.GetAlterationListwise());   
        }

        [HttpPost]
        public string FailDetailModal(CarInspectionRequestFailData input)
        {
            if(input.actionType==0)
            {
               int invoiceAlterationId = DocumentMethod.UpdateCustomerInvoiceAlteration(input.cpid, input.reqComment);
                foreach (string val in input.AlterType)
                {
                    bool result = ShipmentReportMethods.InsertInspectionFail(Convert.ToInt32(val), invoiceAlterationId, input.cpid);               
                }
            }
            else if (input.actionType == 1)
            {
                DocumentMethod.UpdateProductDocumentStatus(input.cpid, Constants.DocumentType.InspectionCertificate.GetHashCode(), Constants.OG_ProductDocumentStatus.InpectionFailed.GetHashCode());              
            }
             return "";
          }
        #endregion

        #region Inspection Certificate Request

        [HttpGet]
        public ActionResult InspectionCertificateRequest()
        {
            ViewBag.Title = "Cars Inspection Certificate";
            return View(GetInspectionsForCertificate(DateTime.Now, DateTime.Now, 1, 10000, null));
        }
        [HttpPost]
        [ValidateInput(false)]
        public ActionResult InspectionCertificateRequest(string txtChassisNo)
        {
            return View(GetInspectionsForCertificate(DateTime.Now, DateTime.Now, 1, 10000, txtChassisNo == "" ? null : txtChassisNo));
        }
        [HttpPost]
        public string UpdateInspectionCertificateRequest(object customerproductinvoiceids)
        {
            string msg = "";
            if (customerproductinvoiceids != null)
            {
                string[] customerproductids = (string[])customerproductinvoiceids;
                try
                {
                    foreach (string pid in customerproductids)
                    {
                        DocumentMethod.UpdateProductDocumentStatus(Convert.ToInt32(pid), Constants.DocumentType.InspectionCertificate.GetHashCode(), Constants.OG_ProductDocumentStatus.Inspection_Certificate_Requested.GetHashCode());

                    }
                    msg = "success";
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                }
            }
            else
            {
                msg = "Please Select Record";
            }
            return msg;
        }



        #endregion

        #region Alteration

        // Alteration Pending

        [HttpGet]
        public ActionResult AlterationPending()
        {
            ViewBag.Vendor = OGMethods.GetVendorList();
            return View(GetPendingAlterations(DateTime.Now, DateTime.Now, 1, 10000, null));
        }

        [HttpPost]
        public ActionResult AlterationPending(string txtChassisNo)
        {
            ViewBag.Vendor = OGMethods.GetVendorList();
            return View(GetPendingAlterations(DateTime.Now, DateTime.Now, 1, 10000, txtChassisNo == "" ? null : txtChassisNo));
        }

        [HttpPost]
        public string UpdateAlterationPending(ExportVendorModel objects)
        {

            string msg = "";
            if (objects != null)
            {
                try
                {
                    foreach (var obj in objects.UpdateListOfVendorModel)
                    {
                        if (obj.cpid != 0)
                        {
                            DocumentMethod.UpdateCustomerInvoiceAlteration(Convert.ToInt32(obj.cpid), obj.vendid, obj.comments);
                            DocumentMethod.UpdateProductDocumentStatus(Convert.ToInt32(obj.cpid), Constants.DocumentType.Alteration.GetHashCode(), Constants.OG_ProductDocumentStatus.Alteration_Requested.GetHashCode());
                        }
                    }
                    msg = "success";
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                }
            }
            else
            {
                msg = "Please Select Record";
            }
            return msg;
        }

        [HttpGet]
        [ActionName("AlterationPendingExportToExcel")]
        public void ExportToExcel1()
        {
            DataSet ExportData = ShipmentReportMethods.GetPendingAlterations(DateTime.Now, DateTime.Now, null, null, AuthBase.ClientId, null);
            Utilities.ExportToExcel(ExportData.Tables[0], "AlterationPending");
        }
        #endregion


        #region AlterationPendingRequest
        //Alteration Pending request

        [HttpGet]
        public ActionResult AlterationRequestPending()
        {
            return View(GetPendingAlterationRequest(DateTime.Now, DateTime.Now, 1, 10000, null));
        }

        [HttpPost]
        public ActionResult AlterationRequestPending(string txtChassisNo)
        {
            return View(GetPendingAlterationRequest(DateTime.Now, DateTime.Now, 1, 10000, txtChassisNo == "" ? null : txtChassisNo));
        }
        [HttpPost]
        public string UpdateAlterationRequestPending(AlterationPendingComment[] objects)
        {

            string msg = "";
            if (objects != null)
            {
                try
                {
                    foreach (var obj in objects)
                    {
                        if (!string.IsNullOrEmpty(obj.cpid))
                            DocumentMethod.Update_CustomerInvoiceAlteration(Convert.ToInt32(obj.cpid), obj.comment);
                        DocumentMethod.UpdateProductDocumentStatus(Convert.ToInt32(obj.cpid), Constants.DocumentType.Alteration.GetHashCode(), Constants.OG_ProductDocumentStatus.Alteration_Done.GetHashCode());
                    }
                    msg = "success";
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                }
            }
            else
            {
                msg = "Please Select Record";
            }
            return msg;
        }

        public class CarPendingData
        {
            public string cpid { get; set; }
            public string stockid { get; set; }
        }

        public class AlterationPendingComment
        {
            public string cpid { get; set; }
            public string comment { get; set; }
        }

        [HttpGet]
        [ActionName("AlterationRequestPendingExportToExcel")]
        public void ExportToExcel2()
        {
            DataSet ExportData = ShipmentReportMethods.GetPendingAlterationRequests(DateTime.Now, DateTime.Now, null, null, AuthBase.ClientId, null);
            Utilities.ExportToExcel(ExportData.Tables[0], "AlterationRequestPending");
        }
        #endregion

        #region Internal methods
        //Methods internal.

        protected bool CheckInput(string input)
        {
            if (input.Contains("<") || input.Contains(">") || input.Contains("</") || input.Contains("="))
                return false;
            else
                return true;

        }

        protected List<ShippingYard> GetPendingShipmentDetails(int? PageNum, int? PageSize, string ChasisNo)
        {
            DataSet dt = new DataSet();
            dt = JTJapan.Core.AdminArea.ShipmentReportMethods.GetPendingShipments(PageNum, PageSize, AuthBase.ClientId, ChasisNo);

            ViewData["MissingChassis"] = EnumerableExtension.ToList<MissingChassis>(dt.Tables[3]);
            try
            {

                int totalVendors = dt.Tables[0].Rows.Count;
                List<ShippingYard> lstVendorShipment = new List<ShippingYard>();
                for (int i = 0; i < totalVendors; i++)
                {
                    string ShippingYardId = dt.Tables[0].Rows[i]["ShippingYardId"].ToString();
                    string filterexpr = "ShippingYardId = " + ShippingYardId + "";
                    ShippingYard vendor = new ShippingYard();
                    vendor.shipyardId = dt.Tables[0].Rows[i]["ShippingYardId"].ToString();
                    vendor.shipyard = dt.Tables[0].Rows[i]["ShippingYard"].ToString();
                    vendor.MissingChassis = null;
                    if (ChasisNo != null)
                    {
                        i = totalVendors;
                        filterexpr = "";
                        vendor.shipyardId = "-1";
                        vendor.shipyard = "Searched Results";
                    }
                    DataRow[] CurrentVendorRow = dt.Tables[1].Select(filterexpr);
                    vendor.shipyardDetail = new List<ShippmentDetail>();
                    for (int k = 0; k < CurrentVendorRow.Length; k++)
                    {
                        ShippmentDetail vndDetail = new ShippmentDetail();
                        vndDetail.sno = k;
                        vndDetail.Country = CurrentVendorRow[k]["Country"].ToString();
                        vndDetail.ChasisID = CurrentVendorRow[k]["ChassisNumber"].ToString();
                        vndDetail.Make = CurrentVendorRow[k]["Make"].ToString();
                        vndDetail.Model = CurrentVendorRow[k]["Model"].ToString();
                        vndDetail.Year = CurrentVendorRow[k]["ModelYear"].ToString();
                        vndDetail.Port = CurrentVendorRow[k]["Port"].ToString();
                        vndDetail.ShippingYard = CurrentVendorRow[k]["ShippingYard"].ToString();
                        vndDetail.ShipmentType = CurrentVendorRow[k]["ShipmentType"].ToString();
                        vndDetail.customerProductInvoiceNumber = CurrentVendorRow[k]["customerProductInvoiceNumber"].ToString();
                        vndDetail.CustomerProductInvoiceId = CurrentVendorRow[k]["CustomerProductInvoiceId"].ToString();
                        vndDetail.VendorName = CurrentVendorRow[k]["TransportVendor"].ToString();
                        vndDetail.PurchaseDate = CurrentVendorRow[k]["PurchaseDate"].ToString();
                        vendor.shipyardDetail.Add(vndDetail);
                    }
                    lstVendorShipment.Add(vendor);
                }
                return lstVendorShipment;
            }
            catch (Exception)
            {
                return null;
            }
        }
        protected List<ShippingYard> GetPendingInspections(DateTime fromDate, DateTime toDate, int PageNum, int PageSize, string ChasisNo)
        {
            DataSet dt = new DataSet();
            dt = JTJapan.Core.AdminArea.ShipmentReportMethods.GetPendingInspections(fromDate, toDate, PageNum, PageSize, AuthBase.ClientId, ChasisNo);
            ViewData["MissingChassis"] = EnumerableExtension.ToList<MissingChassis>(dt.Tables[3]);
            try
            {
                int totalVendors = dt.Tables[0].Rows.Count;
                List<ShippingYard> lstVendorShipment = new List<ShippingYard>();
                for (int i = 0; i < totalVendors; i++)
                {
                    string ShippingYardId = dt.Tables[0].Rows[i]["ShippingYardId"].ToString();
                    string filterexpr = "ShippingYardId = " + ShippingYardId + "";
                    ShippingYard vendor = new ShippingYard();
                    vendor.shipyardId = dt.Tables[0].Rows[i]["ShippingYardId"].ToString();
                    vendor.shipyard = dt.Tables[0].Rows[i]["ShippingYard"].ToString();
                    if (ChasisNo != null)
                    {
                        i = totalVendors;
                        filterexpr = "";
                        vendor.shipyardId = "-1";
                        vendor.shipyard = "Searched Results";
                       
                    }
                    DataRow[] CurrentVendorRow = dt.Tables[1].Select(filterexpr);
                    vendor.shipyardDetail = new List<ShippmentDetail>();
                    for (int k = 0; k < CurrentVendorRow.Length; k++)
                    {
                        ShippmentDetail vndDetail = new ShippmentDetail();
                        vndDetail.sno = k;
                        vndDetail.Country = CurrentVendorRow[k]["Country"].ToString();
                        vndDetail.ChasisID = CurrentVendorRow[k]["ChassisNumber"].ToString();
                        vndDetail.Make = CurrentVendorRow[k]["Make"].ToString();
                        vndDetail.Model = CurrentVendorRow[k]["Model"].ToString();
                        vndDetail.Year = CurrentVendorRow[k]["ModelYear"].ToString();
                        vndDetail.Port = CurrentVendorRow[k]["Port"].ToString();
                        vndDetail.ShippingYard = CurrentVendorRow[k]["ShippingYard"].ToString();
                        vndDetail.ShipmentType = CurrentVendorRow[k]["ShipmentType"].ToString();
                        vndDetail.customerProductInvoiceNumber = CurrentVendorRow[k]["customerProductInvoiceNumber"].ToString();
                        vndDetail.CustomerProductInvoiceId = CurrentVendorRow[k]["CustomerProductInvoiceId"].ToString();
                        vndDetail.EmailStatus = CurrentVendorRow[k]["EmailStatus"].ToString();
                        vndDetail.InspectionName = CurrentVendorRow[k]["InspectionName"].ToString();
                        vndDetail.InspectionCost = CurrentVendorRow[k]["InspectionCost"].ToString();
                        vendor.shipyardDetail.Add(vndDetail);
                    }
                    lstVendorShipment.Add(vendor);
                }
                return lstVendorShipment;
            }
            catch (Exception)
            {
                return null;
            }
        }
        protected List<ShippingYard> GetPendingInspectionRequests(DateTime fromDate, DateTime toDate, int PageNum, int PageSize, string ChasisNo)
        {
            DataSet dt = new DataSet();
            dt = JTJapan.Core.AdminArea.ShipmentReportMethods.GetPendingInspectionRequests(fromDate, toDate, PageNum, PageSize, AuthBase.ClientId, ChasisNo);
            ViewData["MissingChassis"] = EnumerableExtension.ToList<MissingChassis>(dt.Tables[3]);
            try
            {
                int totalVendors = dt.Tables[0].Rows.Count;
                List<ShippingYard> lstVendorShipment = new List<ShippingYard>();
                for (int i = 0; i < totalVendors; i++)
                {
                    string ShippingYardId = dt.Tables[0].Rows[i]["ShippingYardId"].ToString();
                    string filterexpr = "ShippingYardId = " + ShippingYardId + "";
                    ShippingYard vendor = new ShippingYard();
                    vendor.shipyardId = dt.Tables[0].Rows[i]["ShippingYardId"].ToString();
                    vendor.shipyard = dt.Tables[0].Rows[i]["ShippingYard"].ToString();
                    if (ChasisNo != null)
                    {
                        i = totalVendors;
                        filterexpr = "";
                        vendor.shipyardId = "-1";
                        vendor.shipyard = "Searched Results";
                        vendor.MissingChassis = EnumerableExtension.ToList<MissingChassis>(dt.Tables[3]);
                    }
                    DataRow[] CurrentVendorRow = dt.Tables[1].Select(filterexpr);
                    vendor.shipyardDetail = new List<ShippmentDetail>();
                    for (int k = 0; k < CurrentVendorRow.Length; k++)
                    {
                        ShippmentDetail vndDetail = new ShippmentDetail();
                        vndDetail.sno = k;
                        vndDetail.Country = CurrentVendorRow[k]["Country"].ToString();
                        vndDetail.ChasisID = CurrentVendorRow[k]["ChassisNumber"].ToString();
                        vndDetail.Make = CurrentVendorRow[k]["Make"].ToString();
                        vndDetail.Model = CurrentVendorRow[k]["Model"].ToString();
                        vndDetail.Year = CurrentVendorRow[k]["ModelYear"].ToString();
                        vndDetail.Port = CurrentVendorRow[k]["Port"].ToString();
                        vndDetail.ShippingYard = CurrentVendorRow[k]["ShippingYard"].ToString();
                        vndDetail.ShipmentType = CurrentVendorRow[k]["ShipmentType"].ToString();
                        vndDetail.customerProductInvoiceNumber = CurrentVendorRow[k]["customerProductInvoiceNumber"].ToString();
                        vndDetail.CustomerProductInvoiceId = CurrentVendorRow[k]["CustomerProductInvoiceId"].ToString();
                        vndDetail.InspectionName = CurrentVendorRow[k]["InspectionName"].ToString();
                        vndDetail.InspectionCost = CurrentVendorRow[k]["InspectionCost"].ToString();
                        vndDetail.InspectionId = CurrentVendorRow[k]["InspectionId"].ToString();
                        vendor.shipyardDetail.Add(vndDetail);
                    }
                    lstVendorShipment.Add(vendor);
                }
                return lstVendorShipment;
            }
            catch (Exception)
            {
                return null;
            }
        }
        protected List<ShippingYard> GetPendingAlterations(DateTime fromDate, DateTime toDate, int PageNum, int PageSize, string ChasisNo)
        {
            ViewBag.Title = "Unit Alteration Pending";
            DataSet dt = new DataSet();
            dt = JTJapan.Core.AdminArea.ShipmentReportMethods.GetPendingAlterations(fromDate, toDate, PageNum, PageSize, AuthBase.ClientId, ChasisNo);
            ViewData["MissingChassis"] = EnumerableExtension.ToList<MissingChassis>(dt.Tables[3]);
            try
            {
                int totalVendors = dt.Tables[0].Rows.Count;
                List<ShippingYard> lstVendorShipment = new List<ShippingYard>();
                for (int i = 0; i < totalVendors; i++)
                {
                    string ShippingYardId = dt.Tables[0].Rows[i]["ShippingYardId"].ToString();
                    string filterexpr = "ShippingYardId = " + ShippingYardId + "";
                    ShippingYard shippingYard = new ShippingYard();
                    shippingYard.shipyardId = dt.Tables[0].Rows[i]["ShippingYardId"].ToString();
                    shippingYard.shipyard = dt.Tables[0].Rows[i]["ShippingYard"].ToString();
                    if (ChasisNo != null)
                    {
                        i = totalVendors;
                        filterexpr = "";
                        shippingYard.shipyardId = "-1";
                        shippingYard.shipyard = "Searched Results";
                        shippingYard.MissingChassis = EnumerableExtension.ToList<MissingChassis>(dt.Tables[3]);
                    }
                    DataRow[] CurrentVendorRow = dt.Tables[1].Select(filterexpr);
                    shippingYard.alterationDetail = new List<AlterationDetail>();
                    for (int k = 0; k < CurrentVendorRow.Length; k++)
                    {
                        AlterationDetail alterationDetail = new AlterationDetail();
                        alterationDetail.sno = k;
                        alterationDetail.Country = CurrentVendorRow[k]["Country"].ToString();
                        alterationDetail.ChasisID = CurrentVendorRow[k]["ChassisNumber"].ToString();
                        alterationDetail.Make = CurrentVendorRow[k]["Make"].ToString();
                        alterationDetail.Model = CurrentVendorRow[k]["Model"].ToString();
                        alterationDetail.Year = CurrentVendorRow[k]["ModelYear"].ToString();
                        alterationDetail.Port = CurrentVendorRow[k]["Port"].ToString();
                        alterationDetail.ShippingYard = CurrentVendorRow[k]["ShippingYard"].ToString();
                        alterationDetail.ShipmentType = CurrentVendorRow[k]["ShipmentType"].ToString();
                        alterationDetail.customerProductInvoiceNumber = CurrentVendorRow[k]["customerProductInvoiceNumber"].ToString();
                        alterationDetail.CustomerProductInvoiceId = CurrentVendorRow[k]["CustomerProductInvoiceId"].ToString();
                        alterationDetail.Alteration = CurrentVendorRow[k]["Alteration"].ToString();
                        alterationDetail.RequestedMeterReading = CurrentVendorRow[k]["RequestedMeterReading"].ToString();
                        alterationDetail.RequestComment = CurrentVendorRow[k]["RequestComment"].ToString();
                        alterationDetail.DateModified = CurrentVendorRow[k]["DateModified"].ToString();
                        shippingYard.alterationDetail.Add(alterationDetail);
                    }
                    lstVendorShipment.Add(shippingYard);
                }
                return lstVendorShipment;
            }
            catch (Exception)
            {
                return null;
            }
        }
        protected List<ShippingYard> GetPendingAlterationRequest(DateTime fromDate, DateTime toDate, int PageNum, int PageSize, string ChasisNo)
        {
            ViewBag.Title = "Unit Alteration Request Pending";
            ViewBag.chasis = ChasisNo;
            DataSet dt = new DataSet();
            dt = JTJapan.Core.AdminArea.ShipmentReportMethods.GetPendingAlterationRequests(fromDate, toDate, PageNum, PageSize, AuthBase.ClientId, ChasisNo);
            ViewData["MissingChassis"] = EnumerableExtension.ToList<MissingChassis>(dt.Tables[3]);
            try
            {
                int totalVendors = dt.Tables[0].Rows.Count;
                List<ShippingYard> lstVendorShipment = new List<ShippingYard>();
                for (int i = 0; i < totalVendors; i++)
                {
                    string ShippingYardId = dt.Tables[0].Rows[i]["ShippingYardId"].ToString();
                    string filterexpr = "ShippingYardId = " + ShippingYardId + "";
                    ShippingYard vendor = new ShippingYard();
                    vendor.shipyardId = dt.Tables[0].Rows[i]["ShippingYardId"].ToString();
                    vendor.shipyard = dt.Tables[0].Rows[i]["ShippingYard"].ToString();
                    if (ChasisNo != null)
                    {
                        i = totalVendors;
                        filterexpr = "";
                        vendor.shipyardId = "-1";
                        vendor.shipyard = "Searched Results";
                        vendor.MissingChassis = EnumerableExtension.ToList<MissingChassis>(dt.Tables[3]);

                    }
                    DataRow[] CurrentVendorRow = dt.Tables[1].Select(filterexpr);
                    vendor.shipyardDetail = new List<ShippmentDetail>();
                    for (int k = 0; k < CurrentVendorRow.Length; k++)
                    {
                        ShippmentDetail vndDetail = new ShippmentDetail();
                        vndDetail.sno = k;
                        vndDetail.Country = CurrentVendorRow[k]["Country"].ToString();
                        vndDetail.ChasisID = CurrentVendorRow[k]["ChassisNumber"].ToString();
                        vndDetail.Make = CurrentVendorRow[k]["Make"].ToString();
                        vndDetail.Model = CurrentVendorRow[k]["Model"].ToString();
                        vndDetail.Year = CurrentVendorRow[k]["ModelYear"].ToString();
                        vndDetail.Port = CurrentVendorRow[k]["Port"].ToString();
                        vndDetail.ShippingYard = CurrentVendorRow[k]["ShippingYard"].ToString();
                        vndDetail.ShipmentType = CurrentVendorRow[k]["ShipmentType"].ToString();
                        vndDetail.customerProductInvoiceNumber = CurrentVendorRow[k]["customerProductInvoiceNumber"].ToString();
                        vndDetail.CustomerProductInvoiceId = CurrentVendorRow[k]["CustomerProductInvoiceId"].ToString();
                        vndDetail.Alteration = CurrentVendorRow[k]["Alteration"].ToString();
                        vndDetail.RequestedMeterReading = CurrentVendorRow[k]["RequestedMeterReading"].ToString();
                        vndDetail.AlterationVendor = CurrentVendorRow[k]["AlterationVendor"].ToString();
                        vndDetail.RequestComment = CurrentVendorRow[k]["RequestComment"].ToString();
                        vndDetail.DateModified = CurrentVendorRow[k]["DateModified"].ToString();
                        vendor.shipyardDetail.Add(vndDetail);
                    }
                    lstVendorShipment.Add(vendor);
                }
                return lstVendorShipment;
            }
            catch (Exception)
            {
                return null;
            }
        }
        protected List<ShippingYard> GetInspectionsForCertificate(DateTime fromDate, DateTime toDate, int PageNum, int PageSize, string ChasisNo)
        {
            DataSet dt = new DataSet();
            dt = JTJapan.Core.AdminArea.ShipmentReportMethods.GetInspectionsForCertificate(fromDate, toDate, PageNum, PageSize, AuthBase.ClientId, ChasisNo);
            ViewData["MissingChassis"] = EnumerableExtension.ToList<MissingChassis>(dt.Tables[3]);
            try
            {
                int totalVendors = dt.Tables[0].Rows.Count;
                List<ShippingYard> lstVendorShipment = new List<ShippingYard>();
                for (int i = 0; i < totalVendors; i++)
                {
                    string ShippingYardId = dt.Tables[0].Rows[i]["ShippingYardId"].ToString();
                    string filterexpr = "ShippingYardId = " + ShippingYardId + "";
                    ShippingYard vendor = new ShippingYard();
                    vendor.shipyardId = dt.Tables[0].Rows[i]["ShippingYardId"].ToString();
                    vendor.shipyard = dt.Tables[0].Rows[i]["ShippingYard"].ToString();
                    if (ChasisNo != null)
                    {
                        i = totalVendors;
                        filterexpr = "";
                        vendor.shipyardId = "-1";
                        vendor.shipyard = "Searched Results";

                        vendor.MissingChassis = EnumerableExtension.ToList<MissingChassis>(dt.Tables[3]);

                    }
                    DataRow[] CurrentVendorRow = dt.Tables[1].Select(filterexpr);
                    vendor.shipyardDetail = new List<ShippmentDetail>();
                    for (int k = 0; k < CurrentVendorRow.Length; k++)
                    {
                        ShippmentDetail vndDetail = new ShippmentDetail();
                        vndDetail.sno = k;
                        vndDetail.Country = CurrentVendorRow[k]["Country"].ToString();
                        vndDetail.ChasisID = CurrentVendorRow[k]["ChassisNumber"].ToString();
                        vndDetail.Make = CurrentVendorRow[k]["Make"].ToString();
                        vndDetail.Model = CurrentVendorRow[k]["Model"].ToString();
                        vndDetail.Year = CurrentVendorRow[k]["ModelYear"].ToString();
                        vndDetail.Port = CurrentVendorRow[k]["Port"].ToString();
                        vndDetail.ShippingYard = CurrentVendorRow[k]["ShippingYard"].ToString();
                        vndDetail.ShipmentType = CurrentVendorRow[k]["ShipmentType"].ToString();
                        vndDetail.customerProductInvoiceNumber = CurrentVendorRow[k]["customerProductInvoiceNumber"].ToString();
                        vndDetail.CustomerProductInvoiceId = CurrentVendorRow[k]["CustomerProductInvoiceId"].ToString();
                        vndDetail.InspectionName = CurrentVendorRow[k]["InspectionName"].ToString();
                        vndDetail.InspectionCost = CurrentVendorRow[k]["InspectionCost"].ToString();
                        vndDetail.InpspectionDate = CurrentVendorRow[k]["InpspectionDate"].ToString();
                        vendor.shipyardDetail.Add(vndDetail);
                    }
                    lstVendorShipment.Add(vendor);
                }
                return lstVendorShipment;
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion
        
        #region UnitPicturesPending

        public ActionResult UnitPicturesPending()
        {
            return View();
        }
        public ActionResult _UnitPicturesPendingDetail(int PageCount, int PageSize, int? VendorId, string ChasisNo)
        {
            UnitPicturesPendingModel objUnitPicturesPendingModel = new UnitPicturesPendingModel();

            DataSet dataSet = ShipmentReportMethods.GetUnitPicturesPending(PageCount, PageSize, VendorId, ChasisNo);

            if ((dataSet != null && dataSet.Tables[0] != null && dataSet.Tables[0].Rows.Count > 0 && dataSet.Tables[1] != null) || (dataSet.Tables.Count > 3 && dataSet.Tables[3].Rows.Count > 0))
            {
                objUnitPicturesPendingModel.UnitPicturesPendingCountVendorWise = EnumerableExtension.ToList<UnitPicturesPendingCountVendorWise>(dataSet.Tables[0]);
                objUnitPicturesPendingModel.UnitPicturesPendingList = EnumerableExtension.ToList<UnitPicturesPending>(dataSet.Tables[1]);
                objUnitPicturesPendingModel.TotalResults = Convert.ToInt32(dataSet.Tables[2].Rows[0]["TotalResult"]);
                objUnitPicturesPendingModel.CurrentPage = PageCount;
                objUnitPicturesPendingModel.PageSize = PageSize;
                objUnitPicturesPendingModel.VendorId = VendorId;
                if (dataSet.Tables.Count > 3 && dataSet.Tables[3].Rows.Count > 0)
                {
                    objUnitPicturesPendingModel.MissingChassisNoList = EnumerableExtension.ToList<MissingChassisNo>(dataSet.Tables[3]);
                }
            }
            else
            {
                return Content("");
            }

            return PartialView(objUnitPicturesPendingModel);
        }
        [HttpPost]
        public JsonResult UploadUnitPictures(string requestModel)
        {
            var documentModel = JsonConvert.DeserializeObject<UploadDocumentRequestModel>(requestModel);
            for (int j = 0; j < documentModel.ListOfDocument.Count; j++)
            {
                if (documentModel.ListOfDocument[j].StatusId == 2)
                {
                    DocumentMethod.DeleteProductDocuments(documentModel.ListOfDocument[j].CustomerProductInvoiceId, (int)Constants.DocumentType.UnitPictures);
                }
            }
            var responseMOdel = Utilities.UploadFile(documentModel, (int)Constants.DocumentType.UnitPictures, Request.Files);

            for (int i = 0; i < documentModel.ListOfDocument.Count; i++)
            {
                if (documentModel.ListOfDocument[i].IsAvailable == true)
                {
                    DocumentMethod.UpdateProductDocumentStatus(documentModel.ListOfDocument[i].CustomerProductInvoiceId, (int)Constants.DocumentType.UnitPictures
                                                            , (int)Constants.OG_ProductDocumentStatus.UnitPictures_Uploaded);
                }
            }
            return Json(responseMOdel, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public ActionResult _UnitPicturesStatus()
        {
            return PartialView();
        }
        [HttpPost]
        public ActionResult _UnitPicturesStatusDetail()
        {
            UnitPicturesStatuseModel responseModel = new UnitPicturesStatuseModel();
            string chassisNumbers = Utilities.GetZipDirectoryNames(Request.Files);

            if (!string.IsNullOrEmpty(chassisNumbers))
            {
                DataTable dataTable = ShipmentReportMethods.SelectUnitPicturesStatus(chassisNumbers);
                if (dataTable != null && dataTable.Rows.Count > 0)
                {
                    responseModel.UnitPicturesStatusList = EnumerableExtension.ToList<UnitPicturesStatus>(dataTable);
                }

                foreach (var item in responseModel.UnitPicturesStatusList)
                {
                    if (item.StatusId == 1)
                    {
                        item.Comments = "Document can be uploaded";
                    }

                    else if (item.StatusId == 2)
                    {
                        item.Comments = "Document already uploaded";
                    }

                    else
                    {
                        item.Comments = "Chassis number not found";
                    }
                }
                responseModel.IsValid = true;
            }

            else
            {
                responseModel.Message = "No folders found";
            }

            return PartialView("_UnitPicturesStatusDetail", responseModel);
        }
        #endregion

        #region AuctionHousePicturesPending
        public ActionResult AuctionHousePicturesPending()
        {
            return View();
        }
        public ActionResult _AuctionHousePicturesPending(int PageCount, int PageSize, int? AuctionHouseId, string ChasisNo)
        {
            AuctionHousePicturesPendingModel objAuctionHousePicturesPendingModel = new AuctionHousePicturesPendingModel();
            DataSet dataSet = ShipmentReportMethods.GetAuctionHousePicturesPending(PageCount, PageSize, AuctionHouseId, ChasisNo);

            if ((dataSet != null && dataSet.Tables[0] != null && dataSet.Tables[0].Rows.Count > 0 && dataSet.Tables[1] != null) || (dataSet.Tables.Count > 3 && dataSet.Tables[3].Rows.Count > 0))
            {
                objAuctionHousePicturesPendingModel.AuctionHousePicturesPendingCount = EnumerableExtension.ToList<AuctionHousePicturesPendingCount>(dataSet.Tables[0]);
                objAuctionHousePicturesPendingModel.AuctionHousePicturesPendingList = EnumerableExtension.ToList<AuctionHousePicturesPending>(dataSet.Tables[1]);
                objAuctionHousePicturesPendingModel.TotalResults = Convert.ToInt32(dataSet.Tables[2].Rows[0]["TotalResult"]);
                objAuctionHousePicturesPendingModel.CurrentPage = PageCount;
                objAuctionHousePicturesPendingModel.PageSize = PageSize;
                objAuctionHousePicturesPendingModel.AuctionHouseId = AuctionHouseId;
                if (dataSet.Tables.Count > 3 && dataSet.Tables[3].Rows.Count > 0)
                {
                    objAuctionHousePicturesPendingModel.MissingChassisNoList = EnumerableExtension.ToList<MissingChassisNo>(dataSet.Tables[3]);
                }
            }
            else
            {
                return Content("");
            }

            return PartialView(objAuctionHousePicturesPendingModel);
        }
        [HttpGet]
        public ActionResult _AuctionHousePicturesStatus()
        {
            return PartialView();
        }
        public ActionResult _AuctionHousePicturesStatusDetail()
        {
            AuctionHouseStatuseModel responseModel = new AuctionHouseStatuseModel();
            string chassisNumbers = Utilities.GetZipDirectoryNames(Request.Files);

            if (!string.IsNullOrEmpty(chassisNumbers))
            {
                DataTable dataTable = ShipmentReportMethods.GetAuctionHousePicturesStatus(chassisNumbers);
                if (dataTable != null && dataTable.Rows.Count > 0)
                {
                    responseModel.AuctionHousePicturesStatusList = EnumerableExtension.ToList<AuctionHousePicturesStatus>(dataTable);
                }

                foreach (var item in responseModel.AuctionHousePicturesStatusList)
                {
                    if (item.StatusId == 1)
                    {
                        item.Comments = "Document can be uploaded";
                    }

                    else if (item.StatusId == 2)
                    {
                        item.Comments = "Document already uploaded";
                    }

                    else
                    {
                        item.Comments = "Chassis number not found";
                    }
                }
                responseModel.IsValid = true;
            }

            else
            {
                responseModel.Message = "No folders found";
            }

            return PartialView("_AuctionHousePicturesStatusDetail", responseModel);
        }
        [HttpPost]
        public JsonResult UploadAuctionHousePictures(string requestModel)
        {
            var documentModel = JsonConvert.DeserializeObject<UploadDocumentRequestModel>(requestModel);
            for (int j = 0; j < documentModel.ListOfDocument.Count; j++)
            {
                if (documentModel.ListOfDocument[j].StatusId == 2)
                {
                    DocumentMethod.DeleteProductDocumentByPurchaseId(documentModel.ListOfDocument[j].PurchaseId, (int)Constants.DocumentType.AuctionHousePictures);
                }
            }
            var responseMOdel = Utilities.UploadFile(documentModel, (int)Constants.DocumentType.AuctionHousePictures, Request.Files);

            for (int i = 0; i < documentModel.ListOfDocument.Count; i++)
            {
                if (documentModel.ListOfDocument[i].IsAvailable == true)
                {
                    DocumentMethod.UpdateProductDocumentStatusByPurchaseId(documentModel.ListOfDocument[i].PurchaseId, (int)Constants.DocumentType.AuctionHousePictures
                                                            , (int)Constants.OG_ProductDocumentStatus.AuctionHousePicturesUploaded);
                }
            }
            return Json(responseMOdel, JsonRequestBehavior.AllowGet);
        }
        #endregion


        #region DocumentUpload

        [HttpGet]
        public ActionResult ShipmentOrderDocumentReceive()
        {

            return View();
        
        }


        
        
        #endregion


        #region Export Declaration and Shipment Order Pending 
        public ActionResult ExportDeclarationPending()
        {

            return View();
        
        }


        public ActionResult _DeclarationOrderPending(int PageCount, int PageSize, int? ShippingVendorId, string ChasisNo, int DocumentStatusId = (int)Constants.OG_ProductDocumentStatus.ExportDeclarationPending)
        {
            OrderPendingModel objDeclarationOrderPending = new OrderPendingModel();

            //ChasisNo = string.IsNullOrEmpty(ChasisNo) ? ChasisNo : ChasisNo.Trim().Replace(' ', ',');

            DataSet dataSet = ShipmentReportMethods.GetExportDeclarationPending(PageCount, PageSize, ShippingVendorId, ChasisNo, DocumentStatusId);

            if ((dataSet != null && dataSet.Tables[0] != null && dataSet.Tables[0].Rows.Count > 0 && dataSet.Tables[1] != null) || (dataSet.Tables.Count > 3 && dataSet.Tables[3].Rows.Count > 0))
            {
                objDeclarationOrderPending.BLPendingCountVendorWise = EnumerableExtension.ToList<OrderPendingCountVendorWise>(dataSet.Tables[0]);
                objDeclarationOrderPending.BLPendingList = EnumerableExtension.ToList<OrderPending>(dataSet.Tables[1]);
                objDeclarationOrderPending.TotalResults = Convert.ToInt32(dataSet.Tables[2].Rows[0]["TotalResult"]);
                objDeclarationOrderPending.CurrentPage = PageCount;
                objDeclarationOrderPending.PageSize = PageSize;
                objDeclarationOrderPending.ShippingVendorId = ShippingVendorId;
                objDeclarationOrderPending.DocumentStatusId = DocumentStatusId;
                if (dataSet.Tables.Count > 3 && dataSet.Tables[3].Rows.Count > 0)
                {
                    objDeclarationOrderPending.MissingChassisNoList = EnumerableExtension.ToList<MissingChassisNo>(dataSet.Tables[3]);
                }
            }
            else
            {
                return Content("");
            }

            return PartialView(objDeclarationOrderPending);
        }


        [HttpGet]
        public ActionResult _DeclarationStatus()
        {
            return PartialView();
        }

        [HttpPost]
        public ActionResult _DeclarationStatusDetail()
        {
            ExportDeclarationModel responseModel = new ExportDeclarationModel();
            string chassisNumbers = Utilities.GetZipDirectoryNames(Request.Files);

            if (!string.IsNullOrEmpty(chassisNumbers))
            {
                DataTable dataTable = ShipmentReportMethods.SelectExportDeclarationStatus(chassisNumbers);
                if (dataTable != null && dataTable.Rows.Count > 0)
                {
                    responseModel.ExportDeclarationList = EnumerableExtension.ToList<ExportDeclaration>(dataTable);
                }

                foreach (var item in responseModel.ExportDeclarationList)
                {
                    if (item.StatusId == 1)
                    {
                        item.Comments = "Document can be uploaded";
                    }

                    else if (item.StatusId == 2)
                    {
                        item.Comments = "Document already uploaded";
                    }

                    else
                    {
                        item.Comments = "Chassis number not found";
                    }
                }
                responseModel.IsValid = true;
            }

            else
            {
                responseModel.Message = "No folders found";
            }

            return PartialView("_DeclarationStatusDetail", responseModel);
        }

        [HttpPost]
        public JsonResult UploadExportDeclaration(string requestModel)
        {
            var documentModel = JsonConvert.DeserializeObject<UploadDocumentRequestModel>(requestModel);
            for (int j = 0; j < documentModel.ListOfDocument.Count; j++)
            {
                if (documentModel.ListOfDocument[j].StatusId == 2)
                {
                    DocumentMethod.DeleteProductDocuments(documentModel.ListOfDocument[j].CustomerProductInvoiceId, (int)Constants.DocumentType.ExportLetter);
                }
            }
            var responseMOdel = Utilities.UploadFile(documentModel, (int)Constants.DocumentType.ExportLetter, Request.Files);

            for (int i = 0; i < documentModel.ListOfDocument.Count; i++)
            {
                if (documentModel.ListOfDocument[i].IsAvailable == true)
                {
                    DocumentMethod.UpdateProductDocumentStatus(documentModel.ListOfDocument[i].CustomerProductInvoiceId, (int)Constants.DocumentType.ExportLetter
                                                            , Constants.OG_ProductDocumentStatus.ExportDeclarationUploaded.GetHashCode());
                }
            }
            return Json(responseMOdel, JsonRequestBehavior.AllowGet);
        }

        #endregion


        #region Shipping Order Uploaded

        public ActionResult ShippingOrderPending()
        {
            return View();
        }
        public ActionResult _ShippingOrderPending(int PageCount, int PageSize, int? ShippingVendorId, string ChasisNo, int DocumentStatusId = (int)Constants.OG_ProductDocumentStatus.ShippingOrderPending)
        {
            OrderPendingModel objShipmentOrderPending = new OrderPendingModel();

            //ChasisNo = string.IsNullOrEmpty(ChasisNo) ? ChasisNo : ChasisNo.Trim().Replace(' ', ',');

            DataSet dataSet = ShipmentReportMethods.GetShippingOrderPending(PageCount, PageSize, ShippingVendorId, ChasisNo, DocumentStatusId);

            if ((dataSet != null && dataSet.Tables[0] != null && dataSet.Tables[0].Rows.Count > 0 && dataSet.Tables[1] != null) || (dataSet.Tables.Count > 3 && dataSet.Tables[3].Rows.Count > 0))
            {
                objShipmentOrderPending.BLPendingCountVendorWise = EnumerableExtension.ToList<OrderPendingCountVendorWise>(dataSet.Tables[0]);
                objShipmentOrderPending.BLPendingList = EnumerableExtension.ToList<OrderPending>(dataSet.Tables[1]);
                objShipmentOrderPending.TotalResults = Convert.ToInt32(dataSet.Tables[2].Rows[0]["TotalResult"]);
                objShipmentOrderPending.CurrentPage = PageCount;
                objShipmentOrderPending.PageSize = PageSize;
                objShipmentOrderPending.ShippingVendorId = ShippingVendorId;
                objShipmentOrderPending.DocumentStatusId = DocumentStatusId;
                if (dataSet.Tables.Count > 3 && dataSet.Tables[3].Rows.Count > 0)
                {
                    objShipmentOrderPending.MissingChassisNoList = EnumerableExtension.ToList<MissingChassisNo>(dataSet.Tables[3]);
                }
            }
            else
            {
                return Content("");
            }

            return PartialView(objShipmentOrderPending);
        }
        [HttpGet]
        public ActionResult _ShippingOrderStatus()
        {
            return PartialView();
        }

        [HttpPost]
        public ActionResult _ShippingOrderStatusDetail()
        {
            ExportDeclarationModel responseModel = new ExportDeclarationModel();
            string chassisNumbers = Utilities.GetZipDirectoryNames(Request.Files);

            if (!string.IsNullOrEmpty(chassisNumbers))
            {
                DataTable dataTable = ShipmentReportMethods.SelectShippingOrderStatus(chassisNumbers);
                if (dataTable != null && dataTable.Rows.Count > 0)
                {
                    responseModel.ExportDeclarationList = EnumerableExtension.ToList<ExportDeclaration>(dataTable);
                }

                foreach (var item in responseModel.ExportDeclarationList)
                {
                    if (item.StatusId == 1)
                    {
                        item.Comments = "Document can be uploaded";
                    }

                    else if (item.StatusId == 2)
                    {
                        item.Comments = "Document already uploaded";
                    }

                    else
                    {
                        item.Comments = "Chassis number not found";
                    }
                }
                responseModel.IsValid = true;
            }

            else
            {
                responseModel.Message = "No folders found";
            }

            return PartialView("_DeclarationStatusDetail", responseModel);
        }

        [HttpPost]
        public JsonResult UploadShippingOrder(string requestModel)
        {
            var documentModel = JsonConvert.DeserializeObject<UploadDocumentRequestModel>(requestModel);
            for (int j = 0; j < documentModel.ListOfDocument.Count; j++)
            {
                if (documentModel.ListOfDocument[j].StatusId == 2)
                {
                    DocumentMethod.DeleteProductDocuments(documentModel.ListOfDocument[j].CustomerProductInvoiceId, (int)Constants.DocumentType.ShipmentInvoice);
                }
            }
            var responseMOdel = Utilities.UploadFile(documentModel, (int)Constants.DocumentType.ShipmentInvoice, Request.Files);

            for (int i = 0; i < documentModel.ListOfDocument.Count; i++)
            {
                if (documentModel.ListOfDocument[i].IsAvailable == true)
                {
                    DocumentMethod.UpdateProductDocumentStatus(documentModel.ListOfDocument[i].CustomerProductInvoiceId, (int)Constants.DocumentType.ShipmentInvoice
                                                            , Constants.OG_ProductDocumentStatus.ShippingOrderUploaded.GetHashCode());
                }
            }
            return Json(responseMOdel, JsonRequestBehavior.AllowGet);
        }


        #endregion



    }
}

+ ShippingController.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Data;
using JTJapan.Core.AdminArea.ViewModel;
using JTJapan.Core.AdminArea;
using JTJapan.Core;
using Newtonsoft.Json;
using JTJapan.Core.Helper;
using Ionic.Zip;
using System.IO;
using OfficeOpenXml;
using System.Configuration;
using System.Text.RegularExpressions;
using Novacode;
using Automobile.Admin.Models;
namespace Automobile.Admin.Controllers
{
    public class ShippingController : BaseController
    {
        const string table_pattern = "<table class=main>(.*?)</table>";
        const string tr_pattern = "<tr.*?>(.*?)</tr>";
        const string td_pattern = "<td.*?>(.*?)</td>";
        string VD = ConfigurationManager.AppSettings["DocPath"];
        string SubPath = ConfigurationManager.AppSettings["SubPath"].ToString();

        #region Shipping Schedule

        private List<SelectListItem> GetPortList()
        {
            List<SelectListItem> OG_PortList = new List<SelectListItem>();
            OG_PortList = UsersMethods.GetPortList().Select(i => new SelectListItem()
            {
                Value = i.Id.ToString(),
                Text = i.Title
            }).ToList();
            OG_PortList.Insert(0, new SelectListItem() { Value = "0", Text = "Select Port" });
            return OG_PortList;
        }

        public ActionResult Index()
        {
            ViewBag.Port = GetPortList();
            ViewBag.Vessel = ShippingMethod.OG_Vessel();
            return View();
        }

        [HttpGet]
        public JsonResult GetShippingSchedule(int month, int year, int vesselId)
        {
            ShippoingSchedulingResponseModel responseModel = new ShippoingSchedulingResponseModel();
            DataTable dt = ShippingMethod.SelectShippingSchedule(month, year, vesselId);

            if (dt != null && dt.Rows.Count > 0)
            {
                responseModel.SchedulingList = EnumerableExtension.ToList<ShippingViewModel>(dt);
                responseModel.IsValid = true;
            }
            return Json(responseModel, JsonRequestBehavior.AllowGet);

        }

        [HttpPost]
        public JsonResult AddOrUpdateShippingShcedule(ShippingViewModel values)
        {
            ShippingViewModel responsemodel = new ShippingViewModel();
            DataTable dt = ShippingMethod.InsertOrUpdateShippingSchedule(values.VesselId, values.Date, values.PortId);

            if (dt != null && dt.Rows.Count > 0)
            {
                responsemodel.IsValid = true;
                responsemodel.ShippingScheduleId = Convert.ToInt32(dt.Rows[0]["ShippingScheduleId"]);
            }

            return Json(responsemodel, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult DeleteShippingSchedule([System.Web.Http.FromBody]int shippingScheduleId)
        {
            BaseModel baseModel = new BaseModel();
            ShippingMethod.DeleteShippingSchedule(shippingScheduleId);

            baseModel.IsValid = true;
            return Json(baseModel, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region BLPending
        public ActionResult BLPending()
        {
            return View();
        }
        public ActionResult _BLPending(int PageCount, int PageSize, int? ShippingVendorId, string ChasisNo, int DocumentStatusId = (int)Constants.OG_ProductDocumentStatus.BLPending)
        {
            BLPendingModel objBLPendingModel = new BLPendingModel();

            //ChasisNo = string.IsNullOrEmpty(ChasisNo) ? ChasisNo : ChasisNo.Trim().Replace(' ', ',');

            DataSet dataSet = ShippingMethod.GetBLPending(PageCount, PageSize, ShippingVendorId, ChasisNo, DocumentStatusId);

            if (dataSet != null)
            {
                objBLPendingModel.BLPendingCountVendorWise = EnumerableExtension.ToList<BLPendingCountVendorWise>(dataSet.Tables[0]);
                objBLPendingModel.BLPendingList = EnumerableExtension.ToList<BLPending>(dataSet.Tables[1]);
                objBLPendingModel.TotalResults = Convert.ToInt32(dataSet.Tables[2].Rows[0]["TotalResult"]);
                objBLPendingModel.CurrentPage = PageCount;
                objBLPendingModel.PageSize = PageSize;
                objBLPendingModel.ShippingVendorId = ShippingVendorId;
                objBLPendingModel.DocumentStatusId = DocumentStatusId;
                if (dataSet.Tables.Count > 3 && dataSet.Tables[3].Rows.Count > 0)
                {
                    objBLPendingModel.MissingChassisNoList = EnumerableExtension.ToList<MissingChassisNo>(dataSet.Tables[3]);
                }
            }
            else
            {
                return Content("");
            }

            return PartialView(objBLPendingModel);
        }

        [HttpPost]
        public JsonResult UploadBLPictures(string requestModel)
        {
            var documentModel = JsonConvert.DeserializeObject<UploadDocumentRequestModel>(requestModel);
            for (int j = 0; j < documentModel.ListOfDocument.Count; j++)
            {
                if (documentModel.ListOfDocument[j].StatusId == 2)
                {
                    DocumentMethod.DeleteProductDocuments(documentModel.ListOfDocument[j].CustomerProductInvoiceId, (int)Constants.DocumentType.BL);
                }
            }
            var responseMOdel = Utilities.UploadFile(documentModel, (int)Constants.DocumentType.BL, Request.Files);

            for (int i = 0; i < documentModel.ListOfDocument.Count; i++)
            {
                if (documentModel.ListOfDocument[i].IsAvailable == true)
                {
                    DocumentMethod.UpdateProductDocumentStatus(documentModel.ListOfDocument[i].CustomerProductInvoiceId, (int)Constants.DocumentType.BL
                                                            , (int)Constants.OG_ProductDocumentStatus.BLUploadedPaymentPending);
                }
            }
            return Json(responseMOdel, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public ActionResult _BLStatus()
        {
            return PartialView();
        }
        [HttpPost]
        public ActionResult _BLStatusDetail()
        {
            BLStatuseModel responseModel = new BLStatuseModel();
            string chassisNumbers = Utilities.GetZipDirectoryNames(Request.Files);

            if (!string.IsNullOrEmpty(chassisNumbers))
            {
                DataTable dataTable = ShippingMethod.SelectBLStatus(chassisNumbers);
                if (dataTable != null && dataTable.Rows.Count > 0)
                {
                    responseModel.BLStatusList = EnumerableExtension.ToList<BLStatus>(dataTable);
                }

                foreach (var item in responseModel.BLStatusList)
                {
                    if (item.StatusId == 1)
                    {
                        item.Comments = "Document can be uploaded";
                    }

                    else if (item.StatusId == 2)
                    {
                        item.Comments = "Document already uploaded";
                    }

                    else
                    {
                        item.Comments = "Chassis number not found";
                    }
                }
                responseModel.IsValid = true;
            }

            else
            {
                responseModel.Message = "No folders found";
            }

            return PartialView("_BLStatusDetail", responseModel);
        }
        [HttpPost]
        [ValidateInput(false)]
        public string UpdateBLNumber(BLNumberData[] BLNumberData)
        {

            string msg = "";
            if (BLNumberData != null)
            {
                try
                {
                    foreach (BLNumberData items in BLNumberData)
                    {

                        ShippingMethod.UpdateBLNumber(Convert.ToInt32(items.PID), items.BLNo);
                    }
                    msg = "success";
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                }
            }
            return msg;
        }
        #endregion

        #region BLPaymentPending
        public ActionResult BLPaymentPending()
        {
            return View();
        }
        public ActionResult _BLPaymentPending(int PageCount, int PageSize, int? ShippingVendorId, string ChasisNo)
        {
            BLPaymentPendingModel objBLPaymentPendingModel = new BLPaymentPendingModel();

            DataSet dataSet = ShippingMethod.GetBLPaymentPending(PageCount, PageSize, ShippingVendorId, ChasisNo);

            if (dataSet != null && dataSet.Tables[0] != null && dataSet.Tables[0].Rows.Count > 0 && dataSet.Tables[1] != null)
            {
                objBLPaymentPendingModel.BLPaymentPendingCountVendorWise = EnumerableExtension.ToList<BLPaymentPendingCountVendorWise>(dataSet.Tables[0]);
                objBLPaymentPendingModel.BLPaymentPendingList = EnumerableExtension.ToList<BLPaymentPending>(dataSet.Tables[1]);
                objBLPaymentPendingModel.TotalResults = Convert.ToInt32(dataSet.Tables[2].Rows[0]["TotalResult"]);
                objBLPaymentPendingModel.CurrentPage = PageCount;
                objBLPaymentPendingModel.PageSize = PageSize;
                objBLPaymentPendingModel.ShippingVendorId = ShippingVendorId;
                if (dataSet.Tables.Count > 3 && dataSet.Tables[3].Rows.Count > 0)
                {
                    objBLPaymentPendingModel.MissingChassisNoList = EnumerableExtension.ToList<MissingChassisNo>(dataSet.Tables[3]);
                }
            }
            else
            {
                objBLPaymentPendingModel.BLPaymentPendingCountVendorWise = EnumerableExtension.ToList<BLPaymentPendingCountVendorWise>(dataSet.Tables[0]);
                objBLPaymentPendingModel.BLPaymentPendingList = EnumerableExtension.ToList<BLPaymentPending>(dataSet.Tables[1]);
                objBLPaymentPendingModel.TotalResults = Convert.ToInt32(dataSet.Tables[2].Rows[0]["TotalResult"]);
                objBLPaymentPendingModel.CurrentPage = PageCount;
                objBLPaymentPendingModel.PageSize = PageSize;
                objBLPaymentPendingModel.ShippingVendorId = ShippingVendorId;
                return PartialView(objBLPaymentPendingModel);
            }

            return PartialView(objBLPaymentPendingModel);
        }


        [HttpPost]
        public string UpdateBLPaymentDone(ExportPaymentDoneModel objects)
        {
            string msg = "";
            if (objects != null)
            {
                try
                {
                    foreach (var obj in objects.UpdateListOfPaymentDoneModel)
                    {
                        if (obj.pid != 0)
                        {
                            DocumentMethod.UpdateProductDocumentStatusByPurchaseId(Convert.ToInt32(obj.pid), Constants.DocumentType.BL.GetHashCode(), Constants.OG_ProductDocumentStatus.BLPaymentDoneRequestEmailPending.GetHashCode());
                            ShippingMethod.UpdateFreightCharges(Convert.ToInt32(obj.pid), Convert.ToDecimal(obj.cost));
                        }
                    }
                    msg = "success";
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                }
            }
            else
            {
                msg = "Please select at least one record";
            }
            return msg;
        }
        #endregion


        #region BLRequestEmail
        public ActionResult BLRequestEmail()
        {
            return View();
        }

        public ActionResult _BLRequestEmail(int PageCount, int PageSize, int? ShippingVendorId, string ChasisNo)
        {
            BLRequestEmailModel objBLRequestEmailModel = new BLRequestEmailModel();

            DataSet dataSet = ShippingMethod.GetPaymentDoneRecords(PageCount, PageSize, ShippingVendorId, ChasisNo);

            if (dataSet != null && dataSet.Tables[0] != null && dataSet.Tables[0].Rows.Count > 0 && dataSet.Tables[1] != null)
            {
                objBLRequestEmailModel.BLRequestEmailCountVendorWise = EnumerableExtension.ToList<BLRequestEmailCountVendorWise>(dataSet.Tables[0]);
                objBLRequestEmailModel.BLRequestEmailList = EnumerableExtension.ToList<BLRequestEmail>(dataSet.Tables[1]);
                objBLRequestEmailModel.TotalResults = Convert.ToInt32(dataSet.Tables[2].Rows[0]["TotalResult"]);
                objBLRequestEmailModel.CurrentPage = PageCount;
                objBLRequestEmailModel.PageSize = PageSize;
                objBLRequestEmailModel.ShippingVendorId = ShippingVendorId;
                if (dataSet.Tables.Count > 3 && dataSet.Tables[3].Rows.Count > 0)
                {
                    objBLRequestEmailModel.MissingChassisNoList = EnumerableExtension.ToList<MissingChassisNo>(dataSet.Tables[3]);
                }
            }
            else
            {
                objBLRequestEmailModel.BLRequestEmailCountVendorWise = EnumerableExtension.ToList<BLRequestEmailCountVendorWise>(dataSet.Tables[0]);
                objBLRequestEmailModel.BLRequestEmailList = EnumerableExtension.ToList<BLRequestEmail>(dataSet.Tables[1]);
                objBLRequestEmailModel.TotalResults = Convert.ToInt32(dataSet.Tables[2].Rows[0]["TotalResult"]);
                objBLRequestEmailModel.CurrentPage = PageCount;
                objBLRequestEmailModel.PageSize = PageSize;
                objBLRequestEmailModel.ShippingVendorId = ShippingVendorId;
                return PartialView(objBLRequestEmailModel);
            }

            return PartialView(objBLRequestEmailModel);
        }

        [HttpGet]
        public ActionResult _SendEmailPreview(string CustomerProductInvoiceId)
        {
            try
            {
                ViewBag.CustomerProductInvoiceId = CustomerProductInvoiceId;
                List<BLEmailModel> model = new List<BLEmailModel>();
                List<BLEmailModel> response = new List<BLEmailModel>();
                string Link = "";
                SecureQueryString ObjSecureQueryString = new SecureQueryString();
                Link = ObjSecureQueryString.encrypt("id=" + CustomerProductInvoiceId + "&type=" + 3);
                model = ShippingMethod.GetEmailForPreview(Convert.ToInt32(CustomerProductInvoiceId));
                BLEmailModel obj = new BLEmailModel();
                obj = model[0];
                obj.EmailBody = obj.EmailBody.Replace("[Var_ShippingContactName]", obj.ShippingContactName);
                obj.EmailBody = obj.EmailBody.Replace("[Var_Chassis]", obj.ChassisNumber);
                obj.EmailBody = obj.EmailBody.Replace("[Var_BLNo]", obj.BLNo);
                obj.EmailBody = obj.EmailBody.Replace("[Var_VesselName]", obj.Vessel);
                obj.EmailBody = obj.EmailBody.Replace("[Var_VoyageNo]", obj.VoyageNo);
                response.Add(obj);
                return PartialView(response);
            }
            catch
            {
                return null;
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public string InsertEmailTemplate(string customerproductinvoiceid, string ccemail, string fromemail, string toemail, string body, string tmpId = "0")
        {
            try
            {
                ShippingMethod.InsertEmailTemplateForBLRequest(Convert.ToInt32(customerproductinvoiceid), AuthBase.ClientId, ccemail, fromemail, toemail, int.Parse(tmpId), body);
                //DocumentMethod.UpdateProductDocumentStatus(Convert.ToInt32(customerproductinvoiceid), Constants.DocumentType.BL.GetHashCode(), Constants.OG_ProductDocumentStatus.EmailDoneReceivingPending.GetHashCode());

                return "success";
            }
            catch (Exception ex) { return "error"; }
        }

        #endregion


        #region BLReceivingPending
        public ActionResult BLReceivingPending()
        {
            return View();
        }
        public ActionResult _BLReceivingPending(int PageCount, int PageSize, int? ShippingVendorId, string ChasisNo)
        {
            BLReceivingPendingModel objBLReceivingPendingModel = new BLReceivingPendingModel();

            DataSet dataSet = ShippingMethod.GetBLEmailDoneRecords(PageCount, PageSize, ShippingVendorId, ChasisNo);

            if (dataSet != null && dataSet.Tables[0] != null && dataSet.Tables[0].Rows.Count > 0 && dataSet.Tables[1] != null)
            {
                objBLReceivingPendingModel.BLReceivingPendingCountVendorWise = EnumerableExtension.ToList<BLReceivingPendingCountVendorWise>(dataSet.Tables[0]);
                objBLReceivingPendingModel.BLReceivingPendingList = EnumerableExtension.ToList<BLReceivingPending>(dataSet.Tables[1]);
                objBLReceivingPendingModel.TotalResults = Convert.ToInt32(dataSet.Tables[2].Rows[0]["TotalResult"]);
                objBLReceivingPendingModel.CurrentPage = PageCount;
                objBLReceivingPendingModel.PageSize = PageSize;
                objBLReceivingPendingModel.ShippingVendorId = ShippingVendorId;
                if (dataSet.Tables.Count > 3 && dataSet.Tables[3].Rows.Count > 0)
                {
                    objBLReceivingPendingModel.MissingChassisNoList = EnumerableExtension.ToList<MissingChassisNo>(dataSet.Tables[3]);
                }
            }
            else
            {
                objBLReceivingPendingModel.BLReceivingPendingCountVendorWise = EnumerableExtension.ToList<BLReceivingPendingCountVendorWise>(dataSet.Tables[0]);
                objBLReceivingPendingModel.BLReceivingPendingList = EnumerableExtension.ToList<BLReceivingPending>(dataSet.Tables[1]);
                objBLReceivingPendingModel.TotalResults = Convert.ToInt32(dataSet.Tables[2].Rows[0]["TotalResult"]);
                objBLReceivingPendingModel.CurrentPage = PageCount;
                objBLReceivingPendingModel.PageSize = PageSize;
                objBLReceivingPendingModel.ShippingVendorId = ShippingVendorId;
                return PartialView(objBLReceivingPendingModel);
            }

            return PartialView(objBLReceivingPendingModel);
        }

        [HttpPost]
        public string UpdateBLReceived(ExportPaymentReceiveModel objects)
        {
            string msg = "";
            if (objects != null)
            {
                try
                {
                    foreach (var obj in objects.UpdateListOfPaymentReceiveModel)
                    {
                        if (obj.cpid != 0)
                        {
                            DocumentMethod.UpdateProductDocumentStatus(Convert.ToInt32(obj.cpid), Constants.DocumentType.BL.GetHashCode(), Constants.OG_ProductDocumentStatus.BLReceived.GetHashCode());
                        }
                    }
                    msg = "success";
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                }
            }
            else
            {
                msg = "Please select at least one record";
            }
            return msg;
        }
        #endregion

        #region Shipping Booking
        public ActionResult ShippingReport()
        {
            ViewBag.DocumentStatus = ShippingMethod.GetDocumentStatusByType(Constants.DocumentType.ShipmentOrderFile.GetHashCode());
            ViewBag.ShippingVendorList = OGMethods.ShippingVendorList();
            return View();
        }


        public ActionResult _ShippingSchedulePopup(int DeparturePortID, int ArrivalPortID, int CustomerProductInvoiceID, int CustomerProductId, int ClientId, int ShippingVendorId, int VesselVoyageId
            , string ArrivalPort, string DeparturePort, int PurchaseId, string ShippingVendor)
        {

            ViewBag.CustomerProductInvoiceID = CustomerProductInvoiceID;
            ViewBag.CustomerProductId = CustomerProductId;
            ViewBag.ClientId = ClientId;
            ViewBag.ShippingVendorId = ShippingVendorId;
            ViewBag.VesselVoyageId = VesselVoyageId;
            ViewBag.ArrivalPort = ArrivalPort;
            ViewBag.DeparturePort = DeparturePort;
            ViewBag.DeparturePortID = DeparturePortID;
            ViewBag.ArrivalPortID = ArrivalPortID;
            ViewBag.ShippingVendorList = OGMethods.ShippingVendorList();
            ViewBag.PurchaseId = PurchaseId;
            ViewBag.ShippingVendor = ShippingVendor;

            DataSet ds = new DataSet();

            ds = ShippingMethod.GetShippingSchedule(DeparturePortID, ArrivalPortID, CustomerProductInvoiceID);
            ShippingScheduleViewModel obj = new ShippingScheduleViewModel();

            ShippingScheduleResponse model = new ShippingScheduleResponse();
            model.ShippingScheduleViewModelList = EnumerableExtension.ToList<ShippingScheduleViewModel>(ds.Tables[0]);
            model.objShippingScheduleViewModel = EnumerableExtension.ToList<ShippingScheduleViewModel>(ds.Tables[1]);

            return PartialView(model);
        }
        public ActionResult _ShippingEmailPopUp(int CustomerProductInvoiceId)
        {
            DataSet ds = new DataSet();
            DataTable dt = new DataTable();

            ViewBag.CustomerProductInvoiceId = CustomerProductInvoiceId;

            List<ShippingEmailViewModel> objLst = new List<ShippingEmailViewModel>();

            ds = ShippingMethod.GetShippingEmailDetail(CustomerProductInvoiceId);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                dt = ds.Tables[0];
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    ShippingEmailViewModel obj = new ShippingEmailViewModel();

                    obj.CustomerProductInvoiceiD = Convert.ToInt32(dt.Rows[i]["CustomerProductInvoiceiD"]);
                    obj.PortId = Convert.ToInt32(dt.Rows[i]["PortId"]);
                    obj.CustomerProductId = Convert.ToInt32(dt.Rows[i]["CustomerProductId"]);
                    obj.DeparturePort = dt.Rows[i]["DeparturePort"].ToString();
                    obj.ChassisNumber = dt.Rows[i]["ChassisNumber"].ToString();
                    obj.PurchaseDate = Convert.ToDateTime(dt.Rows[i]["PurchaseDate"]).ToString("MMM dd, yyyy");
                    obj.ShipmentCountryId = Convert.ToInt32(dt.Rows[i]["ShipmentCountryId"]);
                    obj.Country = dt.Rows[i]["Country"].ToString();
                    obj.ClientId = Convert.ToInt32(dt.Rows[i]["ClientId"]);
                    obj.IsInspection = Convert.ToInt32(dt.Rows[i]["IsInspection"]);
                    obj.InspectionDetail = dt.Rows[i]["InspectionDetail"].ToString();
                    obj.ArrivalDate = Convert.ToDateTime(dt.Rows[i]["ArrivalDate"]).ToString("MMM dd, yyyy");
                    obj.DepartureDate = Convert.ToDateTime(dt.Rows[i]["DepartureDate"]).ToString("MMM dd, yyyy");
                    obj.VesselName = dt.Rows[i]["VesselName"].ToString();
                    obj.ContactName = dt.Rows[i]["ContactName"].ToString();
                    obj.EmailHeading = dt.Rows[i]["EmailHeading"].ToString();
                    obj.EmailSubject = dt.Rows[i]["EmailSubject"].ToString();
                    obj.TemplateHtml = dt.Rows[i]["TemplateHtml"].ToString();
                    obj.FromEmail = dt.Rows[i]["FromEmail"].ToString();
                    obj.ToEmail = dt.Rows[i]["ToEmail"].ToString();
                    obj.CCEmail = dt.Rows[i]["CCEmail"].ToString();
                    obj.AttachementPath = VD + dt.Rows[i]["AttachementPath"].ToString();
                    obj.DocumentTypeId = Convert.ToInt32(dt.Rows[i]["DocumentTypeId"]);
                    obj.DocumentID = Convert.ToInt32(dt.Rows[i]["DocumentID"]);
                    obj.EmailTemplateID = Convert.ToInt32(dt.Rows[i]["EmailTemplateID"]);
                    obj.File = dt.Rows[i]["AttachementPath"].ToString();
                    obj.CustomerID = Convert.ToInt32(dt.Rows[i]["CustomerID"]);
                    obj.PurchaseID = Convert.ToInt32(dt.Rows[i]["PurchaseID"]);
                    obj.SendEmailTemplateID = Convert.ToInt32(dt.Rows[i]["SendEmailTemplateID"]);

                    /*    obj.TemplateHtml = obj.TemplateHtml.Replace("[Var_ContactName]", obj.ContactName);
                    obj.TemplateHtml = obj.TemplateHtml.Replace("[Var_ChassisNo]", obj.ChassisNumber);
                    obj.TemplateHtml = obj.TemplateHtml.Replace("[Var_VesselName]", obj.VesselName);
                    obj.TemplateHtml = obj.TemplateHtml.Replace("[Var_EstimatedArrialTime]", obj.DepartureDate);
                    obj.TemplateHtml = obj.TemplateHtml.Replace("[Var_PortOfLoading]", obj.DeparturePort);

                    if (obj.IsInspection == 1)
                    {
                        obj.TemplateHtml = obj.TemplateHtml.Replace("[Var_IsInspectionRequired]", "Kindly note that this vehicle will require " + obj.InspectionDetail + " " + obj.Country);
                    }
                    else
                    {
                        obj.TemplateHtml = obj.TemplateHtml.Replace("[Var_IsInspectionRequired]", "");
                    }
    */
                    objLst.Add(obj);
                }
            }
            return PartialView(objLst);
        }
        public ActionResult _UnitShippingDetail(int PageNo, int PageSize, string ChassisNo, int DocumentStatusID, int IsShippmentApplicable, int ShippingVendorID
            , string InvoiceNumber, int IsDepartureDate, DateTime? FromDate = null, DateTime? ToDate = null)
        {
            ChassisNo = (string.IsNullOrEmpty(ChassisNo) ? null : ChassisNo);
            InvoiceNumber = (string.IsNullOrEmpty(InvoiceNumber) ? null : InvoiceNumber);

            DataSet ds = new DataSet();
            ShippingDetailResponse model = new ShippingDetailResponse();
            ds = ShippingMethod.GetUnitShippingDetail(PageSize, PageNo, ChassisNo, DocumentStatusID, IsShippmentApplicable, ShippingVendorID, InvoiceNumber, IsDepartureDate
                , FromDate, ToDate);

            if (ds.Tables.Count > 1 && ds.Tables[0].Rows.Count > 0)
            {
                model.ShippingDetailViewModelList = EnumerableExtension.ToList<ShippingDetailViewModel>(ds.Tables[0]);
                model.TotalRecord = Convert.ToInt32(ds.Tables[1].Rows[0]["TotalRecord"]);
            }

            model.PageSize = PageSize;
            model.PageNo = PageNo;

            if (ds.Tables.Count > 2 && ds.Tables[2].Rows.Count > 0)
            {
                model.MissingChassisNoList = EnumerableExtension.ToList<MissingChassisNo>(ds.Tables[2]);
            }

            return PartialView(model);
        }

        [HttpGet]
        public void ShipmentBookingToExcel(string chassisNumbers, int documentStatusId , int IsShippmentApplicable, int ShippingVendorID
            , string InvoiceNumber, int IsDepartureDate, DateTime? FromDate = null, DateTime? ToDate = null)
        {
            chassisNumbers = (string.IsNullOrEmpty(chassisNumbers) ? null : chassisNumbers);
            InvoiceNumber = (string.IsNullOrEmpty(InvoiceNumber) ? null : InvoiceNumber);

            DataSet ds = new DataSet();
            ShippingDetailResponse model = new ShippingDetailResponse();
            ds = ShippingMethod.GetUnitShippingDetail(null, null, chassisNumbers, documentStatusId, IsShippmentApplicable, ShippingVendorID, InvoiceNumber, IsDepartureDate
                , FromDate, ToDate);

            if (ds != null && ds.Tables[0] != null &&  ds.Tables[0].Rows.Count > 0)
            {
                Utilities.ExportToExcel(ds.Tables[0], "ShipmentBookingReportReport");
            }
        }



        public ActionResult _ShippingBookingPopUp(int CustomerProductInvoiceID, int CustomerProductId, int ClientId, int ShippingVendorId, int VesselVoyageId, int DeparturePortId
            , string DepartureDate, string ArrivalDate, string ArrivalPort, string InvoiceNumber, int PurchaseId, int ArrivalPortID, string DeparturePort, string ShippingVendor
            , int DocumentStatusID)
        {

            DataSet ds = new DataSet();

            ds = ShippingMethod.GetShippingSchedule(DeparturePortId, ArrivalPortID, CustomerProductInvoiceID);

            ViewBag.CustomerProductInvoiceID = CustomerProductInvoiceID;
            ViewBag.CustomerProductId = CustomerProductId;
            ViewBag.ClientId = ClientId;
            ViewBag.InvoiceNumber = InvoiceNumber;
            ViewBag.PurchaseId = PurchaseId;
            ViewBag.DocumentStatusID = DocumentStatusID;

            if (ds.Tables.Count > 1 && ds.Tables[1].Rows.Count > 0)
            {
                ViewBag.ShippingVendorId = ds.Tables[1].Rows[0]["ShippingVendorId"];
                ViewBag.VesselVoyageId = ds.Tables[1].Rows[0]["VesselVoyageID"];
                ViewBag.DeparturePortId = ds.Tables[1].Rows[0]["DeparturePortId"];
                ViewBag.DepartureDate = ds.Tables[1].Rows[0]["DepartureDate"];
                ViewBag.ArrivalDate = ds.Tables[1].Rows[0]["ArrivalDate"];
                ViewBag.ArrivalPort = ds.Tables[1].Rows[0]["ArrivalPort"];
                ViewBag.ArrivalPortId = ds.Tables[1].Rows[0]["ArrivalPortId"];
                ViewBag.DeparturePort = ds.Tables[1].Rows[0]["DeparturePort"];
                ViewBag.ShippingVendor = ds.Tables[1].Rows[0]["ShippingVendor"];
                ViewBag.VoyageNo = ds.Tables[1].Rows[0]["VoyageNo"];
                ViewBag.VesselName = ds.Tables[1].Rows[0]["VesselName"];
                ViewBag.BookingNo = ds.Tables[1].Rows[0]["BookingNo"];
                ViewBag.BookingDocumentPath =(!String.IsNullOrEmpty(ds.Tables[1].Rows[0]["BookingDocumentPath"].ToString()) 
                    ? VD + ds.Tables[1].Rows[0]["BookingDocumentPath"].ToString() : null);
            }
            ViewBag.ShippingVendorList = OGMethods.ShippingVendorList();
            ViewBag.Vessel = ShippingMethod.OG_VesselVoyage();
            ViewBag.ListPort = OGMethods.GetPortList();

            return PartialView();
        }
        public void AddShipmentDetail(int CustomerProductInvoiceId, int CustomerProductId, int ClientId, int ShippingVendorId, int? VesselVoyageID, int DeparturePortId
            , DateTime? DepartureDate, DateTime? ArrivalDate, int ArrivalPortId, int StatusID, int PurchaseID, string BookingNo)
        {

            ShippingMethod.InsertBookingDetail(CustomerProductInvoiceId, CustomerProductId, ClientId, ShippingVendorId, VesselVoyageID, DeparturePortId, DepartureDate, ArrivalDate
                , ArrivalPortId, StatusID, PurchaseID, BookingNo);
        }

        public ActionResult _ConsigneeDetail(int CustomerProductInvoiceId)
        {
            DataSet ds = new DataSet();

            ds = ShippingMethod.GetConsigneeDetail(CustomerProductInvoiceId);

            List<ConsigneeViewModel> objConsigneeVM = new List<ConsigneeViewModel>();

            objConsigneeVM = EnumerableExtension.ToList<ConsigneeViewModel>(ds.Tables[0]);

            return PartialView(objConsigneeVM);
        }

        public ActionResult _RemarksPopUp(int CustomerProductInvoiceId = 0, int CustomerProductId = 0, int StatusId = 0)
        {
            List<RemarksVM> model = new List<RemarksVM>();
            ViewBag.CustomerProductInvoiceId = CustomerProductInvoiceId;
            ViewBag.CustomerProductId = CustomerProductId;
            ViewBag.StatusId = StatusId;

            if (CustomerProductInvoiceId > 0)
            {
                model = ShipmentReportMethods.GetRemarks(CustomerProductInvoiceId);

            }
            return PartialView("_RemarksPopUp", model);
        }

        [ValidateInput(false)]
        public void InsertEmailTemplate(int ID, int ProductDocument = 0, string EmailBody = "", string FromEmail = null, string ToEmail = null, int SentEmailTemplateID = 0, int ClientId = 999, string CCEmail = null, string EmailSubject = null, int? TemplateID = null)
        {
            TransportMethods.InsertEmailTemplate(ID, ProductDocument, EmailBody, ClientId, FromEmail, ToEmail, SentEmailTemplateID, CCEmail, EmailSubject, TemplateID);
        }
        public string GetShippingInvoiceDetailForDocGeneration(int CustomerProductInvoiceId)
        {

            DataSet ds = new DataSet();
            DataTable dt = new DataTable();
            string DefaultDocPath = "";

            string FileSavePath = "";
            string FileSavePathWithoutVD = "";
            string ZipURL = "";
            string ExportCertificatePath = "";
            string FileName = "";
            string ZIPPath = "";
            string DefaultDocPathExt = "";
            int DocumentTypeID = 0;
            int ClientID = 0;
            int CustomerID = 0;
            int CustomerProductId = 0;
            int SentEmailTemplateID = 0;
            int PurchaseId = 0;
            string InvoiceNumber = "";
            string FinalPath = "";
            string DepartureDate = "";
            FileInfo objDocLink;

            try
            {


                ds = ShippingMethod.GetShippingInvoiceDetailForDocGeneration(CustomerProductInvoiceId);

                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    dt = ds.Tables[0];
                    DocumentTypeID = Convert.ToInt32(dt.Rows[0]["DocumentTypeID"]);
                    ClientID = Convert.ToInt32(dt.Rows[0]["ClientId"]);
                    InvoiceNumber = dt.Rows[0]["InvoiceNumber"].ToString();
                    CustomerID = Convert.ToInt32(dt.Rows[0]["CustomerID"]);
                    CustomerProductId = Convert.ToInt32(dt.Rows[0]["CustomerProductId"]);
                    SentEmailTemplateID = Convert.ToInt32(dt.Rows[0]["SentEmailTemplateID"]);
                    PurchaseId = Convert.ToInt32(dt.Rows[0]["PurchaseId"]);

                    DeleteExistingFile(CustomerProductInvoiceId, DocumentTypeID, ClientID, InvoiceNumber);
                    FinalPath = Server.MapPath(FilePath(ClientID.ToString(), SubPath, InvoiceNumber.ToString(), DocumentTypeID.ToString()));

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        DefaultDocPath = Server.MapPath(dt.Rows[i]["AttachementPath"].ToString());
                        FileSavePath = Server.MapPath(FilePath(dt.Rows[i]["ClientId"].ToString(), SubPath, dt.Rows[i]["InvoiceNumber"].ToString(), dt.Rows[i]["DocumentTypeID"].ToString()));
                        FileSavePathWithoutVD = FilePath(dt.Rows[i]["ClientId"].ToString(), SubPath, dt.Rows[i]["InvoiceNumber"].ToString(), dt.Rows[i]["DocumentTypeID"].ToString());
                        ExportCertificatePath = Server.MapPath(dt.Rows[i]["ExportCertificatePath"].ToString());
                        DefaultDocPathExt = Path.GetExtension(DefaultDocPath);
                        DepartureDate = (String.IsNullOrEmpty(dt.Rows[i]["DepartureDate"].ToString()) ? "" : Convert.ToDateTime(dt.Rows[i]["DepartureDate"]).ToString("MMM d,yyyy"));

                        if (!System.IO.Directory.Exists(FileSavePath))
                            System.IO.Directory.CreateDirectory(FileSavePath);

                        FileName = @"\" + Path.GetFileNameWithoutExtension(DefaultDocPath) + DateTime.Now.Ticks + DefaultDocPathExt;
                        FileSavePath = FileSavePath + FileName;
                        FileSavePathWithoutVD = FileSavePathWithoutVD + FileName;
                        System.IO.File.Copy(DefaultDocPath, FileSavePath);

                        if (!GenerateExcel(FileSavePath, dt.Rows[i]["ExporterName"].ToString(), dt.Rows[i]["ExporterAddress"].ToString(), dt.Rows[i]["ExporterPhone"].ToString()
                        , dt.Rows[i]["CustomerName"].ToString(), dt.Rows[i]["CustomerAddress"].ToString(), dt.Rows[i]["CustomerCountry"].ToString(), dt.Rows[i]["CustomerPhone"].ToString()
                        , dt.Rows[i]["VesselName"].ToString(), dt.Rows[i]["YardLocation"].ToString(), dt.Rows[i]["MakeName"].ToString(), dt.Rows[i]["ModelName"].ToString(), dt.Rows[i]["ChassisNumber"].ToString()
                        , dt.Rows[i]["ModelYear"].ToString(), dt.Rows[i]["Length"].ToString(), dt.Rows[i]["ExporterFax"].ToString(), dt.Rows[i]["NotifierName"].ToString()
                            , dt.Rows[i]["NotifierAddress"].ToString(), dt.Rows[i]["NotifierCountry"].ToString(), dt.Rows[i]["NotifierContact"].ToString(), dt.Rows[i]["DeparturePort"].ToString()
                            , dt.Rows[i]["Height"].ToString(), dt.Rows[i]["Width"].ToString(), dt.Rows[i]["M3"].ToString(), dt.Rows[i]["Freight"].ToString(), dt.Rows[i]["FOBInJapenese"].ToString()
                            , DepartureDate, dt.Rows[i]["InvoiceNumber"].ToString(), dt.Rows[i]["VoyageNo"].ToString(), dt.Rows[i]["AlterationDetail"].ToString(), dt.Rows[i]["AlterationStatus"].ToString()
                            , dt.Rows[i]["InspectionDetail"].ToString(), dt.Rows[i]["InspectionStatus"].ToString(), dt.Rows[i]["Mileage"].ToString(), dt.Rows[i]["ArrivalCountry"].ToString()
                            , dt.Rows[i]["ArrivalPort"].ToString(), dt.Rows[i]["DepartureCounty"].ToString(), Convert.ToDateTime(dt.Rows[i]["PurchaseDate"]).ToString("MMM dd, yyyy")
                            , dt.Rows[i]["Power"].ToString(), dt.Rows[i]["CnFAmount"].ToString(), dt.Rows[i]["ArrivalPortCountry"].ToString(), dt.Rows[i]["Weight"].ToString()
                            , dt.Rows[i]["Terminal"].ToString()))
                        {

                            return "Error during generating document.";
                        }
                    }
                    FileInfo OBJExportCert = new FileInfo(ExportCertificatePath);

                    if (!OBJExportCert.Exists)
                    {
                        return "Export Certificate is not exist";
                    }

                    string[] filePaths = Directory.GetFiles(FinalPath);

                    using (Ionic.Zip.ZipFile zipSave = new Ionic.Zip.ZipFile())
                    {
                        zipSave.AlternateEncodingUsage = ZipOption.AsNecessary;

                        zipSave.AddFile(ExportCertificatePath, "");

                        foreach (string filePath in filePaths)
                        {
                            zipSave.AddFile(filePath, "");
                        }

                        var Downloadpath = FilePath(ClientID.ToString(), SubPath, InvoiceNumber.ToString(), DocumentTypeID.ToString());

                        ZIPPath = Path.Combine(Server.MapPath(Downloadpath), InvoiceNumber.ToString() + ".zip");

                        if (System.IO.File.Exists(ZIPPath))
                            System.IO.File.Delete(ZIPPath);

                        zipSave.Save(ZIPPath);
                        ZipURL = "/" + Downloadpath + "/" + InvoiceNumber.ToString() + ".zip";
                    }
                    objDocLink = new FileInfo(Server.MapPath(ZipURL));

                    TransportMethods.InsertDocument(CustomerID, CustomerProductId, CustomerProductInvoiceId, DocumentTypeID, Path.GetFileNameWithoutExtension(ZipURL), ZipURL.Replace(@"\", "/"), objDocLink.Length
                       , Path.GetExtension(ZipURL), AuthBase.UserId, ClientID, 0, SentEmailTemplateID, PurchaseId);
                }
                else
                {
                    return "No record found.";
                }
                return "";
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

        private bool GenerateExcel(string FilePath, string Shipper, string AddressLine, string Phone, string CustomerName, string CustomerAddress, string Country, string CustomerPhone, string Vessel
             , string YardLocation, string Make, string Model, string Chassis, string Year, string Length, string Fax, string NotifierName, string NotifierAddress
           , string NotifierCountry, string NotifierContactNo, string DeparturePort, string height, string width, string Dimension, string Freight, string FOBPrice,
               string DepartureDate, string InvoiceNo, string VoyageNo, string Alteration, string AlterationStatus, string Inspection, string InspectionStatus, string Mileage
            , string ArrivalCountry, string ArrivalPort, string DepartureCountry, string PurchaseDate, string Power, string CNFInDollar, string ArrivalPortCountry
            , string Weight, string Terminal)
        {
            FileInfo file = new FileInfo(FilePath);

            if (file.Exists)
            {
                try
                {
                    if (file.Extension.ToLower() == ".xls" || file.Extension.ToLower() == ".xlsx")
                    {
                        using (ExcelPackage excelPackage = new ExcelPackage(file))
                        {
                            ExcelWorksheets ws = excelPackage.Workbook.Worksheets;

                            for (int i = 0; i < ws.Count; i++)
                            {
                                ExcelWorksheet objWs = excelPackage.Workbook.Worksheets.ElementAt(i);
                                var dimension = objWs.Dimension;

                                var cells = from row in Enumerable.Range(dimension.Start.Row, dimension.End.Row)
                                            from column in Enumerable.Range(dimension.Start.Column, dimension.End.Column)
                                            select objWs.Cells[row, column];
                                try
                                {
                                    foreach (var excelCell in cells)
                                    {
                                        if (excelCell.Value != null)
                                        {
                                            try
                                            {
                                                if (excelCell.Value.ToString().Equals("Var_Shipper")) { excelCell.Value = Shipper; }
                                                else if (excelCell.Value.ToString().Equals("Var_AddressLine")) { excelCell.Value = AddressLine; }
                                                else if (excelCell.Value.ToString().Equals("Var_Phone")) { excelCell.Value = Phone; }
                                                else if (excelCell.Value.ToString().Equals("Var_CustomerName")) { excelCell.Value = CustomerName; }
                                                else if (excelCell.Value.ToString().Equals("Var_CustomerAddress")) { excelCell.Value = CustomerAddress; }
                                                else if (excelCell.Value.ToString().Equals("Var_Country")) { excelCell.Value = Country; }
                                                else if (excelCell.Value.ToString().Equals("Var_CustomerPhone")) { excelCell.Value = CustomerPhone; }
                                                else if (excelCell.Value.ToString().Equals("Var_Vessel")) { excelCell.Value = Vessel; }
                                                else if (excelCell.Value.ToString().Equals("Var_YardLocation")) { excelCell.Value = YardLocation; }
                                                else if (excelCell.Value.ToString().Equals("Var_FinalDestination")) { excelCell.Value = ArrivalPort + ", " + ArrivalCountry; }
                                                else if (excelCell.Value.ToString().Equals("Var_Make")) { excelCell.Value = Make; }
                                                else if (excelCell.Value.ToString().Equals("Var_Model")) { excelCell.Value = Model; }
                                                else if (excelCell.Value.ToString().Equals("Var_Chassis")) { excelCell.Value = Chassis; }
                                                else if (excelCell.Value.ToString().Equals("Var_Year")) { excelCell.Value = Year; }
                                                else if (excelCell.Value.ToString().Equals("Var_Length")) { excelCell.Value = Length; }
                                                else if (excelCell.Value.ToString().Equals("Var_width")) { excelCell.Value = width; }
                                                else if (excelCell.Value.ToString().Equals("Var_height")) { excelCell.Value = height; }
                                                else if (excelCell.Value.ToString().Equals("Var_Dimension")) { excelCell.Value = Dimension; }
                                                else if (excelCell.Value.ToString().Equals("Var_Fax")) { excelCell.Value = Fax; }
                                                else if (excelCell.Value.ToString().Equals("Var_NotifierName")) { excelCell.Value = NotifierName; }
                                                else if (excelCell.Value.ToString().Equals("Var_NotifierAddress")) { excelCell.Value = NotifierAddress; }
                                                else if (excelCell.Value.ToString().Equals("Var_NotifierCountry")) { excelCell.Value = NotifierCountry; }
                                                else if (excelCell.Value.ToString().Equals("Var_NotifierContactNo")) { excelCell.Value = NotifierContactNo; }
                                                else if (excelCell.Value.ToString().Equals("Var_DischargePort")) { excelCell.Value = DeparturePort; }
                                                else if (excelCell.Value.ToString().Equals("Var_FOBPrice")) { excelCell.Value = "¥ " + FOBPrice; }
                                                else if (excelCell.Value.ToString().Equals("Var_Freight")) { excelCell.Value = Freight; }
                                                else if (excelCell.Value.ToString().Equals("Var_DepartureDate")) { excelCell.Value = DepartureDate; }
                                                else if (excelCell.Value.ToString().Equals("Var_VehicleName")) { excelCell.Value = Make + " " + Model; }
                                                else if (excelCell.Value.ToString().Equals("Var_InvoiceNo")) { excelCell.Value = InvoiceNo; }
                                                else if (excelCell.Value.ToString().Equals("Var_Mileage")) { excelCell.Value = Mileage; }
                                                else if (excelCell.Value.ToString().Equals("Var_DestinationCountry")) { excelCell.Value = ArrivalCountry; }
                                                else if (excelCell.Value.ToString().Equals("Var_VehicleNameWithModel")) { excelCell.Value = Make + " " + Model + " " + Year; }
                                                else if (excelCell.Value.ToString().Equals("Var_PurDate")) { excelCell.Value = PurchaseDate; }
                                                else if (excelCell.Value.ToString().Equals("Var_Power")) { excelCell.Value = Power; }
                                                else if (excelCell.Value.ToString().Equals("Var_ArrivalPort")) { excelCell.Value = ArrivalPort; }
                                                else if (excelCell.Value.ToString().Equals("Var_CNFPrice")) { excelCell.Value = CNFInDollar; }
                                                else if (excelCell.Value.ToString().Equals("Var_ArrivalPortCountry")) { excelCell.Value = ArrivalPortCountry; }
                                                else if (excelCell.Value.ToString().Equals("Var_KGS")) { excelCell.Value = Weight; }

                                            }
                                            catch (Exception)
                                            {
                                                return false;
                                            }
                                        }
                                    }
                                }
                                catch (Exception a)
                                {
                                    return false;
                                }
                            }
                            excelPackage.Save();
                            return true;
                        }
                    }
                    else if (file.Extension.ToLower() == ".doc" || file.Extension.ToLower() == ".docx")
                    {
                        using (DocX docX = DocX.Load(FilePath))
                        {
                            docX.ReplaceText("<date>", DateTime.Now.ToShortDateString());
                            docX.ReplaceText("<ShipperName>", Shipper);
                            docX.ReplaceText("<ShipperPhone>", Phone);
                            docX.ReplaceText("<ShipperAddress>", AddressLine);
                            docX.ReplaceText("<ShipperFax>", Fax);
                            docX.ReplaceText("<ConsigneeName>", CustomerName);
                            docX.ReplaceText("<ConsigneeAddress>", CustomerAddress);
                            docX.ReplaceText("<ConsigneePhone>", CustomerPhone);
                            docX.ReplaceText("<NotifierName>", NotifierName);
                            docX.ReplaceText("<NotifierAddress>", NotifierAddress);
                            docX.ReplaceText("<NotifierPhone>", NotifierContactNo);
                            docX.ReplaceText("<VesselName>", Vessel + " (" + VoyageNo + ")");
                            docX.ReplaceText("<ReceivedYard>", YardLocation);
                            docX.ReplaceText("<PortArrival>", ArrivalPort);
                            docX.ReplaceText("<FinalDestination>", ArrivalCountry);
                            docX.ReplaceText("<Make>", Make);
                            docX.ReplaceText("<Model>", Model);
                            docX.ReplaceText("<Year>", Year);
                            docX.ReplaceText("<Chassis>", Chassis);
                            docX.ReplaceText("<EC-GrossWt>", Weight);
                            docX.ReplaceText("<EC-inM3>", Dimension);
                            docX.ReplaceText("<FREIGHT>", Freight);
                            docX.ReplaceText("<CNF>", CNFInDollar);
                            docX.ReplaceText("<Length>", Length);
                            docX.ReplaceText("<Width>", width);
                            docX.ReplaceText("<Height>", height);
                            docX.ReplaceText("<CountryDischarge>", ArrivalPortCountry);
                            docX.ReplaceText("<Alteration>", Alteration);
                            docX.ReplaceText("<AlterationStatus>", AlterationStatus);
                            docX.ReplaceText("<Inspection>", Inspection);
                            docX.ReplaceText("<InspectionStatus>", InspectionStatus);
                            docX.ReplaceText("<Terminal>", Terminal);

                            docX.SaveAs(FilePath);
                            return true;
                        }
                    }
                }
                catch (Exception ex)
                {
                    return false;
                }
            }
            return false;
        }

        public void DeleteExistingFile(int CustomerProductInvoiceId, int DocumentType, int ClientId, string InvoiceId)
        {

            string virtualpath = FilePath(ClientId.ToString(), SubPath, InvoiceId, DocumentType.ToString());
            string ExecutionPath = Server.MapPath(virtualpath + @"\");

            if (Directory.Exists(ExecutionPath))
            {
                Directory.Delete(Server.MapPath(virtualpath), true);
            }
        }
        public string UploadFile(string DocDetail)
        {
            //FileInfo objOldFile = new FileInfo( p);

            string SavePath = "";
            string URL = "";
            string RootDirectory = "";
            string Extension = "";
            string FileNameWithOutExtension = "";
            string DirectoryName = "";
            string PathWithRootDirectory = "";
            string SubPath = ConfigurationManager.AppSettings["SubPath"];
            try
            {
                if (!string.IsNullOrEmpty(DocDetail))
                {
                    var DocumentDetail = JsonConvert.DeserializeObject<DocumentViewModel>(DocDetail);

                    HttpPostedFile file = System.Web.HttpContext.Current.Request.Files[0];

                    if (DocumentDetail.DocumentTypeId != Constants.DocumentType.ShipmentOrderFile.GetHashCode())
                    {
                        DirectoryName = "/EmailAttachements/";
                    }
                    else
                    {
                        DirectoryName = FilePath(DocumentDetail.ClientId.ToString(), SubPath, DocumentDetail.InvoiceNumber.ToString(), DocumentDetail.DocumentTypeId.ToString());
                    }
                    FileNameWithOutExtension = Path.GetFileNameWithoutExtension(file.FileName) + DateTime.Now.Ticks;
                    Extension = Path.GetExtension(file.FileName);
                    RootDirectory = Path.GetFullPath(Path.Combine(System.Web.HttpContext.Current.Server.MapPath("/")));
                    URL = Path.Combine(DirectoryName, FileNameWithOutExtension + Extension);
                    PathWithRootDirectory = RootDirectory + DirectoryName;

                    if (!System.IO.Directory.Exists(PathWithRootDirectory))
                        System.IO.Directory.CreateDirectory(PathWithRootDirectory);

                    SavePath = Path.Combine(PathWithRootDirectory, FileNameWithOutExtension + Extension);

                    FileInfo objNewFile = new FileInfo(SavePath);
                    file.SaveAs(SavePath);


                    if (DocumentDetail.DocumentTypeId == Constants.DocumentType.ShipmentOrderFile.GetHashCode())
                    {
                        DocumentMethod.InsertProductDocument(DocumentDetail.CustomerProductInvoiceId, DocumentDetail.DocumentTypeId, Path.GetFileNameWithoutExtension(SavePath), URL, Convert.ToInt32(objNewFile.Length)
                            , Path.GetExtension(SavePath), DocumentDetail.ClientId);
                    }
                    /*   TransportMethods.InsertDocument(DocumentDetail.CustomerId, DocumentDetail.CustomerProductId, DocumentDetail.CustomerProductInvoiceId, DocumentDetail.DocumentTypeId, Path.GetFileNameWithoutExtension(SavePath)
                           , URL.Replace(@"\", "/"), objNewFile.Length, Extension, AuthBase.UserId, DocumentDetail.ClientId, 0);*/
                }

                return URL;
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        private string FilePath(string ClientID, string SubPath, string InvoiceNumber, string DocumentTypeID)
        {
            return @"\" + ClientID + SubPath + InvoiceNumber + @"\" + DocumentTypeID;
        }

        [HttpGet]
        public void InsertRemarks(RemarksVM model)
        {

            ShipmentReportMethods.InsertRemarks(model);
        }
        public bool DeleteEmailAttachement(string path)
        {

            string RootDirectory = Path.GetFullPath(Path.Combine(System.Web.HttpContext.Current.Server.MapPath("/")));
            path = RootDirectory + path;

            FileInfo objFileInfo = new FileInfo(path);
            objFileInfo.Delete();

            return true;
        }
        #endregion

        #region parse vesselvoyage detail
        [HttpGet]
        public ActionResult HTMLParse()
        {

            return View();
        }
        [HttpPost]
        [ValidateInput(false)]
        public string HTMLParse(string pagesource)
        {
            string data = GetHtmlData(pagesource);
            return data;
        }
        public static string GetHtmlData(string page)
        {
            List<string> tableContents = GetContents(page, table_pattern);
            List<string> tablerows = GetContents(tableContents[0], tr_pattern);
            List<string> tableheaders = GetContents(tablerows[0], td_pattern);
            tablerows.RemoveAt(0);
            DataTable ParsedTable = new DataTable();
            ParsedTable.Columns.Add("CompanyName", typeof(string));
            ParsedTable.Columns.Add("VesselName", typeof(string));
            ParsedTable.Columns.Add("VoyageNo", typeof(string));
            ParsedTable.Columns.Add("PortName", typeof(string));
            ParsedTable.Columns.Add("ArrivalDate", typeof(string));
            foreach (string tr in tablerows)
            {
                List<string> CurrRowColumns = new List<string>();
                CurrRowColumns = GetContents(tr, td_pattern);
                string[] vndShipMerged = Regex.Split(CurrRowColumns[0], "<td>");
                CurrRowColumns.RemoveAt(0);
                CurrRowColumns.Insert(0, vndShipMerged[1]);
                CurrRowColumns.Insert(1, vndShipMerged[2]);
                for (int i = 3; i < CurrRowColumns.Count; i++)
                {
                    string date = DateFormatter(CurrRowColumns[i].Replace("<td>", "").Replace("</td>", ""));
                    if (date != "-")
                    {
                        DataRow dr = ParsedTable.NewRow();

                        dr["CompanyName"] = CurrRowColumns[0].Replace("<td>", "").Replace("</td>", "");
                        dr["VesselName"] = CurrRowColumns[1].Replace("<td>", "").Replace("</td>", "");
                        dr["VoyageNo"] = CurrRowColumns[2].Replace("<td>", "").Replace("</td>", "");
                        dr["PortName"] = tableheaders[i].Replace("<td>", "").Replace("</td>", "");
                        dr["ArrivalDate"] = date == "-" ? DateTime.Now.Date.ToString() : date;
                        ParsedTable.Rows.Add(dr);
                    }
                }
            }
            ShippingMethod.UplaodVesselDetail(ParsedTable);
            return page;
        }
        private static string DateFormatter(string Date)
        {
            string day = "";
            string month = "";
            int monthNum = 0;
            int year = 0;
            string date = "";



            if (Date.Length > 2)
            {
                string[] FormatDate = Regex.Split(Date, " ");
                day = Regex.Replace(FormatDate[1], "[^0-9.]", "");
                month = FormatDate[0];
                monthNum = DateTime.ParseExact(month, "MMMM", System.Globalization.CultureInfo.CurrentCulture).Month;
                year = DateTime.Now.Year;

                int diff = monthNum - DateTime.Now.Date.Month;
                if (diff < -3)
                    year += 1;
                if (diff > 3)
                    year -= 1;
                date = year + "-" + monthNum + "-" + day;
            }
            else
            {
                date = "-";
            }
            return date;
        }
        private static List<string> GetContents(string input, string pattern)
        {
            MatchCollection matches = Regex.Matches(input, pattern, RegexOptions.Singleline);
            List<string> contents = new List<string>();
            foreach (Match match in matches)
            {
                contents.Add(match.Value);
            }
            return contents;
        }
        #endregion

        #region vessel schedule report


        [HttpGet]
        public JsonResult GetPortRegionWise(int region)
        {
            List<SelectListItem> port = OGMethods.GetPortList(region);
            return Json(port, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult GetDeparturePort(int region)
        {
            List<SelectListItem> port = OGMethods.GetDeparturePortList();
            return Json(port, JsonRequestBehavior.AllowGet);
        }


        public ActionResult VesselScheduleReport()
        {
            ViewBag.VesselList = OGMethods.GetVessels();
            ViewBag.Region = OGMethods.SellingRegionList();
            ViewBag.DeparturePort = OGMethods.GetDeparturePortList();
            ViewBag.Port = OGMethods.GetPortList();
            return View();
        }

        [HttpGet]
        public ActionResult _VesselScheduleReport(int? RegionId, int? DeparturePortId, int? ArrivalPortId, DateTime? DepartureDateFrom, DateTime? DepartureDateTo, DateTime? ArrivalDateFrom, DateTime? ArrivalDateTo, int? VesselId)
        {
            try
            {
                ViewBag.Region = OGMethods.SellingRegionList();
                ViewBag.Port = OGMethods.GetPortList();
                ViewBag.DeparturePort = OGMethods.GetDeparturePortList();

                ViewData["ScheduleDetail"] = ShippingMethod.GetVesselScheduleDetail(RegionId, DeparturePortId, ArrivalPortId, DepartureDateFrom, DepartureDateTo, ArrivalDateFrom, ArrivalDateTo, VesselId);
                ViewData.Model = ShippingMethod.GetVesselScheduleDetail(RegionId, DeparturePortId, ArrivalPortId, DepartureDateFrom, DepartureDateTo, ArrivalDateFrom, ArrivalDateTo, VesselId);
                return PartialView();
            }
            catch (Exception ex)
            {
                return PartialView();
            }
        }
        #endregion
    }
} 


+ TransportContoller.cs

using JTJapan.Core;
using JTJapan.Core.AdminArea;
using JTJapan.Core.AdminArea.ViewModel;
using JTJapan.Core.Helper;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SecureQueryStringLib;
using JTJapan.Core.Helper;
using Automobile.Admin.Models;
using Newtonsoft.Json;
using System.IO;
using System.Web.Services;

namespace Automobile.Admin.Controllers
{
    public class TransportController : BaseController
    {
        //
        // GET: /Transportation/

        string VD = ConfigurationManager.AppSettings["DocPath"];
        public ActionResult Index()
        {
            return View();
        }


        public ActionResult Transportation(int TransportationStatusCode = 100, int PageSize = 25, int PageCount = 1, int IsUnmarkedVendor = 1, string ChassisNumber = null)
        {


            ViewBag.TransportationStatusCode = TransportationStatusCode;

            if (TransportationStatusCode == Constants.OG_UnitTransportationStatus.BIdWonEmailPending.GetHashCode())
            {
                ViewBag.UnitLocation = OGMethods.GetUnitLocationList();
                ViewBag.TransportVendor = OGMethods.GetOGTransportVendor();
                ViewBag.ShipmentType = OGMethods.GetOGShipmentType();
            }

            ChassisNumber = (string.IsNullOrEmpty(ChassisNumber) ? null : ChassisNumber);

            UnitTransportationResponseModel response = GetTransportaitionData(TransportationStatusCode, PageSize, PageCount, IsUnmarkedVendor, ChassisNumber);

            ViewBag.ChassisNumber = ChassisNumber;

            return View(response);
        }

        public ActionResult SendEmail()
        {
            return View();
        }

        public ActionResult AcknowledgementReport()
        {
            return View();
        }
        public ActionResult _TransportationVendorCount(int TransportationStatusCode = 100)
        {
            List<TransportaionStatusCount> model = new List<TransportaionStatusCount>();
            model = TransportMethods.GetUnitTransportationStatusWiseCount(TransportationStatusCode);

            return PartialView(model);
        }

        public ActionResult _TransportReport(int TransportationStatusCode = 100, int PageSize = 25, int PageCount = 1, int IsUnmarkedVendor = 0, string ChassisNumber = null, int TransportVendorID = 4)
        {
            DataSet ds = new DataSet();

            ViewBag.TransportationStatusCode = TransportationStatusCode;
            ViewBag.TransportVendorID = TransportVendorID;

            ChassisNumber = (string.IsNullOrEmpty(ChassisNumber) ? null : ChassisNumber);

            UnitTransportationResponseModel response = GetTransportaitionData(TransportationStatusCode, PageSize, PageCount, IsUnmarkedVendor, ChassisNumber, TransportVendorID);
            ViewBag.ChassisNumber = ChassisNumber;

            return PartialView(response);
        }
        public ActionResult _EmailPopup(int TransportationStatusCode = 100, int CustomerProductInvoiceId = 0, int TransportVendorID = 0)
        {
            ViewBag.CustomerProductInvoiceId = CustomerProductInvoiceId;
            ViewBag.TransportVendorID = TransportVendorID;
            List<EmailViewModel> model = new List<EmailViewModel>();
            List<EmailViewModel> response = new List<EmailViewModel>();

            string Link = "";
            int TypeID = 0;

            SecureQueryString ObjSecureQueryString = new SecureQueryString();

            model = TransportMethods.GetEmailForPreview(TransportationStatusCode, CustomerProductInvoiceId);

            for (int i = 0; i < model.Count; i++)
            {
                EmailViewModel Obj = new EmailViewModel();

                if (model[i].DocumentTypeId.ToString() == Constants.DocumentType.TransportVendorAttachment.GetHashCode().ToString())
                    TypeID = 1;
                else if (model[i].DocumentTypeId.ToString() == Constants.DocumentType.YardVendorAttachment.GetHashCode().ToString())
                    TypeID = 2;

                Link = ObjSecureQueryString.encrypt("id=" + CustomerProductInvoiceId) + "&type=" + TypeID;

                Obj.ChassisNo = model[i].ChassisNo;
                Obj.ClientID = model[i].ClientID;
                Obj.ClientName = model[i].ClientName;
                Obj.CRMClientCode = model[i].CRMClientCode;
                Obj.CRMClientID = model[i].CRMClientID;
                Obj.CRMClientPassword = model[i].CRMClientPassword;
                Obj.CustomerID = model[i].CustomerID;
                Obj.DocumentTypeId = model[i].DocumentTypeId;
                Obj.EmailBody = model[i].EmailBody.Replace("[VAR_Parameter]", Link);
                Obj.EmailHeading = model[i].EmailHeading;
                Obj.EmailSubject = model[i].EmailSubject;
                Obj.FromEmailAddress = model[i].FromEmailAddress;
                Obj.InvoiceNumber = model[i].InvoiceNumber;
                Obj.SentEmailTemplateID = model[i].SentEmailTemplateID;
                Obj.ToEmailAddress = model[i].ToEmailAddress;
                Obj.TransportVendor = model[i].TransportVendor;
                Obj.AttachmentPath = VD + model[i].AttachmentPath;
                Obj.DocumentID = model[i].DocumentID;
                Obj.CCEmail = model[i].CCEmail;
                Obj.CCEmail = model[i].CCEmail;
                Obj.File = model[i].AttachmentPath;
                Obj.CustomerProductID = model[i].CustomerProductID;
                Obj.CustomerProductInvoiceid = model[i].CustomerProductInvoiceid;
                Obj.PurchaseID = model[i].PurchaseID;

                response.Add(Obj);
            }

            return PartialView(response);
        }

        public void UpdateTransportation(int ID, int StatusId, int ClientId = 999, int UnitLocationId = 0, int TransportVendorId = 0, int ShipmentTypeId = 0)
        {
            TransportMethods.UpdateCustomerProductInvoiceTransportation(ID, StatusId, ClientId, UnitLocationId, TransportVendorId, ShipmentTypeId);
        }


        [HttpGet]
        public void UpdateTransportationStatus(int ID, int StatusId, int ProductDocument = 0, string FromEmail = null, string ToEmail = null, int SentEmailTemplateID = 0)
        {
            TransportMethods.UpdateTransportationStatusCPI(ID, StatusId, AuthBase.ClientId, AuthBase.UserId);
        }

        [ValidateInput(false)]
        public void InsertEmailTemplate(int ID, int ProductDocument = 0, string EmailBody = "", string FromEmail = null, string ToEmail = null, int SentEmailTemplateID = 0, int ClientId = 999, string CCEmail = null, string EmailSubject = null
            , int? TemplateID = null, string AttachementPath = null, int? DocumentTypeID = null)
        {
            TransportMethods.InsertEmailTemplate(ID, ProductDocument, EmailBody, ClientId, FromEmail, ToEmail, SentEmailTemplateID, CCEmail, EmailSubject, TemplateID, AttachementPath, DocumentTypeID);
        }

        public UnitTransportationResponseModel GetTransportaitionData(int TransportationStatusCode, int PageSize, int PageCount = 1, int IsUnmarkedVendor = 0, string ChassisNumber = null, int TransportVendorID = 4)
        {
            DataSet ds = new DataSet();

            UnitTransportationResponseModel model = new UnitTransportationResponseModel();
            ds = TransportMethods.GetUnitTransportation(TransportationStatusCode, PageSize, PageCount, IsUnmarkedVendor, ChassisNumber, TransportVendorID);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables.Count > 1 && ds.Tables[1].Rows.Count > 0)
            {
                model.UnitTranportationList = EnumerableExtension.ToList<UnitTransportationViewModel>(ds.Tables[0]);
                model.TotalRecords = Convert.ToInt32(ds.Tables[1].Rows[0]["TotalResult"].ToString());
            }
            else
            {
                //  model.UnitTranportationList = null;
                model.TotalRecords = 0;
            }
            model.PageSize = PageSize;
            model.PageCount = PageCount;

            if (ds.Tables.Count > 2 && ds.Tables[2].Rows.Count > 0)
            {
                model.MissingChassisNoList = EnumerableExtension.ToList<MissingChassisNo>(ds.Tables[2]);
            }

            return model;
        }

        public string UpdateFile(string DocDetail)
        {
            //FileInfo objOldFile = new FileInfo( p);

            string SavePath = "";
            string URL = "";
            string DeletePath = "";
            string RootDirectory = "";
            string Extension = "";
            string FileNameWithOutExtension = "";
            string FileName = "";
            string path = "";
            try
            {
                if (!string.IsNullOrEmpty(DocDetail))
                {
                    var DocumentDetail = JsonConvert.DeserializeObject<DocumentViewModel>(DocDetail);

                    path = Path.GetDirectoryName(DocumentDetail.AttachementPath) + @"\";
                    HttpPostedFile file = System.Web.HttpContext.Current.Request.Files[0];
                    FileName = Path.GetFileName(DocumentDetail.AttachementPath);
                    FileNameWithOutExtension = Path.GetFileNameWithoutExtension(DocumentDetail.AttachementPath);
                    Extension = Path.GetExtension(file.FileName);
                    RootDirectory = Path.GetFullPath(Path.Combine(System.Web.HttpContext.Current.Server.MapPath("/")));
                    DeletePath = Path.Combine(RootDirectory+ path+ FileName);
                    URL = Path.Combine(path, FileNameWithOutExtension + Extension);
                    SavePath = Path.Combine(RootDirectory+ path+ FileNameWithOutExtension + Extension);

                    FileInfo objOldFile = new FileInfo(DeletePath);

                    if (objOldFile.Exists)
                        objOldFile.Delete();

                    FileInfo objNewFile = new FileInfo(SavePath);
                    file.SaveAs(SavePath);

                    TransportMethods.InsertDocument(DocumentDetail.CustomerId, DocumentDetail.CustomerProductId, DocumentDetail.CustomerProductInvoiceId, DocumentDetail.DocumentTypeId, Path.GetFileNameWithoutExtension(SavePath)
                        , URL.Replace(@"\", "/"), objNewFile.Length, Extension, AuthBase.UserId, DocumentDetail.ClientId, 0, DocumentDetail.SendEmailTemplateID, DocumentDetail.PurchaseID);
                }

                return VD + URL;
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        public string UploadFile(string DocDetail)
        {
            //FileInfo objOldFile = new FileInfo( p);

            string SavePath = "";
            string URL = "";
            string RootDirectory = "";
            string Extension = "";
            string FileNameWithOutExtension = "";
            string DirectoryName = "";
            string PathWithRootDirectory = "";
            string SubPath = ConfigurationManager.AppSettings["SubPath"];
            try
            {
                if (!string.IsNullOrEmpty(DocDetail))
                {
                    var DocumentDetail = JsonConvert.DeserializeObject<DocumentViewModel>(DocDetail);

                    HttpPostedFile file = System.Web.HttpContext.Current.Request.Files[0];

                    if (DocumentDetail.DocumentTypeId == Constants.DocumentType.MiscEmailAttachement.GetHashCode())
                    {
                        DirectoryName = "/EmailAttachements/";
                    }
                    else {
                        DirectoryName = FilePath(DocumentDetail.ClientId.ToString(), SubPath, DocumentDetail.InvoiceNumber.ToString(), DocumentDetail.DocumentTypeId.ToString());
                    }
                    FileNameWithOutExtension = Path.GetFileNameWithoutExtension(file.FileName) + DateTime.Now.Ticks;
                    Extension = Path.GetExtension(file.FileName);
                    RootDirectory = Path.GetFullPath(Path.Combine(System.Web.HttpContext.Current.Server.MapPath("/")));
                    URL = Path.Combine(DirectoryName, FileNameWithOutExtension + Extension);
                    PathWithRootDirectory = RootDirectory + DirectoryName;

                    if (!System.IO.Directory.Exists(PathWithRootDirectory))
                        System.IO.Directory.CreateDirectory(PathWithRootDirectory);

                    SavePath = Path.Combine(PathWithRootDirectory, FileNameWithOutExtension + Extension);

                    FileInfo objNewFile = new FileInfo(SavePath);
                    file.SaveAs(SavePath);

                    /*   TransportMethods.InsertDocument(DocumentDetail.CustomerId, DocumentDetail.CustomerProductId, DocumentDetail.CustomerProductInvoiceId, DocumentDetail.DocumentTypeId, Path.GetFileNameWithoutExtension(SavePath)
                           , URL.Replace(@"\", "/"), objNewFile.Length, Extension, AuthBase.UserId, DocumentDetail.ClientId, 0);*/
                }

                return URL;
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        public bool DeleteEmailAttachement(string path)
        {

            string RootDirectory = Path.GetFullPath(Path.Combine(System.Web.HttpContext.Current.Server.MapPath("/")));
            path = RootDirectory + path;

            FileInfo objFileInfo = new FileInfo(path);
            objFileInfo.Delete();

            return true;
        }

        private string FilePath(string ClientID, string SubPath, string InvoiceNumber, string DocumentTypeID)
        {
            return @"\" + ClientID + SubPath + InvoiceNumber + @"\" + DocumentTypeID;
        }
    }
}
Folder: Models
+AccountViewModels.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.ComponentModel.DataAnnotations;

namespace Automobile.Admin.Models
{

    public class LoginViewModel
    {
        [Required]
        [Display(Name = "User name")]
        public string UserName { get; set; }

        public string Picture { get; set; }
        public bool IsAction { get; set; }

        public int UserId { get; set; }

        public int UserTypeId { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; }

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }

        public int ClientId { get; set; }
        public string ClientNames { get; set; }
        public string UserTypeIDS { get; set; }
        public string ClientIDS { get; set; }
        public string UserTypeNames { get; set; }
        public string DashboardScreenURL { get; set; }
        public int DashboardScreenId { get; set; }

        public bool IsSelect { get; set; }
        public bool IsEdit { get; set; }
        public bool IsDelete { get; set; }

    }
}
+ BaseController.cs
using JTJapan.Core.Helper;
using System.Web.Mvc;

namespace Automobile.Admin.Models
{
    public class BaseController : Controller
    {
        protected override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            string Controller = ControllerContext.RouteData.Values["Controller"].ToString();
            string action = ControllerContext.RouteData.Values["action"].ToString();
            if ((AuthBase.UserId > 0 && AuthBase.ClientId != 0) || filterContext.IsChildAction || action == "SearchMasterResult" 
                || action == "_SearchMaster" || action == "MultipleImages")
            {
                //if (action == "Login" || action == "_Header" || action == "LogOut" || Controller == "Error")
                    return;
                //InsertUnauthorizedLogin();
                //filterContext.Result = (ActionResult)new RedirectResult("~/Error/UnAuthorized");
            }
            else
                filterContext.Result = (ActionResult)new RedirectResult("~/Account/Login");

        }
        //public bool IsAuthenticate()
        //{
        //    SqlParameter[] parameters =
        //    {    
        //        new SqlParameter("@UserId", SqlDbType.Int) { Value = AuthBase.UserId },                
        //        new SqlParameter("@URL", SqlDbType.VarChar) { Value = (object) (this.ControllerContext.RouteData.Values["Controller"].ToString() + "/" + this.ControllerContext.RouteData.Values["action"].ToString())}
        //    };
        //    DataTable dt = DataAccess.getDataTable("dbo.VS_Select_IsAuthenticUser", parameters, General.GetConstring());
        //    if (dt != null && dt.Rows.Count > 0)
        //        return Convert.ToBoolean(dt.Rows[0]["Result"]);
        //    return false;
        //}
    }
}

+Role.cs

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace Automobile.Admin.Models
{
    public class Role
    {
        public string Email { get; set; }
        public string RoleName { get; set; }
        public int RoleCode { get; set; }
        public int UserID { get; set; }
        public int UserCode { get; set; }
        public int DeptID { get; set; }
        public string FullName { get; set; }
        public string Designation { get; set; }
        public string DeptName { get; set; }
        public string GestureName { get; set; }
        public int GestureCode { get; set; }
        public IEnumerable<SelectListItem> DeptList { get; set; }

        public IEnumerable<SelectListItem> UserList { get; set; }



    }
    public class AdminRole : Message
    {
        [Required(ErrorMessage = "Please Enter Role Name")]
        [StringLength(50, ErrorMessage = "Role Name Shouldn't be Exceed from 50 Characters")]
        public string RoleName { get; set; }
        public int? roleCode { get; set; }
        public List<int> Screen { get; set; }
    }
    public class Message
    {
        public const string ErrorMesssage = "Sorry problem at this time please contact with administrator.";
        public Message()
        {
            IsSuccess = false;
            IsError = false;
        }
        public bool IsSuccess { get; set; }
        public string SuccessMessage { get; set; }
        public bool IsError { get; set; }
        public string ErrorMessage { get; set; }
    }

    public class ScreenList
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
    public class LevelList
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

}

+ScreenViewModel.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace Automobile.Admin.Models
{
    public class ScreenViewModel : BaseModell
    {
        public int? Id { get; set; }
        public string Title { get; set;}
        public string URL { get; set;}
        public string IconClass { get; set;}
        public string ParentName { get; set; }        
        public int? ParentCode { get; set;}
        public int LevelType { get; set;}
        public int? Sequence { get; set; }
        public DateTime UpdateDate { get; set; }
    }

    public class ScreenResponseModel : BaseModell
    {
        public ScreenResponseModel()
        {
            ScreenList = new List<ScreenViewModel>();
        }
        public List<ScreenViewModel> ScreenList { get; set; }

    }
      public class BaseModell
    {
        public bool IsValid { get; set; }

        public string Message { get; set; }
    }




}
Folder: Views
Folder : Account

+Login.cshtml
@model Automobile.Admin.Models.LoginViewModel
@{    
    Layout = null;
}

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Log in</title>
    <link rel="icon" type="image/png" href="~/Assets/img/favicon.ico">
    <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport">
    <link href="~/Assets/bootstrap/css/bootstrap.min.css" rel="stylesheet" />
    <!-- Theme style -->
    <link href="~/Assets/css/AdminLTE.min.css" rel="stylesheet" />
    <style>
        .field-validation-valid {
            display: none;
        }

        input.input-validation-error {
            border: 1px solid #b94a48;
        }

        .field-validation-error {
            color: #b94a48;
        }

        .validation-summary-errors {
            color: #b94a48;
        }

        ul {
            list-style: none;
            padding-left: 0px;
        }
    </style>
</head>

<body class="hold-transition login-page">
    <div class="login-box">
        <div class="login-logo">
            <img src='@Url.Content("~/Assets/img/logo.png")' width="80" height="60" alt="Logo">
            <b>Autos Trading</b>
        </div>        
        <div class="login-box-body">
            <p class="login-box-msg">Log in to start your session</p>
            @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { role = "form" }))
            {
                @Html.AntiForgeryToken()
                <div class="form-group has-feedback">
                    @Html.TextBoxFor(m => m.UserName, new { @placeholder = "Enter Username", @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.UserName)
                    <span class="glyphicon glyphicon-envelope form-control-feedback"></span>
                </div>
                <div class="form-group has-feedback">
                    @Html.PasswordFor(m => m.Password, new { @placeholder = "Enter Password", @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Password)
                    <span class="glyphicon glyphicon-lock form-control-feedback"></span>
                </div>
                <div class="row">                    
                    <div class="col-xs-12">
                        <button type="submit" class="btn btn-primary btn-block btn-flat">Log In</button>
                    </div>                    
                </div>
            }
        </div>        
    </div>
</body>


Folder: Catalog
+ _AddEditTransport.cshtml
@model JTJapan.Core.AdminArea.ViewModel.CatalogueViewModel

<style>
    .input-group {
        margin-bottom: 10px;
    }

    .input-group-addon {
        min-width: 80px;
        text-align: left;
    }
</style>
<div class="modal-dialog"> 
    <div class="modal-content">
        <div class="modal-header" style="background-color:#3C8DBC">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <h4 class="modal-title" style="color:white"></h4>
        </div>

        @using (Html.BeginForm("_AddEditTransport", "Catalog", FormMethod.Post, new { @Id = "setupForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-red" })

            <div class="modal-body">

                @Html.HiddenFor(x => x.Id)

                <div class="input-group">
                    <span class="input-group-addon">Vendor</span>
                    @Html.TextBoxFor(x => x.Title, new { @class = "form-control", id = "title", autofocus = "autofocus" })
                    @Html.ValidationMessageFor(x => x.Title, "", new { @class = "field-validation-error error-msg", maxlength = "100" })
                </div>

                <div class="input-group">
                    <span class="input-group-addon">Email</span>
                    @Html.TextBoxFor(x => x.Email, new { @class = "form-control", id = "email", maxlength = "50" })
                </div>
                <div class="input-group">
                    <span class="input-group-addon">CCEmail</span>
                    @Html.TextBoxFor(x => x.CCEmail, new { @class = "form-control", id = "ccemail", maxlength = "50" })
                </div>
                <div class="responseMessage"></div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
                <input type="button" id="btnAddVendor" class="btn btn-primary" value="" />
            </div>
        }
    </div>
</div>

<script>
    $(document).ready(function () {

        $('[id*=btnAddVendor]').click(function () {
            var IsValid = ValidateForm();
            if (IsValid) {
                $.ajax({
                    async: true,
                    type: 'POST',
                    cache: false,
                    data: $('#setupForm').serialize(),
                    datatype: 'json',
                    contenttype: 'application/json; charset=utf-8',
                    crossDomain: true,
                    url: $('#setupForm').attr('action'),
                    success: function (data) {
                        if (data.IsValid) {
                            if (data.Id == null) {
                                Helper.Methods.ShowPopUp('Success', 'Data added successfully');
                            }
                            else {
                                Helper.Methods.ShowPopUp('Success', 'Data updated successfully');
                            }
                            $("#addOrUpdateTransportVendorModel").modal('hide');
                            setTimeout(function () {
                                location.reload();
                            }, 1000);
                        }
                        else {
                            $('.responseMessage').text(data.Message);
                            $('.responseMessage').addClass('red-text');
                        }
                    }
                });
            }
            return false;

        });

        function ValidateForm() {

            var iserror = false;
            var title = $('[id*=title]');

            title.removeClass('error');

            if (title.val().trim() == '' || typeof title.val() == "undefined") {
                title.addClass('error');
                iserror = true;
            }


            return !iserror;
        }
    });

</script>
+ _ExporterCompany
@model JTJapan.Core.AdminArea.ViewModel.CatalogueViewModel

<style>
    .input-group-addon {
        min-width: 90px;
        text-align: left;
    }

    textarea {
        resize: none; 
    }
</style>

<div class="modal fade" id="modal-AddExporter">
    <div class="modal-dialog email-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#3C8DBC">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                @if (Model.Id == null)
                {
                    <h4 class="modal-title" style="color:white">Add Exporter Company</h4>
                }
                else
                {
                    <h4 class="modal-title" style="color:white">Update Exporter Company</h4>
                }
            </div>

            <div class="modal-body">
                <div class="form-group input-group">
                    <span class="input-group-addon">Company</span>
                    <input class="form-control" id="Title" value="@Model.Title" type="text">
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">Phone #</span>
                    <input class="form-control" id="Phone" value="@Model.Phone" type="text">
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">Fax #</span>
                    <input class="form-control" id="Fax" value="@Model.Fax" type="text">
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">Address</span>
                    <textarea class="form-control" rows="2" id="Address">@Model.Address</textarea>
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">Description</span>
                    <textarea class="form-control" rows="2" id="Address">@Model.Descriptions</textarea>
                </div>
                <div class="responseMessage"></div>
            </div>
            <div class="modal-footer">
                <div class="box-footer">
                    <div class="pull-right">
                        @if (Model.Id == null)
                        {
                            <button class="btn btn-primary" onclick="UpdateExporterCompany(this)">Add</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" onclick="UpdateExporterCompany(this)">Update</button>
                        }
                    </div>
                    <div class="pull-left">
                        <button type="reset" class="btn btn-default" onclick="$('#modal-AddExporter').modal('hide');">Close</button>
                    </div>
                </div>
            </div>
            @*}*@
        </div>
    </div>
</div>
<script>
    var ExporterCompanyId = '@Model.Id';
    var chk = true;
    function DataValidation(btn) {
        data = {};
        object = [];
        //var regExp = new RegExp("^-*[0-9,\.]+$");
        data.Id = ExporterCompanyId;
        data.Title = $('#Title').val();
        data.Phone = $('#Phone').val();
        data.Fax = $('#Fax').val();
        data.Address = $('#Address').val();
        object.push(data);
        if (data.Title.length < 1 || data.Title.length > 100) {
            $('#Title').addClass('error');
            chk = false;
        }
        return object;
    }

    function UpdateExporterCompany(btn) {
        $(".error").removeClass("error");
        data = {};
        data.CatalogueList = DataValidation(btn);
        if (chk == true) {
            $.ajax({
                async: true,
                type: 'Post',
                cache: false,
                data: data,
                crossDomain: true,
                url: '_ExporterCompany',
                success: function (data) {
                    debugger;
                    if (data.IsValid) {
                        if (data.Id == null) {
                            Helper.Methods.ShowPopUp('Success', 'Data added successfully');
                        }
                        else {
                            Helper.Methods.ShowPopUp('Success', 'Data updated successfully');
                        }
                        $('#modal-AddExporter').modal('hide');
                        setTimeout(function () {
                            location.reload();
                        }, 1000);
                    }
                    else {
                        $('.responseMessage').text(data.Message);
                        $('.responseMessage').addClass('red-text');
                    }

                }
            });
        }
        else {
            return;
        }

    }
</script>


+ _PurchaseVendor
@model JTJapan.Core.AdminArea.ViewModel.CatalogueViewModel

<style>
    .input-group {
        margin-bottom: 10px;
    }

    .input-group-addon {
        min-width: 80px;
        text-align: left;
    }

    textarea { 
        resize: none;
    }
</style>

<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header" style="background-color:#3C8DBC">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <h4 class="modal-title" style="color:white"></h4>
        </div>

        @using (Html.BeginForm("_PurchaseVendor", "Catalog", FormMethod.Post, new { @Id = "setupForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-red" })

            <div class="modal-body">

                @Html.HiddenFor(x => x.Id)

                <div class="input-group">
                    <span class="input-group-addon">Vendor</span>
                    @Html.TextBoxFor(x => x.Title, new { @class = "form-control", id = "title", autofocus = "autofocus", autocomplete = "off" })
                    @Html.ValidationMessageFor(x => x.Title, "", new { @class = "field-validation-error error-msg" })
                </div>

                <div class="input-group">
                    <span class="input-group-addon">Address</span>
                    @Html.TextAreaFor(x => x.Address, new { @class = "form-control", @rows = 3, id = "address" })
                    @Html.ValidationMessageFor(x => x.Address, "", new { @class = "field-validation-error error-msg" })
                </div>

                <div class="responseMessage"></div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
                <input type="button" id="btnAdd" class="btn btn-primary" value="" />
            </div>
        }
    </div>
</div>

<script>

    $(document).ready(function () {

        $('[id*=btnAdd]').click(function () {

            var IsValid = ValidateForm();
            if (IsValid) {
                $.ajax({
                    async: true,
                    type: 'POST',
                    cache: false,
                    data: $('#setupForm').serialize(),
                    datatype: 'json',
                    contenttype: 'application/json; charset=utf-8',
                    crossDomain: true,
                    url: $('#setupForm').attr('action'),
                    success: function (data) {

                        if (data.IsValid) {
                            if (data.Id == null) {
                                Helper.Methods.ShowPopUp('Success', 'Data added successfully');
                            }
                            else {
                                Helper.Methods.ShowPopUp('Success', 'Data updated successfully');
                            }
                            $("#addOrUpdatePurchaseVendorModel").modal('hide');
                            setTimeout(function () {
                                location.reload();
                            }, 1000);
                        }

                        else {
                            $('.responseMessage').text(data.Message);
                            $('.responseMessage').addClass('red-text');
                        }
                    }
                });
            }
            return false;

        });

        function ValidateForm() {

            var iserror = false;
            var title = $('[id*=title]');
            title.removeClass('error');

            if (title.val().trim() == '' || typeof title.val() == "undefined") {
                title.addClass('error');
                iserror = true;
            }
            return !iserror;
        }
    });
</script>

+ _Screen
@model  Automobile.Admin.Models.ScreenViewModel

<style>
    .input-group-addon {
        min-width: 135px;
        text-align: left;
    }

    textarea {
        resize: none; 
    }
</style>

<div class="modal fade" id="modal-AddScreen">
    <div class="modal-dialog email-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#3C8DBC">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                @if (Model.Id == null)
                {
                    <h4 class="modal-title" style="color:white">Add Screen</h4>
                }
                else
                {
                    <h4 class="modal-title" style="color:white">Update Screen</h4>
                }
            </div>

            <div class="modal-body">

                <div class="form-group input-group">
                    <span class="input-group-addon">Screen</span>
                    <input class="form-control" id="Title" value="@Model.Title" type="text" maxlength="100">
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">URL</span>
                    <input class="form-control" id="URL" value="@Model.URL" type="text" maxlength="200">
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">Sequence</span>
                    <input class="form-control" id="Sequence" value="@Model.Sequence" type="text" maxlength="5">
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">IconClass</span>
                    <input class="form-control" id="IconClass" value="@Model.IconClass" type="text" maxlength="50">
                </div>               
                <div class="form-group input-group">
                    <span class="input-group-addon">Level</span>
                    @Html.DropDownList("LevelType", new SelectList((IEnumerable<SelectListItem>)ViewBag.Level, "Value", "Text"), new { @class = "form-control", @id = "LevelType" })
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">Parent</span>
                    @Html.DropDownList("ParentCode", new SelectList((IEnumerable<SelectListItem>)ViewBag.ParentScreen, "Value", "Text"), new { @class = "form-control", @id = "ParentCode" })
                </div>
                <div class="responseMessage"></div>

            </div>
            <div class="modal-footer">
                <div class="box-footer">
                    <div class="pull-right">
                        @if (Model.Id == null)
                        {
                            <button class="btn btn-primary" onclick="UpdateScreen(this)">Add</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" onclick="UpdateScreen(this)">Update</button>
                        }
                    </div>
                    <div class="pull-left">
                        <button type="reset" class="btn btn-default" onclick="$('#modal-AddScreen').modal('hide');">Close</button>
                    </div>
                </div>
            </div>
            @*}*@
        </div>
    </div>
</div>
<script>
    var ScreenId = '@Model.Id';
    var chk = true;
    function DataValidation(btn) {
        chk = true;
        data = {};
        object = [];
        //var regExp = new RegExp("^-*[0-9,\.]+$");
        data.Id = ScreenId;
        data.Title = $('#Title').val();
        data.URL = $('#URL').val();
        data.Sequence = $('#Sequence').val();        
        data.IconClass = $('#IconClass').val();    
        data.ParentCode = $('#ParentCode').val();
        data.LevelType = $('#LevelType').val();
        object.push(data);
        if (data.Title.length < 1 || data.Title.length > 500) {
            $('#Title').addClass('error');
            chk = false;
        }
        if (data.Sequence.length < 1 || data.Sequence.length > 5 || data.Sequence <= 0 ) {
            $('#Sequence').addClass('error');
            chk = false;
        }
        //if (data.URL.length < 1 || data.URL.length > 500) {
        //    $('#URL').addClass('error');
        //    chk = false;
        //}
        return object;
    }

    function UpdateScreen(btn) {
        $(".error").removeClass("error");
        data = {};
        data.CatalogueList = DataValidation(btn);
        if (chk == true) {
            $.ajax({
                async: true,
                type: 'Post',
                cache: false,
                data: data,
                crossDomain: true,
                url: '_Screen',
                success: function (data) {

                    if (data.IsValid) {
                        if (data.Id == null) {
                            Helper.Methods.ShowPopUp('Success', 'Screen added successfully');
                        }
                        else {
                            Helper.Methods.ShowPopUp('Success', 'Screen updated successfully');
                        }
                        $('#modal-AddScreen').modal('hide');
                        setTimeout(function () {
                            location.reload();
                        }, 1000);
                    }
                    else {
                        $('.responseMessage').text(data.Message);
                        $('.responseMessage').addClass('red-text');
                    }

                }
            });
        }
        else {
            return;
        }
    }


    $('#IconClass,#Title').on('keypress', function (event) {
        var regex = new RegExp("^[a-zA-Z0-9\-\_ ]+$");
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        if (!regex.test(key)) {
            event.preventDefault();
            return false;
        }
    });
    $('#URL').on('keypress', function (event) {
        var regex = new RegExp("^[a-zA-Z0-9\?\=\$\%\~\+\-\_\.\/ ]+$");
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        if (!regex.test(key)) {
            event.preventDefault();
            return false;
        }
    });
    $('#Sequence').on('keypress', function (event) {
        var regex = new RegExp("^[0-9]+$");
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        if (!regex.test(key)) {
            event.preventDefault();
            return false;
        }
    });


</script>


+ _ShippingVendor
@model JTJapan.Core.AdminArea.ViewModel.CatalogueViewModel

<style>
    .input-group {
        margin-bottom: 10px;
    }

    .input-group-addon {
        min-width: 100px;
        text-align: left;
    }
</style>

<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header" style="background-color:#3C8DBC">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <h4 class="modal-title" style="color:white"></h4>
        </div>

        @using (Html.BeginForm("_ShippingVendor", "Catalog", FormMethod.Post, new { @Id = "setupForm" }))
        {
            @Html.AntiForgeryToken()

            <div class="modal-body">

                @Html.HiddenFor(x => x.Id)

                <div class="input-group">
                    <span class="input-group-addon">Vendor</span>
                    @Html.TextBoxFor(x => x.Title, new { @class = "form-control", id = "title", autofocus = "autofocus", autocomplete = "off" })
                </div>

                <div class="input-group"> 
                    <span class="input-group-addon">Email</span>
                    @Html.TextBoxFor(x => x.Email, new { @class = "form-control", id = "email" })
                </div>

                <div class="input-group">
                    <span class="input-group-addon">CCEmail</span>
                    @Html.TextBoxFor(x => x.CCEmail, new { @class = "form-control", id = "ccemail" })
                </div>

                <div class="responseMessage"></div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
                <input type="button" id="btnAdd" class="btn btn-primary" value="" />
            </div>
        }
    </div>
</div>

<script>

    $(document).ready(function () {

        $('#btnAdd').click(function () {

            var IsValid = ValidateForm();
            if (IsValid) {
                $.ajax({
                    async: true,
                    type: 'POST',
                    cache: false,
                    data: $('#setupForm').serialize(),
                    datatype: 'json',
                    contenttype: 'application/json; charset=utf-8',
                    crossDomain: true,
                    url: $('#setupForm').attr('action'),
                    success: function (data) {

                        if (data.IsValid) {
                            if (data.Id == null) {
                                Helper.Methods.ShowPopUp('Success', 'Data added successfully');
                            }
                            else {
                                Helper.Methods.ShowPopUp('Success', 'Data updated successfully');
                            }
                            $("#addOrUpdateShippingVendorModel").modal('hide');

                            setTimeout(function () {
                                location.reload();
                            }, 1000);
                        }

                        else {
                            $('.responseMessage').text(data.Message);
                            $('.responseMessage').addClass('red-text');
                        }
                    }
                });
            }
            return false;

        });

        function ValidateForm() {

            var iserror = false;
            var title = $('#title');
            var email = $('#email');
            var ccemail = $('#ccemail');

            title.removeClass('error');
            email.removeClass('error');
            ccemail.removeClass('error');

            if (title.val().trim() == '' || typeof title.val() == "undefined") {
                title.addClass('error');
                iserror = true;
            }

            if (email.val().trim() != '') {
                if (!Helper.Methods.ValidateEmail(email.val().trim())) {
                    email.addClass('error');
                    iserror = true;
                }
            }

            if (ccemail.val().trim() != '') {
                if (!Helper.Methods.ValidateEmail(ccemail.val().trim())) {
                    ccemail.addClass('error');
                    iserror = true;
                }
            }
            return !iserror;
        }
    });
</script>

+ _Yard

@model JTJapan.Core.AdminArea.ViewModel.CatalogueViewModel

<style>
    .input-group-addon {
        min-width: 135px;
        text-align: left;
    }

    textarea {
        resize: none; 
    }
</style>

<div class="modal fade" id="modal-AddYard">
    <div class="modal-dialog email-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#3C8DBC">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                @if (Model.Id == null)
                {
                    <h4 class="modal-title" style="color:white">Add Yard</h4>
                }
                else
                {
                    <h4 class="modal-title" style="color:white">Update Yard</h4>
                }
            </div>

            <div class="modal-body">

                <div class="form-group input-group">
                    <span class="input-group-addon">Yard</span>
                    <input class="form-control" id="Title" value="@Model.Title" type="text">
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">Email</span>
                    <input class="form-control" id="Email" value="@Model.Email" type="text">
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">CCEmail</span>
                    <input class="form-control" id="CCEmail" value="@Model.CCEmail" type="text">
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">Incharge Person</span>
                    <input class="form-control" id="InchargePerson" value="@Model.InchargePerson" type="text">
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">Address Line1</span>
                    <textarea class="form-control" rows="2" id="AddressLine1">@Model.AddressLine1</textarea>
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">Address Line2</span>
                    <textarea class="form-control" rows="2" id="AddressLine2">@Model.AddressLine2</textarea>
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">Phone #</span>
                    <input class="form-control" id="Phone" value="@Model.Phone" type="text">
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">Port</span>
                    @Html.DropDownList("PortId", new SelectList((IEnumerable<SelectListItem>)ViewBag.Port, "Value", "Text"), new { @class = "form-control", @id = "Port" })
                </div>
                <div class="form-group input-group">
                    <span class="input-group-addon">Shipping Vendor</span>
                    @Html.DropDownList("VendorId", new SelectList((IEnumerable<SelectListItem>)ViewBag.Vendor, "Value", "Text"), new { @class = "form-control", @id = "Vendor" })
                </div>
                <div class="responseMessage"></div>

            </div>
            <div class="modal-footer">
                <div class="box-footer">
                    <div class="pull-right">
                        @if (Model.Id == null)
                        {
                            <button class="btn btn-primary" onclick="UpdateYard(this)">Add</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" onclick="UpdateYard(this)">Update</button>
                        }
                    </div>
                    <div class="pull-left">
                        <button type="reset" class="btn btn-default" onclick="$('#modal-AddYard').modal('hide');">Close</button>
                    </div>
                </div>
            </div>
            @*}*@
        </div>
    </div>
</div>
<script>
    var UnitLocationId = '@Model.Id';
    var chk = true;
    function DataValidation(btn) {
        data = {};
        object = [];
        //var regExp = new RegExp("^-*[0-9,\.]+$");
        data.Id = UnitLocationId;
        data.Title = $('#Title').val();
        data.Email = $('#Email').val();
        data.CCEmail = $('#CCEmail').val();
        data.InchargePerson = $('#InchargePerson').val();
        data.AddressLine1 = $('#AddressLine1').val();
        data.AddressLine2 = $('#AddressLine2').val();
        data.Phone = $('#Phone').val();
        data.PortId = $('#Port').val();
        data.VendorId = $('#Vendor').val();
        object.push(data);
        if (data.Title.length < 1 || data.Title.length > 100) {
            $('#Title').addClass('error');
            chk = false;
        }
        return object;
    }

    function UpdateYard(btn) {
        $(".error").removeClass("error");
        data = {};
        data.CatalogueList = DataValidation(btn);
        if (chk == true) {
            $.ajax({
                async: true,
                type: 'Post',
                cache: false,
                data: data,
                crossDomain: true,
                url: '_Yard',
                success: function (data) {

                    if (data.IsValid) {
                        if (data.Id == null) {
                            Helper.Methods.ShowPopUp('Success', 'Data added successfully');
                        }
                        else {
                            Helper.Methods.ShowPopUp('Success', 'Data updated successfully');
                        }
                        $('#modal-AddYard').modal('hide');
                        setTimeout(function () {
                            location.reload();
                        }, 1000);
                    }
                    else {
                        $('.responseMessage').text(data.Message);
                        $('.responseMessage').addClass('red-text');
                    }

                }
            });
        }
        else {
            return;
        }
    }
</script>


+ AssignRole
@model Automobile.Admin.Models.Role
@{
    ViewBag.Title = "Assign Role";
}
<script src="~/Assets/js/jquery-ui.js"></script>
@*<link href="~/Assets/css/jquery-ui.css" rel="stylesheet" />
<link href="~/Assets/css/Custom.css" rel="stylesheet" />*@

<div class="content-wrapper">
    <div id="ReportList" class="row" style="margin-left:0px; margin-right:0px;">
        <section class="content">

            <div class="modal fade" id="myModal" role="dialog">
                <div class="modal-dialog">

                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header" style="background-color:#3C8DBC">

                            <h4 class="modal-title" style="color:white"><b>Success!</b></h4>
                        </div>
                        <div class="modal-body" id="modalbody">
                            <p>Information Saved</p>
                        </div>
                    </div>
                </div>
            </div>



            <link href="~/Assets/plugins/iCheck/minimal/_all.css" rel="stylesheet" />
            <link href="~/Assets/plugins/iCheck/all.css" rel="stylesheet" />
            <script src="~/Assets/plugins/iCheck/icheck.js"></script>

            <div class="row">
                <div class="col-xs-12">
                    <div class="box box-info UserVM">
                        <div class="innnerwrap">
                            <section class="midcont employeeDv">
                                <div class="box-info" style="border-top-color: #00c0ef;">
                                    <div class="box-header">
                                        <h3 class="box-title">Assign Role to Employee</h3>
                                    </div>
                                    <div class="tableDv upper">
                                        <form class="form-horizontal" method="post">
                                            <div class="row">
                                                <table>
                                                    <tr>
                                                        <td class="labelsclass">
                                                            <label class="col-sm-2 control-label">Department</label>
                                                        </td>
                                                        <td>
                                                            <div class="autoselect-simple" style="width:350px">
                                                                @Html.DropDownListFor(m => m.DeptID, Model.DeptList, new { @class = "form-control", @id = "departmentlst" })
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td class="labelsclass"><label class="col-sm-2 control-label">Employee</label></td>
                                                        <td>
                                                            <div class="autoselect-simple ui-autocomplete" style="width:350px" id="testDiv">
                                                                <i class="icon-srch-vehclec5 arow"></i>
                                                                <input id="txtUserNam" type="text" placeholder="Enter name" maxlength="50" style="color: black !important;">
                                                                <div id="container">
                                                                </div>
                                                                <table id="tab1">
                                                                    <tr>
                                                                        <td style="line-height:normal; padding-left:0px;">
                                                                            <b><p id="name" class="font-size"></p></b>

                                                                            <p id="desg" style="margin-bottom:0px;" class="font-size"></p>

                                                                            <p id="dept" style="margin-bottom:0px;" class="font-size"></p>

                                                                            <p id="email" style="margin-bottom:0px;" class="font-size"></p>
                                                                        </td>
                                                                    </tr>
                                                                </table>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </div>
                                        </form>
                                        <table id="tab2">
                                            <tr>
                                                <td>
                                                    <h4 class="lfl" id="roles">Roles</h4>

                                                </td>
                                                <td>
                                                    <h4 class="lfl" id="clients"><input type="checkbox" id="checkAll" class="checkkall" style="margin-bottom:10px; margin-right:12px;">Clients</h4>
                                                </td>
                                                <td>
                                                    @*<h4 class="lfl" id="location"><input type="checkbox" id="checkAlllocs" class="checkkall" style="margin-bottom:10px; margin-right:12px;">Location</h4>*@


                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <ul data-bind="foreach: RoleNameList" class="clear chkbxDv style01 " style="list-style:none; padding-left:0px;" id="role-ul">
                                                        <li>
                                                            <input data-bind="checked:UserCode" type="checkbox" id="chkbox" class="Ges_chkbx"><label style="margin:0px 0px 0px 15px" ; data-bind="text:RoleName"></label>
                                                            <input id="hdnRoleCode" type="hidden" data-bind="attr: { 'value': RoleCode }" />
                                                        </li>
                                                    </ul>
                                                </td>
                                                <td>

                                                    <ul data-bind="foreach: ClientNameList" class="clear chkbxDv style01 ges" style="list-style:none; padding-left:0px;" id="cl-ul">
                                                            <li>
                                                                <input data-bind="checked:UserCode" type="checkbox" id="chkbox1" class="Ges_chkbx"><label style="margin:0px 0px 0px 15px" ; data-bind="text:ClientName"></label>
                                                                <input id="hdnClientCode" type="hidden" data-bind="attr: { 'value': ClientCode }" />
                                                            </li>
                                                        </ul>
                                                </td>
                                                <td>
                                                    @*<ul data-bind="foreach: LocationNameList" class="clear chkbxDv style01 loc" style="list-style:none; padding-left:0px;" id="loc-ul">
                                                            <li>
                                                                <input data-bind="checked:UserCode" type="checkbox" id="chkbox" class="Ges_chkbx"><label style="margin:0px 0px 0px 15px" ; data-bind="text:LocationName"></label>
                                                                <input id="hdnLocationCode" type="hidden" data-bind="attr: { 'value': LocationCode }" />
                                                            </li>
                                                        </ul>*@
                                                </td>
                                            </tr>
                                        </table>
                                        <div class="btnDv">
                                            <input type="hidden" id="user-id">
                                            <button id="btn" type="button" class="btn btn-info btn-sm" data-bind="click:AssignRole">Save</button>
                                        </div>
                                    </div>
                                </div>
                            </section>
                        </div>
                    </div>
                </div>
            </div>

        </section>
    </div>


</div>


<style>
    #testDiv li:not(:first-child) {
        border-top: 1px solid #000;
        border-top-color: #939ea7 !important;       
    }

    .employeeDv .tableDv.upper td {
        padding: 5px 10px;
    }

    .font-size {
        font-size: 12px !important;
    }

    .ui-menu.ui-widget.ui-widget-content.ui-autocomplete.ui-front {
        overflow-y: auto;
        overflow-x: hidden;
    }

    #container {
        display: block;
        position: relative;
        height: 165px;
        width: inherit;
        overflow-y: hidden !important;
        overflow-x: hidden !important;
    }

    .ui-menu-item-wrapper.ui-state-active {
        background: gainsboro;
        border: 0px;
    }

    #container table td {
        padding: 0px !important;
    }

        #container table td p {
            margin: 0px !important;
            margin-bottom: 2px !important;
        }

    .labelsclass {
        width: 20px;
    }

    .ui-menu-item-wrapper {
        width: 400%;
    }

    #ui-id-1 {
        max-width: 350px;
        position: relative;
    }

    li.selected {
        background: gainsboro;
    }

    .employeeDv .tableDv.upper .autoselect-simple ul li:hover {
        background-color: gainsboro;
    }

    .mCSB_container {
        margin-right: 0px;
    }

    #txtUserNam {
        height: 31px !important;
    }

    .chosen-container-single {
        border: 1px solid #e1e4e6 !important;
    }

    .autoselect-simple {
        position: relative;
        background: #fff;
        border-radius: 3px;
    }

        .autoselect-simple i.arow {
            position: absolute;
            right: 15px;
            top: 13px;
            width: 10px;
            height: 10px;
        }

        .autoselect-simple input[type=text] {
            width: 100%;
            padding: 10px;
            font-size: 11px;
            line-height: 12px;
            color: #7b8d92;
        }

        .autoselect-simple ul {
            max-height: 165px;
            border-top: 1px solid #f5f5f5;
            margin-bottom: 10px;
            list-style: none;
        }

            .autoselect-simple ul li {
                position: relative;
                border-bottom: 1px solid #f5f5f5;
                padding: 5px 40px;
                padding-left: 75px;
                cursor: pointer;
            }

        .autoselect-simple.usrlst ul li {
            padding-left: 65px;
        }

        .autoselect-simple ul li figure {
            width: 45px;
            position: absolute;
            left: 20px;
            top: 10px;
        }

        .autoselect-simple.usrlst ul li figure {
            left: 7px;
        }

        .autoselect-simple ul li figure img {
            width: 100%;
            height: auto;
            margin: 0 0 -4px;
        }

        .autoselect-simple ul li h4 {
            font-size: 13px;
            line-height: 14px;
            color: #444e50;
            margin: 5px 0px 5px;
        }

        .autoselect-simple.usrlst ul li h4 {
            margin: 5px 0px 2px;
        }

        .autoselect-simple ul li p {
            font-size: 11px;
            line-height: 12px;
            color: #748285;
            margin: 0px 0px 0px;
        }

            .autoselect-simple ul li p span {
                display: block;
            }

        .autoselect-simple ul li i {
            position: absolute;
            right: 15px;
            top: 0;
            bottom: 0;
            margin: auto;
            width: 24px;
            height: 24px;
            cursor: pointer;
        }

    .radioDv.style01 li {
        display: inline-block;
        margin: 0px 0px 0px 0px;
    }

        .radioDv.style01 li .xRadio {
            width: 16px;
            height: 16px;
            border: 1px solid #d6d6d6;
            margin: 0px 11px -4px 3px;
        }

            .radioDv.style01 li .xRadio:before {
                width: 12px;
                height: 12px;
                left: 2px;
                top: 2px;
            }

    .chkbxDv.style01 .xCheckbox {
        background-position: -100px -127px;
        width: 14px;
        height: 14px;
        background-color: #b5bfc4;
        border-radius: 50%;
    }

        .chkbxDv.style01 .xCheckbox.checked {
            background-position: -100px -127px;
            background-color: #34bde3;
        }

    .ui-autocomplete {
        max-height: 200px;
        overflow-y: hidden;
        /*prevent horizontal scrollbar*/
        overflow-x: hidden;
        /* add padding to account for vertical scrollbar */
        /*padding-right: 20px;*/
        position: relative;
    }

    .checkkall {
        display: inline-block;
        vertical-align: middle;
        margin: 0;
        padding: 0;
        width: 18px;
        height: 18px;
        /*background: url(blue.png) no-repeat;*/
        border: none;
        cursor: pointer;
    }


    /*.employeeDv .style01 li label {
        font-size: 13px;
        line-height: 15px;
        color: #677580;
        font-weight: 400;
    }*/

    .employeeDv {
        background: #fff;
        border: 1px solid #dedfe4;
    }

        .employeeDv .tableDv {
            border-bottom: 1px solid #edeeef;
            padding: 15px 10px;
        }

            .employeeDv .tableDv table {
                width: 100%;
            }

                .employeeDv .tableDv table td {
                    padding: 5px 15px;
                    vertical-align: top;
                }

            .employeeDv .tableDv.upper td {
                padding: 10px 15px;
                font-size: 13px;
                color: #989898;
                line-height: 30px;
            }

            .employeeDv .tableDv.upper input[type="text"] {
                width: 575px;
                border: 1px solid #e1e4e6;
                padding: 7px 10px;
                font-size: 12px;
                color: #989898;
            }

            .employeeDv .tableDv.upper table td figure {
                display: block;
                float: left;
                width: 70px;
                height: 70px;
                border-radius: 2px;
                overflow: hidden;
                margin: 0 15px 0 0;
            }

                .employeeDv .tableDv.upper table td figure img {
                    width: 100%;
                    height: auto;
                }

            .employeeDv .tableDv.upper table td h3 {
                font-size: 15px;
                line-height: 17px;
                color: #333;
                font-weight: 400;
                float: left;
            }

                .employeeDv .tableDv.upper table td h3 b {
                    display: block;
                    font-size: 13px;
                    line-height: 15px;
                    color: #666666;
                    font-weight: 400;
                    margin-top: 3px;
                }

                .employeeDv .tableDv.upper table td h3 small {
                    display: block;
                    font-size: 11px;
                    line-height: 13px;
                    color: #989898;
                }

            .employeeDv .tableDv h2 {
                font-size: 21px;
                line-height: 30px;
                color: #677580;
                font-weight: 300;
                margin: 0;
                padding: 0;
            }

            .employeeDv .tableDv p {
                font-size: 13px;
                color: #939ea7;
                margin: 0 0 10px;
                padding: 0;
            }

            .employeeDv .tableDv .barLinks {
                float: right;
            }

                .employeeDv .tableDv .barLinks a {
                    margin: 0;
                    padding: 0 19px;
                    border-right: 1px solid #b0b0b0;
                    display: block;
                    float: left;
                }

                    .employeeDv .tableDv .barLinks a + a {
                        padding-right: 0;
                        border-right: none;
                    }

                    .employeeDv .tableDv .barLinks a.actv .icon-copyRole {
                        background-position: -202px -873px;
                    }

                    .employeeDv .tableDv .barLinks a.actv .icon-copyEmployee {
                        background-position: -224px -873px;
                    }

            .employeeDv .tableDv.upper .autoselect-simple {
                width: 575px;
            }

                .employeeDv .tableDv.upper .autoselect-simple input[type="text"] {
                    width: inherit;
                }

                .employeeDv .tableDv.upper .autoselect-simple figure {
                    width: 45px;
                }

                .employeeDv .tableDv.upper .autoselect-simple p {
                    font-size: 11px;
                    margin: 0px 0px 6px;
                }

                .employeeDv .tableDv.upper .autoselect-simple ul {
                    background: #f7f7f7;
                    border: 1px solid #ddd;
                    border-top: none;
                    position: absolute;
                    z-index: 10;
                    width: 99.5%;
                }

                    .employeeDv .tableDv.upper .autoselect-simple ul li:hover {
                        background: #f2f2f2;
                    }

        .employeeDv .style01 li {
            font-size: 13px;
            line-height: 15px;
            color: #677580;
            margin: 0 0 15px;
            padding: 0;
        }

            .employeeDv .style01 li label {
                font-size: 13px;
                line-height: 15px;
                color: #677580;
                font-weight: 400;
            }

        .employeeDv .style01 .xCheckbox {
            width: 15px;
            height: 15px;
            display: block;
            float: left;
            margin: 0 15px 0 0;
        }

        .employeeDv .btnDv {
            padding: 25px 25px;
            text-align: right;
        }

            .employeeDv .btnDv a {
                width: 300px;
                padding: 15px;
                text-transform: uppercase;
            }

</style>

<script type="text/javascript">

    var self = this;
    var li = null;

    var UserDO = function (data) {
        var self = this;
        //console.log(data);
        self.UserID = data.UserID;
        self.Designation = data.JobTitle;
        self.DeptName = data.DeptName;
        self.DeptID = data.DeptID;
        self.FullName = data.FullName;
        self.Email = data.Email;
        self.Extension = data.Extension

        //self.UserImage = "";
    };
    var RoleDO = function (data) {
        var self = this;
        self.RoleName = data.Title;
        self.RoleCode = data.Id;
        self.UserCode = data.UserId;
    };
    var ClientDO = function (data) {
        var self = this;
        self.ClientName = data.Title;
        self.ClientCode = data.Id;
        self.UserCode = data.UserId;
    };
    //var LocationDO = function (data) {
    //    var self = this;

    //    self.LocationName = data.LocationName;
    //    self.LocationCode = data.LocationCode;
    //    self.UserCode = data.UserCode;
    //};

    var UserVM = function () {
        var self = this;

        self.onpageload = ko.observable(1);
        self.RoleNameList = ko.observableArray();
        self.ClientNameList = ko.observableArray();
        self.LocationNameList = ko.observableArray();
        self.UserNameList = ko.observableArray();
        self.UserDetailList = ko.observableArray();
        self.UserCode = ko.observable();

        self.AssignRole = function (data, event) {
            var RoleCode = '';
            var ClientCode = '';
            //var LocationCode = '';

            var RoleLength = $('#role-ul li').find('.icheckbox_minimal-blue.checked').length;
            if (RoleLength > 0) {
                for (var i = 0; i < RoleLength; i++) {
                    if (typeof $($('#role-ul li').find('.icheckbox_minimal-blue.checked')[i]).siblings('#hdnRoleCode').val() != 'undefined') {
                        RoleCode += $($('#role-ul li').find('.icheckbox_minimal-blue.checked')[i]).siblings('#hdnRoleCode').val();
                        if (i != RoleLength - 1) {
                            RoleCode += ',';
                        }
                    }
                }
            }

            var GesLength = $('#cl-ul li').find('.icheckbox_minimal-blue.checked').length;
            if (GesLength > 0) {
                for (var i = 0; i < GesLength; i++) {
                    if (typeof $($('#cl-ul li').find('.icheckbox_minimal-blue.checked')[i]).siblings('#hdnClientCode').val() != 'undefined') {
                        ClientCode += $($('#cl-ul li').find('.icheckbox_minimal-blue.checked')[i]).siblings('#hdnClientCode').val();
                        if (i != GesLength - 1) {
                            ClientCode += ',';
                        }
                    }
                }
            }

            //var LocLength = $('#loc-ul li').find('.icheckbox_minimal-blue.checked').length;
            //if (LocLength > 0) {
            //    for (var i = 0; i < LocLength; i++) {
            //        if (typeof $($('#loc-ul li').find('.icheckbox_minimal-blue.checked')[i]).siblings('#hdnLocationCode').val() != 'undefined') {
            //            LocationCode += $($('#loc-ul li').find('.icheckbox_minimal-blue.checked')[i]).siblings('#hdnLocationCode').val();
            //            if (i != LocLength - 1) {
            //                LocationCode += ',';
            //            }
            //        }
            //    }
            //}

            var RoleCodes = RoleCode.replace(/,\s*$/, "");
            //var LocationCodes = LocationCode.replace(/,\s*$/, "");
            var ClientCodes = ClientCode.replace(/,\s*$/, "");
            var UserCode = self.UserCode();

            Helper.AjaxCall.PostCall(AdminVD+'/Catalog/InsertRole', { 'RoleCode': RoleCodes, 'UserCode': $("#user-id").val(),'RoleTypeId': 1 },
            function (result) {
                if (result != 0) {

                    $("#modalbody").html();
                    $("#myModal").modal('show');

                    setTimeout(function () {
                        $('#myModal').modal('hide');
                    }, 2000);
                }
            });

            Helper.AjaxCall.PostCall('/Catalog/InsertRole', { 'RoleCode': ClientCodes, 'UserCode': $("#user-id").val(),'RoleTypeId': 2 },
            function (result) {
                if (result != 0) {

                    $("#modalbody").html();
                    $("#myModal").modal('show');

                    setTimeout(function () {
                        $('#myModal').modal('hide');
                    }, 2000);
                }
            });

            //Helper.AjaxCall.PostCall('/Catalog/InsertLocation', { 'LocationCode': LocationCodes, 'UserCode': $("#user-id").val() },
            //function (result) {
            //    if (result != 0) {

            //        $("#modalbody").html();
            //        $("#myModal").modal('show');

            //        setTimeout(function () {
            //            $('#myModal').modal('hide');
            //        }, 2000);
            //    }
            //});
        }

        $("#txtUserNam").autocomplete({

            minLength: 3,
            appendTo: "#container",
            source: function (request, response) {
                $.ajax({

                    url: "/Catalog/GetAssignRoleAsync",
                    type: "GET",
                    dataType: "json",
                    data: {
                        DeptCode: $('#departmentlst').val(),
                        FullName: $('#txtUserNam').val()
                    },
                    success: function (data) {

                        $("#btn").hide();
                        $("#container").show();
                        $('.ui-autocomplete').scrollTop(0);

                        var UserDetails = (data).Table;

                        if (UserDetails.length == 0) {
                            $('#tab2').hide();
                            $('#container').hide();
                            $('#tab1').hide();
                        }

                        else {
                            var tempdata = [];
                            for (var i = 0; i < UserDetails.length; i++) {
                                var obj = new UserDO(UserDetails[i]);
                                tempdata.push(obj);
                            }

                            response(tempdata);
                            $('#tab1').show();
                        }

                    }

                });
            },

            focus: function (event, ui) {
                $("#user").val(ui.item.FullName);
                return false;
            },

            close: function () {
                $('#container').hide();
            },

            select: function (event, ui) {
                $('#txtUserNam').val('');
                $('#tab1').show();
                $('#tab2').show();
                $("#checkAll").show();
                $("#checkAllroles").show();
                $("#checkAlllocs").show();
                $("#btn").show();
                $("#lbl").show();
                $("#rlbl").show();
                $("#llbl").show();
                //$("#user-image").show();

                Helper.AjaxCall.GetCallWithoutLoaderImage(AdminVD + '/Catalog/GetRoleDetails', { 'UserCode': ui.item.UserID }, function (data) {

                    var RoleDetails = (data).Table;

                    var temp1 = [];

                    for (var i = 0; i < RoleDetails.length; i++) {
                        var obj = new RoleDO(RoleDetails[i]);
                        temp1.push(obj);
                    }

                    $("#roles").show();
                    self.RoleNameList(temp1);
                    if (self.RoleNameList().length > 0) {

                        for (var i = 0; i <= self.RoleNameList().length - 1; i++)
                            if (self.RoleNameList()[i].UserCode != null || self.RoleNameList()[i].UserCode != undefined) {
                                var c = self.RoleNameList()[i].UserCode;
                                $('.chkbxDv').find('input[type=checkbox]:checked').length;
                            }
                    }

                    $('.Ges_chkbx').iCheck({
                        checkboxClass: 'icheckbox_minimal-blue'
                    });
                });

                Helper.AjaxCall.GetCallWithoutLoaderImage(AdminVD + '/Catalog/GetClientDetails', { 'UserCode': ui.item.UserID }, function (data) {

                    var ClientDetails = (data).Table;

                    var temp1 = [];

                    for (var i = 0; i < ClientDetails.length; i++) {
                        var obj = new ClientDO(ClientDetails[i]);
                        temp1.push(obj);
                    }
                    $("#clients").show();
                    self.ClientNameList(temp1);
                    if (self.ClientNameList().length > 0) {

                        for (var i = 0; i <= self.ClientNameList().length - 1; i++)
                            if (self.ClientNameList()[i].UserCode != null || self.ClientNameList()[i].UserCode != undefined) {
                                var c = self.ClientNameList()[i].UserCode;

                                $('.chkbxDv').find('input[type=checkbox]:checked').length;
                            }
                    }

                    $('.Ges_chkbx').iCheck({
                        checkboxClass: 'icheckbox_minimal-blue'
                    });
                    $('.iCheck-helper').click(function (event) {
                        if (!$(this).parent().hasClass('checked')) {
                            if ($(this).parents('ul').hasClass('ges')) {
                                $('#checkAll').prop('checked', false);
                            }
                            //if ($(this).parents('ul').hasClass('loc')) {
                            //    $('#checkAlllocs').removeAttr('checked');
                            //}
                        }
                        if ($(this).parent().hasClass('checked')) {
                            if ($(this).parents('ul').hasClass('ges')) {
                                var total_chkbx = $(this).parents('ul').find('.icheckbox_minimal-blue').size();
                                var total_chkd = $(this).parents('ul').find('.icheckbox_minimal-blue.checked').size();
                                if (total_chkbx == total_chkd) {
                                    $('#checkAll').trigger('click');
                                }
                            }
                            //if ($(this).parents('ul').hasClass('loc')) {
                            //    var total_chkbx = $(this).parents('ul').find('.icheckbox_minimal-blue').size();
                            //    var total_chkd = $(this).parents('ul').find('.icheckbox_minimal-blue.checked').size();
                            //    if (total_chkbx == total_chkd) {
                            //        $('#checkAlllocs').trigger('click');
                            //    }
                            //}
                        }

                    });



                });

                //Helper.AjaxCall.GetCallWithoutLoaderImage(AdminVD + '/Catalog/GetLocationDetails', { 'UserCode': ui.item.UserID }, function (data) {

                //    var LocationDetails = (data).Table;

                //    var temp1 = [];

                //    for (var i = 0; i < LocationDetails.length; i++) {
                //        var obj = new LocationDO(LocationDetails[i]);
                //        temp1.push(obj);

                //    }
                //    $("#location").show();
                //    self.LocationNameList(temp1);
                //    if (self.LocationNameList().length > 0) {

                //        for (var i = 0; i <= self.LocationNameList().length - 1; i++)
                //            if (self.LocationNameList()[i].UserCode != null || self.LocationNameList()[i].UserCode != undefined) {
                //                var c = self.LocationNameList()[i].UserCode;

                //                $('.chkbxDv').find('input[type=checkbox]:checked').length;
                //            }
                //    }

                //    $('.Ges_chkbx').iCheck({
                //        checkboxClass: 'icheckbox_minimal-blue'
                //    });          

                //});

                $("#name").html(ui.item.FullName);
                $("#user-id").val(ui.item.UserID);
               // $("#desg").html(ui.item.Designation);
                $("#dept").html(ui.item.DeptName);
               // $("#email").html(ui.item.Email);
                //$("#user-image").attr("src", ui.item.UserImage);
                $('#checkAll').prop('checked', false);
                $('#checkAllroles').prop('checked',false)
               // $('#checkAlllocs').removeAttr('checked');
                return false;
            }
        })

     .autocomplete("instance")._renderItem = function (ul, item) {

         //return $("<li id='test' style='display:block; padding:0px !important;' >")
         //  .append("<div><table><tr><td style='line-height:5px !important; padding-left:0px;width:100% !important'><b><p style=margin-top:5px;>" + item.FullName + "</p></b><br><p>" + item.Designation + "</p><p>" + item.DeptName + "</p><p>" + item.Email + " Ext: "+item.Extension+" </p></td></tr></table></div>")
         //  .appendTo(ul);
         return $("<li id='test' style='display:block; padding-left:0px !important; margin-left:-22px !important;'>")
          .append("<div><table><tr><td style='line-height:5px !important; width:100% !important'><b><p style=margin-top:5px;>" + item.FullName + "</p></b><p>" + item.DeptName + "</p></td></tr></table></div>")
          .appendTo(ul);
     };


        $('#checkAll').on("click", function () {
            if ($('#checkAll').is(':checked') == true) {
                $('#cl-ul li').each(function () { $(this).find('.icheckbox_minimal-blue').addClass('checked'); })
            }
            else {
                $('#cl-ul li').each(function () { $(this).find('.icheckbox_minimal-blue').removeClass('checked'); })
            }

        })

        $('#checkAllroles').on("click", function () {
            if ($('#checkAllroles').is(':checked') == true) {
                $('#role-ul li').each(function () { $(this).find('.icheckbox_minimal-blue').addClass('checked'); })
            }
            else {
                $('#role-ul li').each(function () { $(this).find('.icheckbox_minimal-blue').removeClass('checked'); })
            }
        })

        $('#checkAlllocs').on("click", function () {
            if ($('#checkAlllocs').is(':checked') == true) {
                $('#loc-ul li').each(function () { $(this).find('.icheckbox_minimal-blue').addClass('checked'); })
            }
            else {
                $('#loc-ul li').each(function () { $(this).find('.icheckbox_minimal-blue').removeClass('checked'); })
            }

        })

    }

    var UserVMObj = new UserVM();
    $(document).ready(function () {
        $('checkAllroles').hide();
        $('#txtUserNam').val('');
        //$("#user-image").hide();
        $("#btn").hide();
        $("#lbl").hide();
        $("#rlbl").hide();
        $("#llbl").hide();
        $("#checkAll").hide();
        $("#myModal").hide();
        $("#roles").hide();
        $("#location").hide();
        $("#clients").hide();
        $("#success-alert").hide();
        $("#checkAllroles").hide();
        $("#checkAlllocs").hide();
        ko.applyBindings(UserVMObj, $('.UserVM')[0]);
    })
</script>

+ ExporterCompany

@model JTJapan.Core.AdminArea.ViewModel.CatalogueResponseModel
@{
    ViewBag.Title = "Exporter Company";
}

<div id="AddExporter">
</div>

<div class="content-wrapper">
    <div id="ReportList" class="row" style="margin-left:0px; margin-right:0px;">
        <section class="content">
            <div class="box">
                <div class="box-header">
                    <h3 class="box-title">Exporter Company</h3>
                    <div class="box-tools pull-right">
                        <a onclick="addExporterCompany()" class="btn btn-primary btn-sm">Add Exporter Company</a>
                    </div>
                </div>
                <div class="box-body">
                    <table class="table table-bordered table-striped" id="dtExporterCompany">
                        <thead>
                            <tr>
                                <th style="width:4%">#</th>
                                <th style="width:14%"> Exporter Company</th>
                                <th style="width:12%"> Phone #</th>
                                <th style="width:12%"> Fax #</th>
                                <th style="width:20%"> Address</th>
                                <th style="width:16%">Description</th>
                                <th style="width:10%"> Update Date</th>
                                <th style="width:12%">Action</th>
                            </tr>
                        </thead>
                        <tbody class="tbDetail">
                            @if (Model.CatalogueList != null && Model.CatalogueList.Count() != 0)
                            {

                                foreach (var item in Model.CatalogueList.Select((value, i) => new { i = i + 1, value }))
                                {
                                    <tr>
                                        <td>@item.i </td>
                                        <td>@item.value.Title</td>
                                        <td>@item.value.Phone</td>
                                        <td>@item.value.Fax</td>
                                        <td>@item.value.Address </td>
                                        <td>@item.value.Descriptions</td>
                                        <td>@string.Format("{0:MMM dd, yyyy}", item.value.UpdateDate) </td>
                                        <td>
                                            <button class="btn btn-primary btn-xs" onclick="edit(@item.value.Id)">Edit</button>
                                            <button class="btn btn-danger btn-xs" data-toggle="modal" data-target="#myModal" value="@(item.value.Id)" onclick="Delete(this)">Delete</button>
                                        </td>
                                    </tr>
                                }
                            }

                        </tbody>
                    </table>

                </div>
                <!-- Modal -->
                <div id="myModal" class="modal fade" role="dialog">
                    <div class="modal-dialog">
                        <!-- Modal content-->
                        <div class="modal-content">

                            <div class="modal-header" style="background-color: #D73925; color: white">
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                <h4 class="modal-title">Warning</h4>
                            </div>
                            <div class="modal-body">
                                <p>Are you sure you want to delete ?</p>
                            </div>
                            <div class="modal-footer">
                                <a class="btn btn-danger" data-dismiss="modal" id="btnDelete">
                                    Yes
                                </a>
                                <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
</div>

<script type="text/javascript">
    var ExporterCompanyId;
    $(function () {
        $('#dtExporterCompany').DataTable();
    })
    function Delete(Data) {
        ExporterCompanyId = $(Data).attr('value');
    }
    $(document).ready(function () {

        $("body").delegate("#btnDelete", "click", function () {
            $.ajax({
                async: true,
                type: 'POST',
                cache: false,
                data: { Id: ExporterCompanyId },
                url: 'DeleteExporterCompany',
                success: function (data) {
                    if (data == "success") {
                        Helper.Methods.ShowPopUp('Success', 'Exporter company deleted successfully');
                        setTimeout(function () {
                            location.reload();
                        }, 500);
                    }
                }
            });
        });

    });

    function addExporterCompany() {
        $.ajax({
            async: true,
            type: 'GET',
            cache: false,
            data: { Id: null},
            dataType: 'html',   //response format
            contentType: 'application/json; charset=utf-8', //request format
            crossDomain: true,
            url: '@Url.Action("_ExporterCompany")',
            success: function (data) {
                $('#AddExporter').html(data);
                $('#modal-AddExporter').modal('show');
                $('.modal-body').height($('.col-md-12.AddExporter').height() + 10);
            },
        });
    }

    function edit(id) {
        var ExporterCompanyId = id;
        $.ajax({
            async: true,
            type: 'GET',
            cache: false,
            data: { Id: ExporterCompanyId},
            dataType: 'html',   //response format
            contentType: 'application/json; charset=utf-8', //request format
            crossDomain: true,
            url: '@Url.Action("_ExporterCompany")',
            success: function (data) {
                $('#AddExporter').html(data);
                $('#modal-AddExporter').modal('show');
                $('.modal-body').height($('.col-md-12.AddExporter').height() + 10);
            }
        });
    }
</script>



+PurchaseVendor

@model JTJapan.Core.AdminArea.ViewModel.CatalogueResponseModel
@{ ViewBag.Title = "Purchase Vendor"; }

<style>
    button {
        font-size: 14px; 
    }
</style>

<div class="content-wrapper">
    <section class="content">
        <div id="ReportList" class="row" style="margin-left:0px; margin-right:0px;">
            <div class="box">
                <div class="box-header">
                    <h3 class="box-title">Purchase Vendor</h3>
                    <button style="float:right" id="addPurchaseVendorButton" data-toggle="modal" data-target="#addOrUpdatePurchaseVendorModel" class="btn btn-primary btn-sm">Add Purchase Vendor</button>
                </div>
                <div class="box-body">
                    <table class="table table-bordered table-striped" id="dtPurchaseVendor">
                        <thead>
                            <tr>
                                <th style="width:5%">#</th>
                                <th style="width:15%">Vendor</th>
                                <th style="width:60%">Address</th>
                                <th style="width:10%">Action Date</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody class="tbDetail">
                            @foreach (var item in Model.CatalogueList.Select((value, i) => new { i = i + 1, value }))
                            {
                                <tr>
                                    <td>
                                        @item.i

                                        @Html.HiddenFor(items => items.CatalogueList[item.i - 1].Id,
                                         new { @class = "purchaseVendorId" })
                                    </td>
                                    <td>@item.value.Title</td>
                                    <td>@Html.Raw(item.value.Address)</td>
                                    <td>@string.Format("{0:MMM dd, yyyy}", item.value.UpdateDate)</td>
                                    <td>
                                        <button data-toggle="modal" data-target="#addOrUpdatePurchaseVendorModel" class="btn btn-primary btn-xs editButton">Edit</button>
                                        <button data-toggle="modal" data-target="#deleteModel" class="btn btn-danger btn-xs deleteButton">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </section>
</div>

<div class="modal fade" role="dialog" id="addOrUpdatePurchaseVendorModel">
    @* Partial view will be load on event handler *@
</div>

<div class="modal fade" role="dialog" id="deleteModel">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #D73925; color: white">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Warning</h4>
            </div>
            <div class="modal-body">
                <p>Are you sure to delete vendor ?</p>
            </div>
            <div class="modal-footer">
                <a class="btn btn-danger" data-dismiss="modal" id="btnDelete">
                    Yes
                </a>
                <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    $(document).ready(function () {

        var PurchaseVendorId;
        $('#dtPurchaseVendor').DataTable();

        $('#addPurchaseVendorButton').click(function () {

            var data = {};
            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',   //response format
                contentType: 'application/json; charset=utf-8', //request format
                crossDomain: true,
                url: '@Url.Action("_PurchaseVendor")',
                success: function (data) {
                    $('#addOrUpdatePurchaseVendorModel').html(data);
                    $('#addOrUpdatePurchaseVendorModel .modal-title').text('Add Purchase Vendor');
                    $('#btnAdd').val('Add');
                }
            });
        });

        $('#dtPurchaseVendor').on('click', '.editButton', function () {

            var data = {};
            data.Id = $(this).closest('tr').find('.purchaseVendorId').val();

            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',   //response format
                contentType: 'application/json; charset=utf-8', //request format
                crossDomain: true,
                url: '@Url.Action("_PurchaseVendor")',
                success: function (data) {
                    $('#addOrUpdatePurchaseVendorModel').html(data);
                    $('#addOrUpdatePurchaseVendorModel .modal-title').text('Update Purchase Vendor');
                    $('#btnAdd').val('Update');
                }
            });
        });

        $('#dtPurchaseVendor').on('click', '.deleteButton', function () {
            PurchaseVendorId = $(this).closest('tr').find('.purchaseVendorId').val();
        });

        $("#deleteModel").on("click", "#btnDelete", function () {

            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: { id: PurchaseVendorId },
                url: 'DeletePurchaseVendor',
                success: function (data) {
                    if (data.IsValid) {
                        Helper.Methods.ShowPopUp('Success', 'Vendor deleted successfully!');
                        setTimeout(function () {
                            location.reload();
                        }, 500);
                    }
                }
            });
        });
    });
</script>

+ RoleReport
@{
    ViewBag.Title = "Report";
}

<div class="content-wrapper">
    <div id="ReportList" class="row" style="margin-left:0px; margin-right:0px;">
        <section class="content">
            <div class="row">
                <div class="col-xs-12">
                    <div class="box box-info UserVM">
                        <div class="box-header">
                            <h3 class="box-title">Role Report</h3>

                        </div>
                        <!-- /.box-header -->
                        <div class="box-header">
                            <div class="col-xs-6">
                                <div class="input-group input-group-sm">
                                    <input id="txtSearchUser" type="text" class="form-control" placeholder="Search user" maxlength="30" data-bind="event:{keypress: $root.ApplyFilterEnter}">
                                    <span class="input-group-btn">
                                        <button class="btn btn-info btn-flat" type="button" data-bind="click : function() { ApplyFilter()}"><i class="glyphicon glyphicon-search"></i></button>
                                    </span>
                                </div>
                            </div>
                            <div class="col-xs-6">
                            </div>
                        </div>
                        <div class="box-body table-responsive no-padding">
                            <table class="table table-bordered" style="width: 98%; margin: 10px">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>User Information</th>
                                        <th>User Contact</th>
                                        <th style="padding:0 136px 3px 8px; vertical-align: middle;">Roles</th>
                                        <th style="padding:0 136px 3px 8px; vertical-align: middle;">Clients</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!--ko foreach:UserList -->
                                    <tr>
                                        <td data-bind="text:Sno"></td>
                                        <td>

                                            <b> <span data-bind="text: Fullname"></span> </b> <br />
                                            <span data-bind="text: JobTitle"></span><br />
                                            <span data-bind="text: DeptName"></span><br />
                                        </td>
                                        <td>
                                            <span data-bind="text: Email"></span> <br />
                                            Ext: <span data-bind="text: Extension"></span>
                                        </td>
                                        <td data-bind="foreach: $data.RoleName" style="padding: 0px 0px 0px 11px; vertical-align: middle;">
                                            <span data-bind="html:RoleName+ '</br>'"></span>
                                        </td>
                                        <td data-bind="foreach: $data.ClientName" style="padding: 0px 0px 0px 11px; padding-bottom: 12px !important; vertical-align: middle; ">
                                            <span data-bind="html:ClientName+ '</br>'"></span>
                                        </td>

                                    </tr>
                                    <!-- /ko -->
                                </tbody>
                            </table>
                        </div>
                        <div id="NoRecord" class="alert text-center" role="alert" style="color: red; display: none">No record(s) found</div>
                        <div class="box-footer clearfix" id="paging-footer" style="display: none">
                            <div class="col-xs-5">
                                <!--ko text:PageText -->
                                <!-- /ko -->
                            </div>
                            <div class="col-xs-1 text-center">
                                Page Size
                            </div>
                            <div class="col-xs-2">
                                <select class="form-control page-size" style="width: 60px; padding: 2px 2px; height: 28px;">
                                    <option>10</option>
                                    <option>25</option>
                                    <option>50</option>
                                    <option>100</option>
                                </select>
                            </div>
                            <div class="col-xs-4" data-bind="visible:PageList().length > 0">
                                <ul class="pagination pagination-sm no-margin pull-right">
                                    <li data-bind="css:{'disabled':(PageNumber() == 1)}"><a href="#" data-bind="click : function() { GoToPage(1)}" data-toggle="tooltip" data-placement="top" title="First Page"><i class="fa fa-fw fa-angle-double-left"></i></a></li>
                                    <li data-bind="css:{'disabled':(PageNumber() == 1)}"><a href="#" data-bind="click : function() { GoToPage(PageNumber() - 1)}"><i class="fa fa-fw fa-angle-left" data-toggle="tooltip" data-placement="top" title="Previous Page"></i></a></li>
                                    <!--ko foreach:PageList -->
                                    <li>
                                        <a href="#" data-bind="click : function() { $root.GoToPage(PageNo)}, css:{'activePage':(PageNo == $root.PageNumber())}">
                                            <!--ko text:PageNo -->
                                            <!-- /ko -->
                                        </a>
                                    </li>
                                    <!-- /ko -->
                                    <li data-bind="css:{'disabled':(PageNumber() == TotalPages())}"><a href="#" data-bind="click : function() { GoToPage(PageNumber() + 1)}" data-toggle="tooltip" data-placement="top" title="Next Page"><i class="fa fa-fw fa-angle-right"></i></a></li>
                                    <li data-bind="css:{'disabled':(PageNumber() == TotalPages())}"><a href="#" data-bind="click : function() { GoToPage(TotalPages())}" data-toggle="tooltip" data-placement="top" title="Last Page"><i class="fa fa-fw fa-angle-double-right"></i></a></li>
                                </ul>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </section>
    </div>


</div>

<script type="text/javascript">
    var UserDO = function () {
        var self = this;
        self.RoleName = ko.observableArray();
        self.ClientName = ko.observableArray();
        self.Sno;
        self.JobTitle;
        self.DeptName;
        self.EncryptedStakeholderCode;
        self.Fullname;
        self.Extension;
        self.Email
        //self.UserImage;
    }

    var RoleDo = function () {
        var self = this;
        self.RoleName;
    }
    var ClientDo = function () {
        var self = this;
        self.ClientName;
    }
    
    var UserVM = function () {
        var self = this;

        /*Paging start*/
        self.PageText = ko.observable();
        self.PageList = ko.observableArray();
        self.TotalPages = ko.observable();
        self.PageSize = ko.observable(10);
        self.PageNumber = ko.observable(1);
        self.IsError = ko.observable();

        function PageDO(pageNo) {
            var self = this;
            self.PageNo = pageNo;
        };

        self.GoToPage = function (pageNum) {
            if (pageNum > self.TotalPages() || pageNum <= 0 || self.PageNumber() == pageNum) {
                return false;
            }
            else {
                self.PageNumber(pageNum);
                self.LoadData();
            }
        }

        self.LoadPages = function (totalResults) {
            self.PageList([]);

            self.PageText("Showing " + ((self.PageNumber() * self.PageSize()) - self.PageSize() + 1) + " - "
                + ((self.PageNumber() * self.PageSize()) >= totalResults ? totalResults : (self.PageNumber() * self.PageSize()))
                + " of " + totalResults + " items");
            if (totalResults > self.PageSize()) {
                var TotalPages = Math.ceil(totalResults / self.PageSize());
                self.TotalPages(TotalPages);
                if (self.PageNumber() == 1) {
                    self.PageList.push(new PageDO(self.PageNumber()));
                    if (TotalPages >= self.PageNumber() + 1)
                        self.PageList.push(new PageDO(self.PageNumber() + 1));
                    if (TotalPages >= self.PageNumber() + 2)
                        self.PageList.push(new PageDO(self.PageNumber() + 2));
                }
                else if (self.PageNumber() > 1 && self.PageNumber() != TotalPages) {
                    self.PageList.push(new PageDO(self.PageNumber() - 1));
                    self.PageList.push(new PageDO(self.PageNumber()));
                    if (TotalPages >= self.PageNumber() + 1)
                        self.PageList.push(new PageDO(self.PageNumber() + 1));
                }
                else if (self.PageNumber() == TotalPages) {
                    if (self.PageNumber() - 2 >= 1)
                        self.PageList.push(new PageDO(self.PageNumber() - 2));
                    if (self.PageNumber() - 1 >= 1)
                        self.PageList.push(new PageDO(self.PageNumber() - 1));
                    self.PageList.push(new PageDO(self.PageNumber()));
                }
            }
        }

        $(document).delegate('.page-size', 'change', function () {
            self.PageSize($(this).val());
            self.PageNumber(1);
            self.LoadData();
        });

        /*Paging end*/
        self.SearchUser = ko.observable();
        self.UserList = ko.observableArray();
        self.TotalResult = ko.observable(0);

        self.ApplyFilter = function (data, category) {
            self.SearchUser($('#txtSearchUser').val());
            if ($('#txtSearchUser').val().length > 2 || $('#txtSearchUser').val().length == 0) {
                self.PageNumber(1);
                self.PageSize(10);
                self.LoadData();
            }
        };

        self.ApplyFilterEnter = function (data, event) {
            if ($(event.currentTarget).val().length > 2 || $(event.currentTarget).val().length == 0) {
                if (event.which == 13) {
                    self.PageNumber(1);
                    self.PageSize($('.page-size').val());
                    self.ApplyFilter();
                }
            }
            return true;
        }

        self.LoadData = function () {
            self.UserList([]);
            $('#NoRecord').hide();
            $('#paging-footer').show();

            Helper.AjaxCall.GetCallWithoutLoaderImage(AdminVD + '/Catalog/GetInfoAsync', { 'pageNo': self.PageNumber(), 'pageSize': self.PageSize(), 'FullName': self.SearchUser() }, function (data) {

                var TotalResults = (data.Table1)[0].TotalResult;

                var StakeHolder = data.Table;
                var RoleName = data.Table2;
                var ClientName = data.Table3;

                self.LoadPages(TotalResults);
                self.TotalResult(TotalResults);

                var temp = self.UserList()

                for (var i = 0; i < StakeHolder.length; i++) {
                    var Obj = new UserDO();
                    Obj.Fullname = StakeHolder[i].Fullname;
                    Obj.JobTitle = StakeHolder[i].JobTitle;
                    Obj.DeptName = StakeHolder[i].DeptName;

                    Obj.Email = StakeHolder[i].Email;
                    Obj.Extension = StakeHolder[i].Extension;


                    Obj.Sno = StakeHolder[i].SNo;
                    //Obj.UserImage = (StakeHolder[i].IsSupportUser == 1 ? EmployeeImageSupport + StakeHolder[i].ImageCode + '.jpg' : EmployeeImageOffice + StakeHolder[i].ImageCode + '.jpg');
                    // Obj.ImageCode = StakeHolder[i].ImageCode;
                    for (var j = 0; j < RoleName.length; j++) 
                    {
                        if (StakeHolder[i].UserID == RoleName[j].UserID) {
                            var OBJRole = new RoleDo()
                            OBJRole.RoleName = RoleName[j].RoleName;
                            Obj.RoleName.push(OBJRole);
                        }
                    }

                    for (var j = 0; j < ClientName.length; j++) {
                        if (StakeHolder[i].UserID == ClientName[j].UserID) {
                            var OBJClient = new ClientDo()
                            OBJClient.ClientName = ClientName[j].ClientName;
                            Obj.ClientName.push(OBJClient);
                        }
                    }


                    temp.push(Obj);
                }
                window.scrollTo(0, 0);
                self.UserList.valueHasMutated();
                $('.pagination li a').tooltip('destroy');

                if (self.UserList().length == 0) {
                    $('#NoRecord').show();
                    $('#paging-footer').hide();
                }
            });
        };

        self.LoadData();

    }



    var UserVMObj = new UserVM();
    $(document).ready(function () {
        ko.applyBindings(UserVMObj, $('.UserVM')[0]);
    });
</script>


+RoleSetup

@model  Automobile.Admin.Models.AdminRole
@{
    ViewBag.Title = "Role Setup";
}
 <style>
     .select2-container--default .select2-selection--multiple .select2-selection__choice {
         background-color: #3c8dbc;
         border-color: #367fa9;
         color: #fff;
     }
 </style>
<div class="content-wrapper">
    <div class="row RoleSetupVM">
        <div class="col-xs-12">

            <!-- Error Message -->
            @if (Model.IsError)
        {
                <div class="alert alert-danger alert-dismissable">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                    @Model.ErrorMessage
                </div>
        }

            @if (TempData["Success"] != null)
        {
                <div class="alert alert-success alert-dismissable" id="successAlert">
                    @TempData["Success"]
                </div>
        }

            @if (TempData["DeleteRole"] != null)
        {
                <div class="alert alert-danger alert-dismissable" id="deleteAlert">
                    @TempData["DeleteRole"]
                </div>
        }
        @if (TempData["alreadyExist"] != null)
        {
            <div class="alert alert-info alert-dismissable" id="existAlert">
                @TempData["alreadyExist"]
            </div>
        }

            <div class="box box-info">
                <div class="box-header with-border">
                    <h3 class="box-title">
                        Role Setup
                    </h3>
                </div>

                <!-- Panel Start -->

                <div class="container" style="width: 100%">
                    <br />
                    <div class="panel-group">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h4 class="panel-title" style="padding-right: 2%">
                                    <span><b>Roles</b></span>
                                    <span data-toggle="modal" data-target="#Role" data-bind="click:clearTextbox">
                                        <button type="button" class="btn btn-primary pull-right" style="margin-top: -0.70% !important;" title="Add Role" data-toggle="tooltip">
                                            <span class="glyphicon glyphicon-plus-sign"></span> Add Role
                                            @*<i class="glyphicon glyphicon-plus-sign pull-right" style="color: #3C8DBC; margin-right: 2%" data-toggle="tooltip" data-placement="top" title="Add Role"></i> Add Role*@
                                        </button>
                                     </span>
                                </h4>
                            </div>
                        </div>

                        <!--ko foreach: RolesList -->
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h4 class="panel-title">
                                    <span data-toggle="collapse" data-bind="attr:{'data-target':'#RoleCode'+RoleCode}, click: $root.iconToggle"><i class="glyphicon glyphicon-plus" data-toggle="tooltip" data-placement="left" title="Show Screens" style="color: #3C8DBC; cursor: pointer"></i></span>
                                    <span data-bind="text: RoleName" style="padding-left: 1%"></span>
                                    <span data-toggle="modal" data-target="#delRole" data-bind="click: function(){$root.RoleData($data)}"><i class="glyphicon glyphicon-remove-sign pull-right" data-toggle="tooltip" data-placement="top" title="Delete Role" style="color: red"></i></span>
                                    <span data-toggle="modal" data-target="#editRole" data-bind="click: function(){$root.RoleData($data)}"><i class="glyphicon glyphicon-edit pull-right" data-toggle="tooltip" data-placement="top" title="Edit Role" style="color: #3C8DBC; margin-right: 2%"></i></span>
                                    <span data-toggle="modal" data-target="#Screen" data-bind="click: function(){$root.RoleData($data)}"><i class="glyphicon glyphicon-plus-sign pull-right" data-toggle="tooltip" data-placement="left" title="Add Screen" style="color: #3C8DBC; margin-right: 2%"></i></span>

                                </h4>
                            </div>
                        </div>
                        <div data-bind="attr:{'id':'RoleCode'+RoleCode}" class="panel-collapse collapse">
                            <ul class="list-group border-right border-left center-block" style="width: 95%" data-bind="foreach:$data.NavigationArray, visible:$data.NavigationArray().length > 0">
                                <li class="list-group-item">
                                    <span data-bind="text: NavigationName"></span>
                                    <span data-toggle="modal" data-target="#delScreen" data-bind="click: function(){$root.NavigationData($data)}"><i class="glyphicon glyphicon-remove-sign pull-right" data-toggle="tooltip" data-placement="left" title="Delete Screen" style="color: red"></i></span>
                                </li>
                            </ul>
                            <ul class="list-group border-right border-left center-block" style="width: 95%" data-bind="visible:$data.NavigationArray().length == 0">
                                <li class="list-group-item">
                                    <span style="color: red">No screen found</span>
                                </li>
                            </ul>
                        </div>
                        <!-- /ko -->

                    </div>
                </div>
            </div>

            <!-- Modal of Add Role -->
            <div class="modal fade" id="Role" role="dialog" style="border-radius: 10px">
                <div class="modal-dialog">

                    <!-- Modal content-->
                    <form class="form-horizontal" method="post">
                        @Html.AntiForgeryToken()
                        <div class="modal-content">
                            <div class="modal-header" style="background-color: #3C8DBC; color: white">
                                <button type="button" class="glyphicon glyphicon-remove-sign close" data-dismiss="modal" style="color: white"></button>
                                <h4 class="modal-title">Add Role</h4>
                            </div>
                            <div class="modal-body">
                                <p>Role</p>
                                @Html.TextBoxFor(m => m.RoleName, new { placeholder = "Enter role name", style = "border-radius: 5px", @class = "form-control", @id = "RoleName", @maxlength = "45", @required = "required" })
                                @Html.ValidationMessageFor(m => m.RoleName, "", new { @class = "text-red" })

                            </div>
                            <div class="modal-footer">
                                <button type="submit" id="addRoleButton" onsubmit="return validateForm();" class="btn btn-default" data-backdrop="static" style="background-color: #3C8DBC; color: white">Add</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Modal of Add Screen -->
            <div class="modal fade" id="Screen" role="dialog" style="border-radius: 10px">
                <div class="modal-dialog">
                    @using (Html.BeginForm("AddScreen", "Catalog", FormMethod.Post, new { roleCode = Model.roleCode, Screen = Model.Screen, @class = "form-horizontal" }))
                {
                        <div class="modal-content">
                            <div class="modal-header" style="background-color: #3C8DBC; color: white">
                                <button type="button" class="glyphicon glyphicon-remove-sign close" data-dismiss="modal" style="color: white"></button>
                                <h4 class="modal-title">Add Screen</h4>
                            </div>
                            <div class="modal-body form-group">
                                <div class="col-md-12">
                                    <p>@Html.NameFor(m => m.Screen)</p>
                                    <select id="NavigationsList" name="Screen" data-bind="options: ScreensList, optionsText: 'NavigationName', optionsValue: 'NavigationCode'" class="form-control select2" multiple="multiple" data-placeholder="Please Select" style="width: 100%; border-radius: 5px" required="required"></select>
                                    @Html.TextBoxFor(m => m.roleCode, new { style = "display: none", data_bind = "value: CurrentRole" })
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-default" style="background-color: #3C8DBC; color: white">Add</button>
                            </div>
                        </div>
                }
                </div>
            </div>

            <!-- Modal of Edit Role -->
            <div class="modal fade" id="editRole" role="dialog" style="border-radius: 10px">
                <div class="modal-dialog">

                    <!-- Modal content-->
                    <form class="form-horizontal" method="post">
                        @Html.AntiForgeryToken()
                        <div class="modal-content">
                            <div class="modal-header" style="background-color: #3C8DBC; color: white">
                                <button type="button" class="glyphicon glyphicon-remove-sign close" data-dismiss="modal" style="color: white"></button>
                                <h4 class="modal-title">Edit Role</h4>
                            </div>
                            <div class="modal-body">
                                <p>Role</p>
                                @Html.TextBoxFor(m => m.RoleName, new { placeholder = "Enter role name", style = "border-radius: 5px", @class = "form-control", @id = "editRoleName",data_bind = "value: CurrentRoleName", @maxlength = "45", required = "required" })
                                @Html.TextBoxFor(m => m.roleCode, new { style = "display: none", data_bind = "value: CurrentRole" })

                            </div>
                            <div class="modal-footer">
                                <button type="submit" id="editRoleButton" onsubmit="return validateEditForm();" class="btn btn-default" style="background-color: #3C8DBC; color: white">Update</button>
                            </div>
                        </div>
                    </form>

                </div>
            </div>

            <!-- Modal of Delete Screen -->
            <div class="modal fade" id="delScreen" role="dialog" style="border-radius: 10px">
                <div class="modal-dialog">

                    <!-- Modal content-->
                    <form class="form-horizontal" method="post">
                        <div class="modal-content">
                            <div class="modal-header" style="background-color: #D73925; color: white; ">
                                <button type="button" class="glyphicon glyphicon-remove-sign close" data-dismiss="modal" style="color: white"></button>
                                <h4 class="modal-title">Warning</h4>
                            </div>
                            <div class="modal-body">
                                <p>Are you sure to delete screen?</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default" data-dismiss="modal" style="background-color: #D73925; color: white; " data-bind="click: function(){DeleteScreen($data)}">Yes</button>
                                <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Modal of Delete Role -->
            <div class="modal fade" id="delRole" role="dialog" style="border-radius: 10px">
                <div class="modal-dialog">

                    <!-- Modal content-->
                    <form class="form-horizontal" method="post">
                        <div class="modal-content">
                            <div class="modal-header" style="background-color: #D73925; color: white; ">
                                <button type="button" class="glyphicon glyphicon-remove-sign close" data-dismiss="modal" style="color: white"></button>
                                <h4 class="modal-title">Warning</h4>
                            </div>
                            <div class="modal-body">
                                <p>Are you sure to delete role?</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default" data-dismiss="modal" style="background-color: #D73925; color: white; " data-bind="click: function(){DeleteRole($data)}">Yes</button>
                                <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

        </div>
    </div>
</div>
<script>

    $(function () {
        $(".select2").select2();
    });

    var RoleSetupVM = function () {
        var self = this;

        self.ScreensList = ko.observableArray();

        self.iserror = ko.observable();
        function ScreensDO(data) {
            var self = this;
            self.NavigationCode = data.NavigationCode;
            self.NavigationName = data.NavigationName;
        };

        self.LoadScreens = function () {
            self.ScreensList([]);
            Helper.AjaxCall.GetCallWithoutLoaderImage(AdminVD + '/Catalog/GetAllScreens', { 'roleCode': self.CurrentRole() }, function (data) {
                var temp = self.ScreensList();
                $.each(data.Table, function (i, v) {
                    var obj = new ScreensDO(v, self);
                    temp.push(obj);
                });
                self.ScreensList.valueHasMutated();
            });
        };

        self.RolesList = ko.observableArray();
        self.RoleScreensList = ko.observableArray();
        self.RoleCode = ko.observable();
        self.RoleName = ko.observable();

        function RolesDO(data) {
            var self = this;
            self.RoleCode = data.RoleCode;
            self.RoleName = data.RoleName;
            self.NavigationArray = ko.observableArray();
        };

        function NavigationDO(data) {

            var self = this;
            self.RoleCode = data.RoleCode;
            self.NavigationCode = data.NavigationCode;
            self.NavigationName = data.NavigationName;
            self.RoleNavigationCode = data.RoleNavigationCode;
        };
        self.LoadRoles = function () {

            self.RolesList([]);
            Helper.AjaxCall.GetCallWithoutLoaderImage(AdminVD + '/Catalog/GetRolesAsync', {}, function (data) {
                var Roles = data.Table;
                var Navigation = data.Table1;
                var temp = self.RolesList();

                $.each(Roles, function (i, v) {
                    var obj = new RolesDO(v);

                    $.each(Navigation, function (i1, v1) {
                        if (obj.RoleCode == v1.RoleCode) {
                            obj.NavigationArray.push(new NavigationDO(v1));
                        }
                    });
                    temp.push(obj);
                });
                self.RolesList.valueHasMutated();

                if ($('#successAlert').length > 0) {
                    setTimeout(function () {
                        $('#successAlert').slideUp();
                    }, 2000);
                }
                if ($('#deleteAlert').length > 0) {
                    setTimeout(function () {
                        $('#deleteAlert').slideUp();
                    }, 2000);
                }
                if ($('#existAlert').length > 0) {
                    setTimeout(function () {
                        $('#existAlert').slideUp();
                    }, 2000);
                }
            });
        };
        self.LoadRoles();

        self.CurrentRole = ko.observable();
        self.CurrentRoleName = ko.observable();

        self.RoleData = function (data) {
            $('#NavigationsList').select2('val', 'All');
            self.CurrentRole(data.RoleCode);
            self.CurrentRoleName(data.RoleName);
            self.LoadScreens();

        }
        self.clearTextbox = function () {
            $('#RoleName').val('');
        }

        self.CurrentNavigationCode = ko.observable();
        self.CurrentRoleCode = ko.observable();
        self.NavigationData = function (data) {
            self.CurrentNavigationCode(data);
            self.CurrentRoleCode(data);
        }

        self.DeleteScreen = function (data) {
            var NavigationCode = self.CurrentNavigationCode().NavigationCode;
            var RoleCode = self.CurrentRoleCode().RoleCode;
            Helper.AjaxCall.PostCall(AdminVD + '/Catalog/DeleteScreen', { 'NavigationCode': NavigationCode, 'RoleCode': RoleCode },
                function (result) {
                    if (result == 1) {
                        self.LoadRoles();
                    }
                    else {
                        self.iserror(true);
                        settimeout(function () { self.iserror(false) }, "5000");
                    }
                });
        }

        self.DeleteRole = function (data) {
            var RoleCode = self.CurrentRole();
            Helper.AjaxCall.PostCall(AdminVD + '/Catalog/DeleteRole', { 'RoleCode': RoleCode },
                function (result) {
                    self.LoadRoles();
                });
        }

        self.iconToggle = function (data, event) {
            if ($(event.currentTarget).find('i').hasClass('glyphicon glyphicon-plus')) {
                $(event.currentTarget).find('i').attr("data-original-title", "Hide Screens");
                $(event.currentTarget).find('i').removeClass("glyphicon glyphicon-plus").addClass('glyphicon glyphicon-minus');

                $(event.currentTarget).find('.glyphicon.glyphicon-minus')
          .attr('data-original-title', "Hide Screens")
          .tooltip('toggle')
          .tooltip('show');

            } else {
                $(event.currentTarget).find('i').attr("data-original-title", "Show Screens");
                $(event.currentTarget).find('i').removeClass("glyphicon glyphicon-minus").addClass('glyphicon glyphicon-plus');

                $(event.currentTarget).find('.glyphicon.glyphicon-plus')
          .attr('data-original-title', "Show Screens")
          .tooltip('toggle')
          .tooltip('show');
            }
        }

    }   
  
    $('#editRoleName').on('keypress', function (event) {
        var regex = new RegExp("^[a-zA-Z0-9 ]+$");
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        if (!regex.test(key)) {
            event.preventDefault();
            return false;
        }
    });
    $('#RoleName').on('keypress', function (event) {
        var regex = new RegExp("^[a-zA-Z0-9 ]+$");
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        if (!regex.test(key)) {
            event.preventDefault();
            return false;
        }
    });
        
    function validateAddForm() {
        if ($('#RoleName').val().trim().length < 0)
            return false;
    }

    function validateEditForm() {
        if ($('#editRoleName').val().trim().length < 0)
            return false;
    }

    var RoleSetupVMObj = new RoleSetupVM();

    $(document).ready(function () {
        $(".select2").select2(
    {
        closeOnSelect: false
    });
        ko.applyBindings(RoleSetupVMObj, $('.RoleSetupVM')[0]);
    })

</script>


















+ Screen
@model Automobile.Admin.Models.ScreenResponseModel
@{
    ViewBag.Title = "Screen";
}

<div id="AddScreen">
</div>

<div class="content-wrapper">
    <div id="ReportList" class="row" style="margin-left:0px; margin-right:0px;">
        <section class="content">
            <div class="box">
                <div class="box-header">
                    <h3 class="box-title">Screen</h3>
                    <div class="box-tools pull-right">
                        <a onclick="addScreen()" class="btn btn-primary btn-sm">Add Screen</a>
                    </div>
                </div>
                <div class="box-body">
                    <table class="table table-bordered table-striped" id="dtScreen">
                        <thead>
                            <tr>
                                <th style="width:4%">#</th>
                                <th style="width:15%"> Name</th>
                                <th style="width:25%"> Url</th>  
                                <th style="width:15%"> Parent</th>
                                <th style="width:5%"> Sequence</th>                                
                                <th style="width:11%"> Update Date</th>
                                <th style="width:8%">Action</th>

                            </tr>
                        </thead>
                        <tbody class="tbDetail">
                            @if (Model.ScreenList != null && Model.ScreenList.Count() != 0)
                            {

                                foreach (var item in Model.ScreenList.Select((value, i) => new { i = i + 1, value }))
                                {
                                    <tr>
                                        <td>
                                            @item.i
                                        </td>
                                        <td>
                                            @item.value.Title
                                        </td>
                                        <td>
                                            @item.value.URL 
                                        </td>  
                                        <td>
                                            @item.value.ParentName
                                        </td>   
                                        <td>
                                            @item.value.Sequence
                                        </td>                             
                                        <td>@string.Format("{0:MMM dd, yyyy}", item.value.UpdateDate) </td>
                                        <td>
                                            <button class="btn btn-primary btn-xs" onclick="edit(@item.value.Id)">Edit</button>
                                            <button class="btn btn-danger btn-xs" data-toggle="modal" data-target="#myModal" value="@(item.value.Id)" onclick="Delete(this)">Delete</button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
                <!-- Modal -->
                <div id="myModal" class="modal fade" role="dialog">
                    <div class="modal-dialog">
                        <!-- Modal content-->
                        <div class="modal-content">

                            <div class="modal-header" style="background-color: #D73925; color: white">
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                <h4 class="modal-title">Warning</h4>
                            </div>
                            <div class="modal-body">
                                <p>Are you sure to delete Screen ?</p>
                            </div>
                            <div class="modal-footer">
                                <a class="btn btn-danger" data-dismiss="modal" id="btnDelete">
                                    Yes
                                </a>
                                <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>


</div>
<script type="text/javascript">
    var UnitLocationId;
    $(function () {
        $('#dtScreen').DataTable();
    })
    function Delete(Data) {
        UnitLocationId = $(Data).attr('value');
    }

    function edit(id) {
        var UnitLocationId = id;
        $.ajax({
            async: true,
            type: 'GET',
            cache: false,
            data: { Id: UnitLocationId },
            dataType: 'html',   //response format
            contentType: 'application/json; charset=utf-8', //request format
            crossDomain: true,
            url: '@Url.Action("_Screen")',
            success: function (data) {
                $('#AddScreen').html(data);
                $('#modal-AddScreen').modal('show');
                $('.modal-body').height($('.col-md-12.AddScreen').height() + 10);
            }
        });
    }

    function addScreen() {

        $.ajax({
            dataType: "html",
            async: true,
            type: 'GET',
            cache: false,
            url: '@Url.Action("_Screen")',
            data: { Id: null },
            type: 'GET',
            success: function (data) {
                $('#AddScreen').html(data);
                $('#modal-AddScreen').modal('show');
                $('.modal-body').height($('.col-md-12.AddScreen').height() + 10);
            },
        });
    }

    $(document).ready(function () {

        $("body").delegate("#btnDelete", "click", function () {
            $.ajax({
                async: true,
                type: 'POST',
                cache: false,
                data: { Id: UnitLocationId },
                url: AdminVD + '/Catalog/DeleteRoleScreen',
                success: function (data) {
                    if (data == "success") {
                        Helper.Methods.ShowPopUp('Success', 'Screen deleted successfully!');
                        setTimeout(function () {
                            location.reload();
                        }, 500);
                    }
                }
            });
        });


    });
</script>









+ ShippingVendor
@model JTJapan.Core.AdminArea.ViewModel.CatalogueResponseModel
@{ ViewBag.Title = "Shipping Vendor"; }

<style>
    button {
        font-size: 14px;
    }
</style> 

<div class="content-wrapper">
    <section class="content">
        <div id="ReportList" class="row" style="margin-left:0px; margin-right:0px;">
            <div class="box">
                <div class="box-header">
                    <h3 class="box-title">Shipping Vendor</h3>
                    <button style="float:right" id="addShippingVendorButton" data-toggle="modal" data-target="#addOrUpdateShippingVendorModel" class="btn btn-primary btn-sm">Add Shipping Vendor</button>
                </div>
                <div class="box-body">
                    <table class="table table-bordered table-striped" id="dtShippingVendor">
                        <thead>
                            <tr>
                                <th style="width:6%">#</th>
                                <th style="width:15%">Vendor</th>
                                <th style="width:21%">Email</th>
                                <th style="width:30%">CCEmail</th>
                                <th style="width:12%">Update Date</th>
                                <th style="width:16%">Action</th>
                            </tr>
                        </thead>
                        <tbody class="tbDetail">
                            @foreach (var item in Model.CatalogueList.Select((value, i) => new { i = i + 1, value }))
                            {
                                <tr>
                                    <td>
                                        @item.i

                                        @Html.HiddenFor(items => items.CatalogueList[item.i - 1].Id,
                                         new { @class = "ShippingVendorId" })
                                    </td>
                                    <td>@item.value.Title</td>
                                    <td>@item.value.Email</td>
                                    <td>@item.value.CCEmail</td>
                                    <td>@string.Format("{0:MMM dd, yyyy}", item.value.UpdateDate)</td>
                                    <td>
                                        <button data-toggle="modal" data-target="#addOrUpdateShippingVendorModel" class="btn btn-primary btn-xs editButton">Edit</button>
                                        <button data-toggle="modal" data-target="#deleteModel" class="btn btn-danger btn-xs deleteButton">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </section>
</div>

<div class="modal fade" role="dialog" id="addOrUpdateShippingVendorModel">
    @* Partial view will be load on event handler *@
</div>

<div class="modal fade" role="dialog" id="deleteModel">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #D73925; color: white">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Warning</h4>
            </div>
            <div class="modal-body">
                <p>Are you sure to delete vendor ?</p>
            </div>
            <div class="modal-footer">
                <a class="btn btn-danger" data-dismiss="modal" id="btnDelete">
                    Yes
                </a>
                <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    $(document).ready(function () {

        var ShippingVendorId;
        $('#dtShippingVendor').DataTable();

        $('#addShippingVendorButton').click(function () {

            var data = {};
            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',   //response format
                contentType: 'application/json; charset=utf-8', //request format
                crossDomain: true,
                url: '@Url.Action("_ShippingVendor")',
                success: function (data) {
                    $('#addOrUpdateShippingVendorModel').html(data);
                    $('#addOrUpdateShippingVendorModel .modal-title').text('Add Shipping Vendor');
                    $('#btnAdd').val('Add');
                }
            });
        });

        $('#dtShippingVendor').on('click', '.editButton', function () {

            var data = {};
            data.Id = $(this).closest('tr').find('.ShippingVendorId').val();

            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',   //response format
                contentType: 'application/json; charset=utf-8', //request format
                crossDomain: true,
                url: '@Url.Action("_ShippingVendor")',
                success: function (data) {
                    $('#addOrUpdateShippingVendorModel').html(data);
                    $('#addOrUpdateShippingVendorModel .modal-title').text('Update Shipping Vendor');
                    $('#btnAdd').val('Update');
                }
            });
        });

        $('#dtShippingVendor').on('click', '.deleteButton', function () {
            ShippingVendorId = $(this).closest('tr').find('.ShippingVendorId').val();
        });

        $("#deleteModel").on("click", "#btnDelete", function () {

            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: { id: ShippingVendorId },
                url: 'DeleteShippingVendor',
                success: function (data) {
                    if (data.IsValid) {
                        Helper.Methods.ShowPopUp('Success', 'Vendor deleted successfully!');
                        setTimeout(function () {
                            location.reload();
                        }, 500);
                    }
                }
            });
        });
    });
</script>

+ Transport
@model JTJapan.Core.AdminArea.ViewModel.CatalogueResponseModel
@{
    ViewBag.Title = "Transport";
}
<style>
    button { 
        font-size: 14px;
    }
</style>

@{ ViewBag.Title = "Transport Vendor"; }
<div class="content-wrapper">
    <div id="ReportList" class="row" style="margin-left:0px; margin-right:0px;">
        <section class="content">
            <div class="box">
                <div class="box-header">
                    <h3 class="box-title">Transport Vendor</h3>
                    <button style="float:right" id="btnAddShippingVendor" data-toggle="modal" data-target="#addOrUpdateTransportVendorModel" class="btn btn-primary btn-sm">Add Transport Vendor</button>
                </div>
                <div class="box-body">
                    <table class="table table-bordered table-striped" id="dtTransport">
                        <thead>
                            <tr>
                                <th style="width:5%">#</th>
                                <th style="width:20%"> Vendor</th>
                                <th style="width:25%"> Email</th>
                                <th style="width:32%">CCEmail</th>
                                <th style="width:10%"> Update Date</th>
                                <th style="width:13%">Action</th>

                            </tr>
                        </thead>
                        <tbody class="tbDetail">
                            @if (Model.CatalogueList != null && Model.CatalogueList.Count() != 0)
                            {

                                foreach (var item in Model.CatalogueList.Select((value, i) => new { i = i + 1, value }))
                                {
                                    <tr>
                                        <td>
                                            @item.i
                                            @Html.HiddenFor(items => items.CatalogueList[item.i - 1].Id,
                                         new { @class = "Id" })
                                        </td>
                                        <td>
                                            @item.value.Title
                                        </td>
                                        <td>
                                            @item.value.Email
                                    </td>

                                    <td>@item.value.CCEmail </td>
                                    <td>@string.Format("{0:MMM dd, yyyy}", item.value.UpdateDate) </td>
                                    <td>
                                        <button data-toggle="modal" data-target="#addOrUpdateTransportVendorModel" class="btn btn-primary btn-xs btnEdit">Edit</button>
                                        <button class="btn btn-danger btn-xs" data-toggle="modal" data-target="#DeleteModal" value="@(item.value.Id)" onclick="Delete(this)">Delete</button>
                                    </td>
                                </tr>
                                }
                            }

                        </tbody>
                    </table>

                </div>
                <div class="modal fade" role="dialog" id="addOrUpdateTransportVendorModel">
                    @* Partial view will be load on event handler *@
                </div>
                <!-- Modal -->
                <div id="DeleteModal" class="modal fade" role="dialog">
                    <div class="modal-dialog">
                        <!-- Modal content-->
                        <div class="modal-content">

                            <div class="modal-header" style="background-color: #D73925; color: white">
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                <h4 class="modal-title">Warning</h4>
                            </div>
                            <div class="modal-body">
                                <p>Are you sure to delete vendor ?</p>
                            </div>
                            <div class="modal-footer">
                                <a class="btn btn-danger" data-dismiss="modal" id="btnDelete">
                                    Yes
                                </a>
                                <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>


</div>

<script type="text/javascript">
    var TransportVendorId;
    $(function () {
        $('#dtTransport').DataTable();
    })
    function Delete(Data) {
        TransportVendorId = $(Data).attr('value');
    }
    $(document).ready(function () {
        $("body").delegate("#btnAddShippingVendor", "click", function () {
            var data = {};
            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',   //response format
                contentType: 'application/json; charset=utf-8', //request format
                crossDomain: true,
                url: '@Url.Action("_AddEditTransport")',
                success: function (data) {
                    $('#addOrUpdateTransportVendorModel').html(data);
                    $('#addOrUpdateTransportVendorModel .modal-title').text('Add Transport Vendor');
                    $('#btnAddVendor').val('Add');
                }
            });
        });

        $('#dtTransport').on('click', '.btnEdit', function () {
            var data = {};
            data.TransportVendorId = $(this).closest('tr').find('.Id').val();

            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',   //response format
                contentType: 'application/json; charset=utf-8', //request format
                crossDomain: true,
                url: '@Url.Action("_AddEditTransport")',
                success: function (data) {
                    $('#addOrUpdateTransportVendorModel').html(data);
                    $('#addOrUpdateTransportVendorModel .modal-title').text('Update Shipping Vendor');
                    $('#btnAddVendor').val('Update');
                }
            });
        });


        $("body").delegate("#btnDelete", "click", function () {

            $.ajax({
                async: true,
                type: 'POST',
                cache: false,
                data: { Id: TransportVendorId },
                url: 'DeleteTransportVendor',
                success: function (data) {
                    if (data == "success") {
                        Helper.Methods.ShowPopUp('Success', 'Transport vendor deleted successfully!');
                        setTimeout(function () {
                            location.reload();
                        }, 500);
                    }
                }
            });
        });


    });
</script>




+ Yard
 
@model JTJapan.Core.AdminArea.ViewModel.CatalogueResponseModel
@{
    ViewBag.Title = "Yard";
}

<div id="AddYard">
</div>
 
<div class="content-wrapper">
    <div id="ReportList" class="row" style="margin-left:0px; margin-right:0px;">
        <section class="content">
            <div class="box">
                <div class="box-header">
                    <h3 class="box-title">Yard</h3>
                    <div class="box-tools pull-right">
                        <a onclick="addYard()" class="btn btn-primary btn-sm">Add Yard</a>
                    </div>
                </div>
                <div class="box-body">
                    <table class="table table-bordered table-striped" id="dtYard">
                        <thead>
                            <tr>
                                <th style="width:4%">#</th>
                                <th style="width:10%"> Yard</th>
                                <th style="width:19%"> Email</th>
                                <th style="width:14%">Incharge/Phone #</th>
                                <th style="width:18%"> Address</th>
                                <th style="width:12%"> Port/ Vendor</th>
                                <th style="width:11%"> Update Date</th>
                                <th style="width:12%">Action</th>

                            </tr>
                        </thead>
                        <tbody class="tbDetail">
                            @if (Model.CatalogueList != null && Model.CatalogueList.Count() != 0)
                            {

                                foreach (var item in Model.CatalogueList.Select((value, i) => new { i = i + 1, value }))
                                {
                                    <tr>
                                        <td>
                                            @item.i
                                        </td>
                                        <td>
                                            @item.value.Title
                                        </td>
                                        <td>
                                            @item.value.Email <br />
                                            <span class="second">
                                                @item.value.CCEmail
                                            </span>
                                        </td>
                                        <td>
                                            @item.value.InchargePerson
                                            <span class="second"><br />
                                                @item.value.Phone
                                            </span>
                                        </td>
                                        <td>
                                            @item.value.AddressLine1 <br />
                                            <span class="second">
                                                @item.value.AddressLine2
                                            </span>
                                        </td>
                                        <td>
                                            @item.value.Port <br />
                                            <span class="second">
                                                @item.value.ShippingVendor
                                            </span>
                                        </td>
                                        <td>@string.Format("{0:MMM dd, yyyy}", item.value.UpdateDate) </td>
                                        <td>
                                            <button class="btn btn-primary btn-xs" onclick="edit(@item.value.Id)">Edit</button>
                                            <button class="btn btn-danger btn-xs" data-toggle="modal" data-target="#myModal" value="@(item.value.Id)" onclick="Delete(this)">Delete</button>
                                        </td>
                                    </tr>
                                }
                            }

                        </tbody>
                    </table>

                </div>
                <!-- Modal -->
                <div id="myModal" class="modal fade" role="dialog">
                    <div class="modal-dialog">
                        <!-- Modal content-->
                        <div class="modal-content">

                            <div class="modal-header" style="background-color: #D73925; color: white">
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                <h4 class="modal-title">Warning</h4>
                            </div>
                            <div class="modal-body">
                                <p>Are you sure to delete vendor ?</p>
                            </div>
                            <div class="modal-footer">
                                <a class="btn btn-danger" data-dismiss="modal" id="btnDelete">
                                    Yes
                                </a>
                                <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>


</div>
<script type="text/javascript">
    var UnitLocationId;
    $(function () {
        $('#dtYard').DataTable();
    })
    function Delete(Data) {
        UnitLocationId = $(Data).attr('value');
    }

    function edit(id) {
        var UnitLocationId = id;
        $.ajax({
            async: true,
            type: 'GET',
            cache: false,
            data: { Id: UnitLocationId },
            dataType: 'html',   //response format
            contentType: 'application/json; charset=utf-8', //request format
            crossDomain: true,
            url: '@Url.Action("_Yard")',
            success: function (data) {
                $('#AddYard').html(data);
                $('#modal-AddYard').modal('show');
                $('.modal-body').height($('.col-md-12.AddYard').height() + 10);
            }
        });
    }

    function addYard() {

        $.ajax({
            dataType: "html",
            async: true,
            type: 'GET',
            cache: false,
            url: '@Url.Action("_Yard")',
            data: { Id: null },
            type: 'GET',
            success: function (data) {
                $('#AddYard').html(data);
                $('#modal-AddYard').modal('show');
                $('.modal-body').height($('.col-md-12.AddYard').height() + 10);
            },
        });
    }

    $(document).ready(function () {

        $("body").delegate("#btnDelete", "click", function () {
            $.ajax({
                async: true,
                type: 'POST',
                cache: false,
                data: { Id: UnitLocationId },
                url: 'DeleteYard',
                success: function (data) {
                    if (data == "success") {
                        Helper.Methods.ShowPopUp('Success', 'Yard deleted successfully!');
                        setTimeout(function () {
                            location.reload();
                        }, 500);
                    }
                }
            });
        });


    });
</script>

Folder: Documentation
+ __AttachFile.cshtml

<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header" style="background-color:#3C8DBC">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <h4 class="modal-title" style="color:white"></h4>
        </div>
        <div class="modal-body">

            <input type="file" id="fileUpload" accept=".zip,application/octet-stream,application/zip,application/x-zip,application/x-zip-compressed"
                   data-documenttype=" 4" style=" width:90%;" />

            <div class="loadingDiv pull-right" style="display:none">
                <img id="loadingImg" height="20" alt="" src="~/Assets/img/loader.gif" style="width: 200px;">
            </div>

            <p class="help-block">Upload file in zip format </p>
            <label class="fileErrorText" style="color:red;"></label>

            <div id="uploadDocumentStatusDetail"></div>

        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
            <button type="button" id="btnUpload" class="btn btn-primary">Upload</button>
        </div>
    </div>
</div>

<script>



    $(document).ready(function () {


        ValidateDetailView = function () {

            //To empty error field
            $('.fileErrorText').text('');

            //Remove checkbox and button if nothing to found to upload
            if ($("#exportDocumentStatusTable tr td  input:checkbox").length < 1) {
                $("#btnUpload").css("display", "none");
                $("#selectDocumentCheckBox").css("display", "none");
            }
            //Use select and unselect all checkboc
            $("#selectDocumentCheckBox").on("click", function () {
                var all = $(this);
                $('#exportDocumentStatusTable input:checkbox').each(function () {
                    $(this).prop("checked", all.prop("checked"));
                });
            });

        }


        ShowHideModelFooter = function (IsShow) {
            if (IsShow == 1) {
                $('.modal-footer').find('button').css('visibility', 'visible');
            }
            else {
                $('.modal-footer').find('button').css('visibility', 'hidden');
            }

        }


    });

</script>

+ _CarDocumentFileDetail.cshtml

@model JTJapan.Core.AdminArea.ViewModel.ExportDocumentResponseModel


@if (!@Model.IsValid)
{
    <div style="color:red;"> @Model.Message  </div>
}

else
{
    <table id="exportDocumentStatusTable" class="table table-striped">
        <tr>
            <th>
                #
                <input type="checkbox" id="selectDocumentCheckBox">
            </th>
            <th>Chassis #</th>
            <th>Invoice #</th>
            <th>Comments</th>
        </tr>

        @foreach (var item in Model.ExportDocumentStatusList.Select((value, i) => new { i = i + 1, value }))
        {
            <tr>
                <td>
                    @item.i

                    @if (item.value.StatusId == 1 || item.value.StatusId == 2)
                    {
                        <input type="checkbox" class="chkd">

                        @Html.HiddenFor(items => items.ExportDocumentStatusList[item.i - 1].ClientId, new
                                {
                                    @class = "ClientId"
                                })

                        @Html.HiddenFor(items => items.ExportDocumentStatusList[item.i - 1].CustomerProductInvoiceId,
                                new
                                {
                                    @class = "customerProductInvoiceId"
                                })


                        @Html.HiddenFor(items => items.ExportDocumentStatusList[item.i - 1].StatusId,
                                new
                                {
                                    @class = "DocumentStatusId"
                                })


                    }


                </td>

                <td class="chassisNumber">@item.value.ChassisNumber</td>
                <td class="invoicenumber">@item.value.InvoiceNumber</td>

                @if (item.value.StatusId == 1)
                {
                    <td class="auctionHouse" style="color:green">@item.value.Comments</td>
                }

                else if (item.value.StatusId == 2)
                {
                    <td class="auctionHouse" style="color: darkorange">@item.value.Comments</td>
                }

                else
                {
                    <td class="auctionHouse" style="color:red">@item.value.Comments</td>
                }

            </tr>
        }
    </table>
}



<script>

    $(document).ready(function () {

    });

</script>


+ _Documentstats.cshtml

@model JTJapan.Core.AdminArea.ViewModel.DocumentCountViewModel

<div class="row">
    <div class="col-md-3 col-sm-6 col-xs-12">
        <div id="carDocumentPending" class="info-box bg-aqua" style="border-top: 5px solid #0483a2; ">
            <span class="info-box-icon"><i class="fa fa-car"></i></span>
            <div class="info-box-content">
                <span class="info-box-text">Car Document Pending</span>
                <span class="info-box-number">@Model.CarDocumentPendingCount</span>
                <div class="progress">
                    <div class="progress-bar" style="width: 70%"></div>
                </div>
                @*<span class="progress-description">
                       <b>@Model.CarDocumentAllCount</b> <span style="font-size:12px;">Total Pending</span>
                    </span>*@
            </div>
        </div>
    </div>

    <div class="col-md-3 col-sm-6 col-xs-12">
        <div id="carDocumentReceived" class="info-box bg-red">
            <span class="info-box-icon"><i class="fa fa-taxi"></i></span>
            <div class="info-box-content">
                <span class="info-box-text">Car Document Received</span>
                <span class="info-box-number">@Model.CarDocumentReceivingCount</span>
                <div class="progress">
                    <div class="progress-bar" style="width: 70%"></div>
                </div>
                @*<span class="progress-description">
                        <b>@Model.CarDocumentAllCount</b> <span style="font-size:12px;">Total Pending</span>
                    </span>*@
            </div>
        </div>
    </div>


    <div class="col-md-3 col-sm-6 col-xs-12">
        <div id="exportCertificatePending" class="info-box bg-green">
            <span class="info-box-icon"><i class="fa fa-envelope-o"></i></span>
            <div class="info-box-content">
                <span class="info-box-text">Export Certificate</span>
                <span class="info-box-number">@Model.ExportCertificatePendingCount</span>
                <div class="progress">
                    <div class="progress-bar" style="width: 70%"></div>
                </div>
                <span class="progress-description">
                    <b>@Model.ExportCertificateAllCount</b> <span style="font-size:12px;">Total Pending</span>
                </span>
            </div>
        </div>
    </div>

    <div class="col-md-3 col-sm-6 col-xs-12">
        <div id="inspectionCertificatePending" class="info-box bg-yellow">
            <span class="info-box-icon"><i class="fa fa-certificate"></i></span>
            <div class="info-box-content">
                <span class="info-box-text">Inspection Certificate</span>
                <span class="info-box-number">@Model.InspectionPendingCount</span>
                <div class="progress">
                    <div class="progress-bar" style="width: 70%"></div>
                </div>
                <span class="progress-description">
                </span>
            </div>
        </div>
    </div>
</div>


+_ExportDocumentFileDetail.cshtml


@model JTJapan.Core.AdminArea.ViewModel.ExportDocumentResponseModel


@if (!@Model.IsValid)
{
    <div style="color:red;"> @Model.Message  </div>
}

else
{
    <table id="exportDocumentStatusTable" class="table table-striped">
        <tr>
            <th>
                #
                <input type="checkbox" id="selectDocumentCheckBox">
            </th>
            <th>Chassis #</th>
            <th>Invoice #</th>
            <th>Comments</th>
        </tr>

        @foreach (var item in Model.ExportDocumentStatusList.Select((value, i) => new { i = i + 1, value }))
        {
            <tr>
                <td>
                    @item.i

                    @if (item.value.StatusId == 1 || item.value.StatusId == 2)
                    {
                        <input type="checkbox" class="chkd">

                        @Html.HiddenFor(items => items.ExportDocumentStatusList[item.i - 1].ClientId, new
                                {
                                    @class = "ClientId"
                                })

                        @Html.HiddenFor(items => items.ExportDocumentStatusList[item.i - 1].CustomerProductInvoiceId,
                                new
                                {
                                    @class = "customerProductInvoiceId"
                                })

                        @Html.HiddenFor(items => items.ExportDocumentStatusList[item.i - 1].StatusId,
                                new
                                {
                                    @class = "DocumentStatusId"
                                })


                    }


                </td>

                <td class="chassisNumber">@item.value.ChassisNumber</td>
                <td class="invoicenumber">@item.value.InvoiceNumber</td>

                @if (item.value.StatusId == 1)
                {
                    <td class="auctionHouse" style="color:green">@item.value.Comments</td>
                }

                else if (item.value.StatusId == 2)
                {
                    <td class="auctionHouse" style="color: darkorange">@item.value.Comments</td>
                }

                else
                {
                    <td class="auctionHouse" style="color:red">@item.value.Comments</td>
                }

            </tr>
        }
    </table>
}



<script>

    $(document).ready(function () {

    });

</script>


+ _InspectionCertificateFileDetail.cshtml

@model JTJapan.Core.AdminArea.ViewModel.ExportDocumentResponseModel


@if (!@Model.IsValid)
{
    <div style="color:red;"> @Model.Message  </div>
}

else
{
    <table id="exportDocumentStatusTable" class="table table-striped">
        <tr>
            <th>
                #
                <input type="checkbox" id="selectDocumentCheckBox">
            </th>
            <th>Chassis #</th>
            <th>Invoice #</th>
            <th>Comments</th>
        </tr>

        @foreach (var item in Model.ExportDocumentStatusList.Select((value, i) => new { i = i + 1, value }))
        {
            <tr>
                <td>
                    @item.i

                    @if (item.value.StatusId == 1 || item.value.StatusId == 2)
                    {
                        <input type="checkbox" class="chkd">

                        @Html.HiddenFor(items => items.ExportDocumentStatusList[item.i - 1].ClientId, new
                                {
                                    @class = "ClientId"
                                })

                        @Html.HiddenFor(items => items.ExportDocumentStatusList[item.i - 1].CustomerProductInvoiceId,
                                new
                                {
                                    @class = "customerProductInvoiceId"
                                })


                        @Html.HiddenFor(items => items.ExportDocumentStatusList[item.i - 1].StatusId,
                                new
                                {
                                    @class = "DocumentStatusId"
                                })

                    }


                </td>

                <td class="chassisNumber">@item.value.ChassisNumber</td>
                <td class="invoicenumber">@item.value.InvoiceNumber</td>

                @if (item.value.StatusId == 1)
                {
                    <td class="auctionHouse" style="color:green">@item.value.Comments</td>
                }

                else if (item.value.StatusId == 2)
                {
                    <td class="auctionHouse" style="color: darkorange">@item.value.Comments</td>
                }

                else
                {
                    <td class="auctionHouse" style="color:red">@item.value.Comments</td>
                }

            </tr>
        }
    </table>
}



<script>

    $(document).ready(function () {

        $('.fileErrorText').text('');

        if ($("#exportDocumentStatusTable tr td  input:checkbox").length < 1) {
            $("#selectDocumentCheckBox,#btnUpload").css("display", "none");
        }

        $("#selectDocumentCheckBox").on("click", function () {
            var all = $(this);
            $('#exportDocumentStatusTable input:checkbox').each(function () {
                $(this).prop("checked", all.prop("checked"));
            });
        });

    });

</script>


+ _PendingCarDocument.cshtml

@using JTJapan.Core;
@model JTJapan.Core.AdminArea.ViewModel.DocumentReceivingViewModelResponseModel


@{
    var Count = (Model.PageSize * (Model.CurrentPage - 1));
}

<section>

    @if (!string.IsNullOrEmpty(ViewBag.Message))
    {
        <div class="col-xs-2" style="display:none;">
            <select class="form-control page-size" style="width: 60px; padding: 2px 2px; height: 28px;">
                <option selected>25</option>
                <option>50</option>
                <option>100</option>
            </select>
        </div>
    }

    <div class="box">
        <div class="box-body no-padding">
            <div class="box-header">
                <div class="col-md-2" style="display:none;">
                    <select id="documentStatusFilter" class="form-control" style="padding: 2px 2px; height: 28px; ">
                        <option value="-1">Select All</option>
                        <option value="10010" selected>Pending</option>
                        <option value="10020">Received</option>
                    </select>
                </div>

                <div class="col-xs-6">
                    <div class="input-group input-group-sm">

                        <input id="txtChassisNo" type="text" class="form-control" placeholder="Chassis # 1 , Chassis # 2" maxlength="1000">
                        <span class="input-group-btn">
                            <button class="btn btn-primary btn-flat" type="button" id="btnChassisNo"><i class="glyphicon glyphicon-search"></i></button>
                        </span>
                    </div>
                </div>

                <div style="float:right;">
                    <button id="exportToExcel" data-toggle="tooltip" data-placement="top" title="Export To Excel" type="button" class="btn btn-block btn-success">
                        <i class="fa fa-file-excel-o"></i>
                    </button>
                </div>
            </div>

            <table id="documentTable" class="table table-striped">
                <tr>
                    <th style="width: 4%">
                        #
                        <input type="checkbox" id="BulkSelect">
                    </th>
                    <th style="width: 10%">Unit Details</th>
                    <th style="width: 6%">Invoice #</th>
                    <th style="width: 10%">Chassis #</th>
                    <th style="width: 7%">Auction House</th>
                    <th style="width:8%">Purchase</th>

                    @if (Model.DocumentStatusId == Constants.OG_ProductDocumentStatus.CarDocument_Received.GetHashCode())
                    {
                        <th style="width:8%">Exporter Company</th>
                    }
                    <th style="width: 8%">
                        Shelf
                        @*@Html.DropDownList("ShelfBulkDropdown", new SelectList((IEnumerable<SelectListItem>)ViewBag.ShelfList, "Value",
                            "Text", 0), new { @class = "form-control select2 input-sm" })*@
                    </th>
                    <th style="width:8%;">File Number</th>
                    <th style="width: 8%; text-align:center;">Document</th>
                </tr>

                @if (!string.IsNullOrEmpty(ViewBag.Message))
                {
                    <tr>
                        <td colspan="8" style="text-align:center;">@ViewBag.Message</td>
                    </tr>
                }

                else
                {
                    foreach (var item in Model.DocumentList.Select((value, i) => new { i = i + 1, value }))
                    {
                        <tr>
                            <td>
                                @(Count + @item.i)
                                
                                <input type="checkbox">

                                @Html.HiddenFor(items => items.DocumentList[item.i - 1].PurchaseId,
                                new
                                {
                                    @class = "purchaseId"
                                })

                                @Html.HiddenFor(items => items.DocumentList[item.i - 1].CustomerProductInvoiceId,
                                new
                                {
                                    @class = "customerInvoiceId"
                                })
                            </td>
                            <td>
                                @item.value.MakeName @item.value.ModelName <br />
                                @item.value.ProductionYear
                            </td>
                            <td>@item.value.InvoiceNumber</td>
                            <td class="chassisNumber">@item.value.ChassisNumber</td>
                            <td class="auctionHouse">@item.value.AuctionHouse</td>
                            <td>
                                @item.value.PurchaseVendor <br />
                                @item.value.PurchaseDate.ToString("MMM dd, yyyy")
                            </td>

                            @if (Model.DocumentStatusId == Constants.OG_ProductDocumentStatus.CarDocument_Received.GetHashCode())
                            {
                                <td>
                                    <div class="form-group">
                                        @Html.DropDownList("ExporterCompanyId", new SelectList((IEnumerable<SelectListItem>)ViewBag.ExporterList, "Value",
                             "Text", item.value.ExporterCompanyId),
                                     new { @class = "form-control select2 input-sm exportComapny" })
                                    </div>
                                </td>
                            }

                            <td>
                                <div class="form-group">
                                    @Html.DropDownList("ShelfListId", new SelectList((IEnumerable<SelectListItem>)ViewBag.ShelfList, "Value",
                                    "Text", item.value.ShelfId),
                                       new { @class = "form-control select2 input-sm shelfLocation" })
                                </div>
                            </td>

                            <td>
                                <div>
                                    <div class="form-group">
                                        @Html.DropDownList("AvailableFileNumbers", new SelectList((IEnumerable<SelectListItem>)ViewBag.FileNumberList, "Value",
                                        "Text", item.value.FileNumber),
                                       new { @class = "form-control select2 input-sm fileLocation" , @disabled = "true" })
                                    </div>
                                </div>
                            </td>

                            <td class="exporterStatus">
                                <span class="label  @(item.value.IsDocumentReceived ? "label-primary" : "label-warning")">
                                    @(item.value.IsDocumentReceived ? "Received" : "Pending")
                                </span>
                            </td>
                        </tr>
                    }
                }
            </table>
        </div>

        @if (string.IsNullOrEmpty(ViewBag.Message))
        {
            <div class="row">
                <div class="customPagination">
                    <div class="col-xs-12">
                        <div class="box UserVM" style="margin-bottom:0px;">
                            <div class="box-footer clearfix">
                                <div class="col-xs-5">
                                    <div class="dataTables_info" role="status" aria-live="polite">Showing <span class="customRange">0</span> of <span class="customTotalResult">0</span>  entries</div>
                                </div>

                                <div class="col-xs-1 text-center">
                                    Page Size
                                </div>
                                <div class="col-xs-2">
                                    <select class="form-control page-size" style="width: 60px; padding: 2px 2px; height: 28px;">
                                        <option selected>25</option>
                                        <option>50</option>
                                        <option>100</option>
                                    </select>
                                </div>


                                <div class="col-xs-4">
                                    <ul class="pagination pagination-sm no-margin pull-right"></ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="modal fade" role="dialog" id="uploadFileStatusModel">
            @* Partial view will be load on upload event handler *@
        </div>
    </div>

    @if (string.IsNullOrEmpty(ViewBag.Message))
    {
        <div id="multiActionButon" class="row">
            <div class="col-md-2 col-md-offset-4">

                @if (Model.DocumentStatusId == Constants.OG_ProductDocumentStatus.CarDocuments_Pending.GetHashCode())
                {
                    <button id="carDocumentReceivingActionButton" type="button" class="btn btn-block btn-primary">
                        <i class="fa fa-check-square-o"></i>
                        Received
                    </button>
                }

                else
                {
                    <button id="carDocumentDispatchedActionButton" type="button" class="btn btn-block btn-primary">
                        <i class="fa fa-check-square-o"></i>
                        Dispatched
                    </button>
                }
            </div>

            <div class="col-md-2">
                <button id="uploadCarDocumentButton" type="button" data-toggle="modal" data-target="#uploadFileStatusModel" class="btn btn-block btn-success">
                    <i class="fa fa-upload"></i>
                    Upload
                </button>
            </div>
        </div>
    }

    @if (Model.MissingChassisList.Count > 0)
    {
        <div class="box" style="width:30%">
            <div class="box-body no-padding">
                <table id="MissingChassisTable" class="table table-striped">
                    <tr>
                        <th style="width: 4%">
                            Sno
                        </th>
                        <th style="width: 10%">Missing Chassis #</th>
                    </tr>

                    @foreach (var item in Model.MissingChassisList.Select((value, i) => new { i = i + 1, value }))
                    {
                        <tr>
                            <td>
                                @item.i
                            </td>
                            <td class="chassisNumber">@item.value.ChassisNumber</td>

                        </tr>
                    }
                </table>
            </div>
        </div>
    }
</section>

<script>

    $(document).ready(function () {

        var currentPage = parseInt('@Model.CurrentPage');
        var totalResults = parseInt('@Model.TotalResults');
        var paginationTemplateHTML = $('#paginationTemplate').html();
        var pageSize = parseInt('@Model.PageSize');
        var resultsCount = parseInt('@Model.DocumentList.Count');
        var documentStatusId = parseInt('@Model.DocumentStatusId');

        $(".page-size").val(pageSize);
        $("#documentStatusFilter").val(documentStatusId);
        $("#txtChassisNo").val('@Model.MultipleChassisNumbers');

        //Initialize Select2 Elements
        $('.shelfLocation').select2();

        $(".customPagination ul.pagination").on("click", ".rightnav", function () {
            GetPendingCarDocument(currentPage + 1, pageSize);
        });

        $(".customPagination ul.pagination").on("click", ".leftnav", function () {
            GetPendingCarDocument(currentPage - 1, pageSize);
        });

        $(".page-size").change(function () {

            var changePageSize = $(this).val();
            GetPendingCarDocument(1, changePageSize);
        });

        $('#documentTable').on('change', '.shelfLocation', function () {

            var data = {};
            var $currentElement = $(this);
            data.purchaseId = $(this).closest('tr').find('.purchaseId').val();
            data.shelfId = $(this).val();

            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                crossDomain: true,
                url: '@Url.Action("GetAvailableFileNumber")',
                success: function (data) {

                    var $el =  $currentElement.closest('tr').find("#AvailableFileNumbers");
                    $el.empty(); 
                    $el.append($("<option></option>")
                            .attr("value", '0').text('Select'));
                    $.each(data, function (index, object) {
                        $el.append($("<option></option>")
                                .attr("value", object.Value).text(object.Text));
                    });

                    $el.attr("disabled", false);
                }
            });


        });
         
        $('#ReportList').on("click", "#exportToExcel", function () {

            var data = {};
            data.ChassisNumbers = $('#txtChassisNo').val();
            data.documentStatusId = $('#documentStatusFilter').val();
            ExportToExcelAjaxRequest(data);
        });

        ExportToExcelAjaxRequest = function (data) {
            window.location = "CarDocumentToExcel?chassisNumbers=" + data.ChassisNumbers + "&documentStatusId=" + data.documentStatusId;
        };

        $('#documentTable').on('change', '#ShelfBulkDropdown', function () {
            $(this).closest('tr').siblings('tr').find('td select.shelfLocation').val($(this).val()).trigger('change');;
        });

        $("#BulkSelect").change(function () {
            $(this).closest('tr').siblings('tr').find(':checkbox').attr('checked', this.checked);
        });

        $('#btnChassisNo').click(function () {
            GetPendingCarDocument(1, pageSize);
        });

        $('#txtChassisNo').keyup(function (e) {
            if (e.keyCode == 13) {
                GetPendingCarDocument(1, pageSize);
            }
        });

        $('#documentStatusFilter').change(function () {
            GetPendingCarDocument(1, pageSize);
        });

        $("#carDocumentReceivingActionButton").click(function () {

            var data = {};
            var documentStatusId = '@((int)Constants.OG_ProductDocumentStatus.CarDocument_Received)'
            data.UpdatedListOfExportDocument = GetSelectedCheckedBoxData(documentStatusId);
            UpdateCarPendingStatus(data, '#carDocumentPending', '5px solid #0483a2');
        });

        $("#carDocumentDispatchedActionButton").click(function () {

            var data = {};
            var documentStatusId = '@((int)Constants.OG_ProductDocumentStatus.CarDocument_Dispatched)'
            data.UpdatedListOfExportDocument = GetSelectedCheckedBoxData(documentStatusId);
            UpdateCarPendingStatus(data, '#carDocumentReceived' , '5px solid rgb(202, 8, 17)');
        });

        $('#uploadCarDocumentButton').click(function () {

            var data = {};
            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',   //response format
                contentType: 'application/json; charset=utf-8', //request format
                crossDomain: true,
                url: '@Url.Action("_CarDocumentAttachFile")',
                success: function (data) {
                    $('#uploadFileStatusModel').html(data);
                    $('#uploadFileStatusModel .modal-title').text('Car Document Uploading');
                }
            });

        });

        $('#uploadFileStatusModel').on("change", "#fileUpload", function () {

            var fileData = ValidateFile();
            if (fileData.IsValid) {

                $('.loadingDiv').show();
                $.ajax({
                    url: '@Url.Action("_CarDocumentFileDetail")',
                    type: "POST",
                    contentType: false, // Not to set any content header
                    processData: false, // Not to process data
                    data: fileData,
                    success: function (result) {
                        $('.loadingDiv').hide();
                        $('#uploadDocumentStatusDetail').html(result);
                        ValidateDetailView();
                    },
                    error: function (err) {
                        $('.loadingDiv').hide();
                        alert(err.statusText);
                    }
                });
            }
        });

        $('#uploadFileStatusModel').on("click", "#btnUpload", function () {

            var fileData = ValidateFile();
            if (fileData.IsValid) {

                if ($('.chkd:checked').length > 0) {
                    $('.loadingDiv').show();
                    ShowHideModelFooter(0);
                    var selectedCheckBoxDataList = [];
                    $("#exportDocumentStatusTable tr td  input:checked").each(function () {

                        var data = {};
                        data.ChassisNumber = $(this).closest('tr').find('.chassisNumber').text();
                        data.InvoiceNumber = $(this).closest('tr').find('.invoicenumber').text();
                        data.CustomerProductInvoiceId = $(this).closest('tr').find('.customerProductInvoiceId').val();
                        data.ClientId = $(this).closest('tr').find('.ClientId').val();
                        data.StatusId = $(this).closest('tr').find('.DocumentStatusId').val();

                        selectedCheckBoxDataList.push(data);
                    });

                    var requestModel = {};
                    requestModel.ListOfDocument = selectedCheckBoxDataList;
                    fileData.append("requestModel", JSON.stringify(requestModel));

                    $.ajax({
                        url: '@Url.Action("UploadCarDocument")',
                        type: "POST",
                        contentType: false, // Not to set any content header
                        processData: false, // Not to process data
                        data: fileData,
                        success: function (result) {

                            $("#uploadFileStatusModel").modal('hide');
                            setTimeout(function () {
                                Helper.Methods.ShowPopUp("Success", result.Message);
                            }, 1000);
                        },
                        error: function (err) {
                            ShowHideModelFooter(0);
                            $('.loadingDiv').hide();
                            alert(err.statusText);
                        }
                    });
                }

                else {
                    $('.fileErrorText').text("Please select invoice # first");
                }
            }
        });

        GetSelectedCheckedBoxData = function (documentStatusId) {
            var selectedCheckBoxDataList = [];

            $("#documentTable tr td  input:checked").each(function () {

                var data = {};
                data.CustomerProductInvoiceId = $(this).closest('tr').find('.customerInvoiceId').val();
                data.ChassisNumber = $(this).closest('tr').find('.chassisNumber').text();
                data.PurchaseId = $(this).closest('tr').find('.purchaseId').val();
                data.ExporterId = $(this).closest('tr').find('.exportComapny').val();
                data.ShelfId = $(this).closest('tr').find('.shelfLocation').val();
                data.FileNumber = $(this).closest('tr').find('.fileLocation').val();
                data.DocumentStatusId = documentStatusId;
                selectedCheckBoxDataList.push(data);              
            });
            return selectedCheckBoxDataList;
        };

        UpdateCarPendingStatus = function (data , element , borderColor) {

            var isValid = true;

            if (data.UpdatedListOfExportDocument.length < 1) {
                alert("Please select atleast one record.");
                return false;
            }

            $.each(data.UpdatedListOfExportDocument, function (index, object) {

                if (object.ShelfId == 0) {

                    alert("Please select shelf for Chassis # " + object.ChassisNumber);
                    isValid = false;
                    return false;
                }

                else {

                    if (object.FileNumber == 0) {
                        alert("Please select fileNumber for Chassis # " + object.ChassisNumber);
                        isValid = false;
                        return false;
                    }
                }
            });

            if (!isValid){
                return false;
            }

            $.ajax({
                async: true,
                type: 'POST',
                cache: false,
                data: data,
                crossDomain: true,
                url: '@Url.Action("UpdateCarDocumentStatus")',
                success: function (data) {
                    if (!data.IsValid) {
                        alert("Something went wrong. Please try again later.");
                    }

                    else {
                        GetDocumentStats(element, borderColor);
                        $("#documentTable tr td input:checked").closest('tr').remove();
                        Helper.Methods.ShowPopUp("Success", 'Record Updated Successfully!');
                    }
                }
            });
        };

        Helper.Methods.ApplyPagination(currentPage, pageSize, totalResults, resultsCount, paginationTemplateHTML);
    });


</script>

<script id="paginationTemplate" type="text/template">
    <li class="{{activeClassName}}">
        <a href="javascript:;" class="paging" onclick="GetPendingCarDocument({{currentPage}} , '@Model.PageSize')">{{i}}</a>
    </li>
</script>


+ _PendingDocumentReport.cshtml

@model JTJapan.Core.AdminArea.ViewModel.PendingDocumentReportModel
@using JTJapan.Core
<style>
    .NoRecord {
        width: 100%;
    }

        .NoRecord tr td {
            text-align: center;
            padding-bottom: 2%;
        }

    .Miss-Chassis {
        width: 25% !important;
        margin-top: 2% !important;
    }

        .Miss-Chassis table thead {
            color: #FF0000 !important;
        }

    a {
        cursor: pointer;
    }

    table td, th {
        border: 1px solid #c4c4c4 !important;
    }
</style>
<section class="content">
    <div>
        <div class="box box-primary">
            <div class="box-body table-responsive no-padding">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th colspan="7">   </th>
                            <th colspan="2" class="text-center">Shipment </th>
                            <th colspan="3" class="text-center">Bill Of Lading </th>
                        </tr>
                        <tr>
                            <th style="width:1%">  # </th>
                            <th style="width:5%">Client</th>
                            <th style="width:8%">Car Document</th>
                            <th style="width:8%">Export Certificate </th>
                            <th style="width:8%">Unit Pictures</th>
                            <th style="width:8%">Alteration Pending</th>
                            <th style="width:8%">Inspection Pending</th>
                            <th style="width:8%">Pending</th>
                            <th style="width:8%">Requested</th>
                            <th style="width:8%">Pending</th>
                            <th style="width:8%">Unpaid</th>
                            <th style="width:8%">Original</th>
                            <th style="width:8%">DHL Pending</th>
                            <th style="width:6%" rowspan="2">Action</th>

                        </tr>
                    </thead>
                    <tbody class="tbDetail">
                        @if (Model.ListOfPendingDocument.Count() != 0)
                        {

                            foreach (var item in Model.ListOfPendingDocument.Select((value, i) => new { i = i + 1, value }))
                            {
                                <tr>
                                    <td>@(@item.i)</td>
                                    <td>
                                        <span>@item.value.Title</span>
                                    </td>
                                    <td>
                                        @if (item.value.CarDocumentsPending != 0)
                                        {
                                            <a data-toggle="modal" data-target="#PendingDocumentModel" onclick="GetPendingDocumentDetail(@item.value.ClientId,'@((int)Constants.OG_ProductDocumentStatus.CarDocuments_Pending)' )">
                                                @item.value.CarDocumentsPending
                                            </a>
                                        }
                                        else
                                        {
                                            @item.value.CarDocumentsPending
                                        }
                                    </td>
                                    <td>
                                        @if (item.value.ExportCertificatePending != 0)
                                        {
                                            <a data-toggle="modal" data-target="#PendingDocumentModel" onclick="GetPendingDocumentDetail(@item.value.ClientId,'@((int)Constants.OG_ProductDocumentStatus.ExportCertificate_Pending)' )">
                                                @item.value.ExportCertificatePending
                                            </a>
                                        }
                                        else
                                        {
                                            @item.value.ExportCertificatePending
                                        }
                                    </td>
                                    <td>
                                        @if (item.value.UnitPicturesPending != 0)
                                        {
                                            <a data-toggle="modal" data-target="#PendingDocumentModel" onclick="GetPendingDocumentDetail(@item.value.ClientId,'@((int)Constants.OG_ProductDocumentStatus.UnitPictures_Pending)' )">
                                                @item.value.UnitPicturesPending
                                            </a>
                                        }
                                        else
                                        {
                                            @item.value.UnitPicturesPending
                                        }

                                    </td>
                                    <td>
                                        @if (item.value.AlterationPending != 0)
                                        {
                                            <a data-toggle="modal" data-target="#PendingDocumentModel" onclick="GetPendingDocumentDetail(@item.value.ClientId,'@((int)Constants.OG_ProductDocumentStatus.Alteration_Pending)' )">
                                                @item.value.AlterationPending
                                            </a>
                                        }
                                        else
                                        {
                                            @item.value.AlterationPending
                                        }

                                    </td>
                                    <td>
                                        @if (item.value.InspectionPending != 0)
                                        {
                                            <a data-toggle="modal" data-target="#PendingDocumentModel" onclick="GetPendingDocumentDetail(@item.value.ClientId,'@((int)Constants.OG_ProductDocumentStatus.Inspection_Pending)' )">
                                                @item.value.InspectionPending
                                            </a>
                                        }
                                        else
                                        {
                                            @item.value.InspectionPending
                                        }
                                    </td>
                                    <td>
                                        @if (item.value.ShipmentBookingPending != 0)
                                        {
                                            <a data-toggle="modal" data-target="#PendingDocumentModel" onclick="GetPendingDocumentDetail(@item.value.ClientId,'@((int)Constants.OG_ProductDocumentStatus.ShipmentBooking_Pending)' )">
                                                @item.value.ShipmentBookingPending
                                            </a>
                                        }
                                        else
                                        {
                                            @item.value.ShipmentBookingPending
                                        }
                                    </td>
                                    <td>
                                        @if (item.value.ShipmentBookingRequested != 0)
                                        {
                                            <a data-toggle="modal" data-target="#PendingDocumentModel" onclick="GetPendingDocumentDetail(@item.value.ClientId,'@((int)Constants.OG_ProductDocumentStatus.ShipmentBooking_Requested)' )">
                                                @item.value.ShipmentBookingRequested
                                            </a>
                                        }
                                        else
                                        {
                                            @item.value.ShipmentBookingRequested
                                        }
                                    </td>
                                    <td>
                                        @if (item.value.BLPending != 0)
                                        {
                                            <a data-toggle="modal" data-target="#PendingDocumentModel" onclick="GetPendingDocumentDetail(@item.value.ClientId,'@((int)Constants.OG_ProductDocumentStatus.BLPending)' )">
                                                @item.value.BLPending
                                            </a>
                                        }
                                        else
                                        {
                                            @item.value.BLPending
                                        }
                                    </td>
                                    <td>
                                        @if (item.value.BLUploaded != 0)
                                        {
                                            <a data-toggle="modal" data-target="#PendingDocumentModel" onclick="GetPendingDocumentDetail(@item.value.ClientId,'@((int)Constants.OG_ProductDocumentStatus.BLUploadedPaymentPending)' )">
                                                @item.value.BLUploaded
                                            </a>
                                        }
                                        else
                                        {
                                            @item.value.BLUploaded
                                        }
                                    </td>
                                    <td>
                                        @if (item.value.BLPaymentDone != 0)
                                        {
                                            <a data-toggle="modal" data-target="#PendingDocumentModel" onclick="GetPendingDocumentDetail(@item.value.ClientId,'@((int)Constants.OG_ProductDocumentStatus.BLPaymentDoneRequestEmailPending)' )">
                                                @item.value.BLPaymentDone
                                            </a>
                                        }
                                        else
                                        {
                                            @item.value.BLPaymentDone
                                        }
                                    </td>
                                    <td>
                                        @if (item.value.DHLPending != 0)
                                        {
                                            <a onclick="RedirectToDHL()">
                                                @item.value.DHLPending
                                            </a>
                                        }
                                        else
                                        {
                                            @item.value.DHLPending
                                        }

                                    </td>
                                    <td>
                                        <a onclick="ExportToExcel(2,@item.value.ClientId)">Export To Excel</a>
                                    </td>
                                </tr>
                            }
                        }

                    </tbody>
                </table>
                @if (Model == null || Model.ListOfPendingDocument == null || Model.ListOfPendingDocument.Count() == 0)
                {
                    <table class="NoRecord">
                        <tr>
                            <td>
                                No record(s) found
                            </td>
                        </tr>
                    </table>
                }
            </div>

        </div>
    </div>
    <div class="modal fade" role="dialog" id="PendingDocumentModel">
    </div>

</section>
<script type="text/javascript">
    var DateFrom;
    var ToDate;
    var DocumentStatusId;
    var ClientId;
    $(document).ready(function () {

        GetfilteredRecords = function (DateFrom, ToDate) {
            var data = {};
            data.DateFrom = DateFrom;
            data.ToDate = ToDate;
            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',
                contentType: 'application/json; charset=utf-8',
                crossDomain: true,
                url: '@Url.Action("_PendingDocumentReport")',
                success: function (data) {
                    $('#ReportList').html(data);
                }
            });
        };
        GetPendingDocumentDetail = function (ClientId, DocumentStatusId) {
            var data = {};
            data.DateFrom = DateFrom;
            data.ToDate = ToDate;
            data.DocumentStatusId = DocumentStatusId;
            data.ClientId = ClientId;

            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',
                contentType: 'application/json; charset=utf-8',
                crossDomain: true,
                url: '@Url.Action("_PendingDocumentReportDetail")',
                success: function (data) {
                    $('#PendingDocumentModel').html(data);
                }
            });

        }

        RedirectToDHL = function () {
            var fromDate = new Date($('#startDate').text());
            var toDate = new Date($('#endDate').text());
            var fromMonth = fromDate.getMonth() + 1;
            var toMonth = toDate.getMonth() + 1;

            window.open('http://admin.autosapi.com/Document/_DocumentPendingDetail?&fromdate=' + fromMonth + '/' + fromDate.getDate() + '/' + fromDate.getFullYear() + '&todate=' + toMonth + '/' + toDate.getDate() + '/' + toDate.getFullYear() + '&SectionId=9&InvoiceNumber=&ClientId=1', '_blank');
        }

        ExportToExcel = function (type, Client) {
            if (DateFrom == undefined) {
                DateFrom = "";
            }
            if (ToDate == undefined) {
                ToDate = "";
            }
            if (type == 1) {
                window.location = "ExportToExcelPendingDocument?DateFrom=" + DateFrom + "&ToDate=" + ToDate + "&DocumentStatusId=" + DocumentStatusId + "&ClientId=" + ClientId;
            }
            else {
                if (Client == -1) {
                    Client = null;
                }
                window.location = "ExportToExcelPendingDocument?DateFrom=" + DateFrom + "&ToDate=" + ToDate + "&DocumentStatusIds=null&ClientId=" + Client;
            }
        };


    });
</script>


+ _PendingDocumentReportDetail.cshtml

@model JTJapan.Core.AdminArea.ViewModel.PendingDocumentReportDetailModel
<style>
    .modal-lg {
        width: 100% !important;
    }

    .modal-dialog {
        overflow-y: initial !important;
    }

    .modal-body {
        height: 550px;
        overflow-y: auto;
    }
</style>
<div class="modal-dialog modal-lg">
    <div class="modal-content">
        <div class="modal-header" style="background-color:#3C8DBC">

            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <h4 class="modal-title" style="color:white">Document Pending Detail</h4>


        </div>
        <div class="modal-body" style="padding-top: 4px;">
            <div class="pull-right" style="padding-bottom: 8px;">
                <button type="button" class="btn btn-success " onclick="ExportToExcel(1,0,0)">
                    Export To Excel
                </button>
            </div>
            <table id="tblPendingDocumentDetail" class="table table-striped">

                <tr>
                    <th style="width:2%">
                        #
                    </th>
                    <th style="width:8%">Invoice </th>
                    <th style="width:10%">Customer</th>
                    <th style="width:13%">Vehicle Detail</th>
                    <th style="width:8%">Port/Country</th>
                    <th style="width:14%">Status</th>
                    <th style="width:9%">Exporter Company</th>
                    <th style="width:10%">Auction House / Lot #</th>
                    <th style="width:8%">Purchase Vendor</th>
                    <th style="width:8%">Location</th>
                    <th style="width:8%">Shipping Line</th>
                    <th style="width:3%">CnF Amount</th>
                    <th style="width:6%">Amount </th>
                    <th style="width:4%">Remaining Amount</th>

                </tr>

                @foreach (var item in Model.ListOfPendingDocumentDetail.Select((value, i) => new { i = i + 1, value }))
                {
                    <tr>
                        <td style="width:2%">
                            @item.i
                        </td>
                        <td style="width:8%">
                            <span>@item.value.InvoiceNumber</span><br />
                            <span class="second">@item.value.InvoiceDate.ToString("MMM dd, yyyy")</span>
                        </td>
                        <td style="width:10%">
                            <span>@item.value.CustomerID</span><br />
                            <span class="second">@item.value.CustomerName</span>
                        </td>
                        <td style="width:13%">
                            <span>@item.value.ChassisNumber</span><br />
                            <span class="second">@item.value.MakeName @item.value.ModelName </span><br />
                            <span class="third">@item.value.ProductionYear</span>
                        </td>
                        <td style="width:8%">
                            <span>@(String.IsNullOrEmpty(item.value.PortName) ? "-" : item.value.PortName) </span><br />
                            <span class="second">@(String.IsNullOrEmpty(item.value.CountryName) ? "-" : item.value.CountryName)</span>
                        </td>
                        <td style="width:14%">@item.value.Status</td>
                        <td style="width:9%">@item.value.ExporterCompany</td>
                        <td style="width:10%">
                            <span>@item.value.AuctionHouse </span><br />
                            <span class="second">@item.value.LotNumber</span>
                        </td>
                        <td style="width:8%">
                            <span>
                                @item.value.PurchaseVendor)
                            </span>
                            <br />
                            <span class="second">@item.value.PurchaseDate.ToString("MMM dd, yyyy")</span>
                        </td>
                        <td style="width:8%">
                            @if (item.value.TransferLocation != null)
                            {
                                <span>   T : @item.value.TransferLocation</span><br />
                            }
                            @if (item.value.ReceievedLocation != null)
                            {
                                <span>R : @item.value.ReceievedLocation</span>
                            }
                        </td>
                        <td style="width:8%">@item.value.ShippingLine</td>
                        <td style="width:3%">@item.value.CnFAmount</td>
                        <td style="width:6%">
                            @if (item.value.InitializedAmount != null)
                            {
                                <span>   I:@item.value.InitializedAmount</span><br />
                            }
                        @if (item.value.ReceivedAmount != null)
                        {
                            <span>R:@item.value.ReceivedAmount</span>
                        }
                    </td>
                  
                    <td style="width:4%">
                        <span>
                            @item.value.RemainingAmount
                        </span><br />
                        <span class="second">(@item.value.RemainingPercentage %)</span>
                    </td>

                </tr>
                }


            </table>

        </div>

    </div>
</div>
<script type="text/javascript">

    $(document).ready(function () {
        DocumentStatusId = parseInt('@Model.DocumentStatusId');
        ClientId = parseInt('@Model.ClientId');
    });
</script>

+ _PendingExportCertificate.cshtml


@using JTJapan.Core;
@model JTJapan.Core.AdminArea.ViewModel.DocumentReceivingViewModelResponseModel


@{
    var Count = (Model.PageSize * (Model.CurrentPage - 1));
}

<section>

    @if (!string.IsNullOrEmpty(ViewBag.Message))
    {
        <div class="col-xs-2" style="display:none;">
            <select class="form-control page-size" style="width: 60px; padding: 2px 2px; height: 28px;">
                <option selected>25</option>
                <option>50</option>
                <option>100</option>
            </select>
        </div>
    }

    <div class="box">
        <div class="box-body no-padding">
            <div class="box-header">
                <div class="col-md-2">
                    <select id="documentStatusFilter" class="form-control" style="padding: 2px 2px; height: 28px;">
                        <option value="-1" selected>Select All</option>
                        <option value="20010">Pending</option>
                        <option value="20020">Received</option>
                        <option value="20030">Uploaded</option>
                    </select>
                </div>

                <div class="col-md-6 ">
                    <div class="input-group input-group-sm">
                        <input id="txtChassisNo" type="text" class="form-control" placeholder="Chassis # 1 , Chassis # 2" maxlength="1000">
                        <span class="input-group-btn">
                            <button class="btn btn-primary btn-flat" type="button" id="btnChassisNo"><i class="glyphicon glyphicon-search"></i></button>
                        </span>
                    </div>
                </div>

                <div style="float:right;">
                    <button id="exportToExcel" data-toggle="tooltip" data-placement="top" title="Export To Excel" type="button" class="btn btn-block btn-success">
                        <i class="fa fa-file-excel-o"></i>
                    </button>
                </div>

            </div>

            <table id="documentTable" class="table table-striped">
                <tr>
                    <th style="width: 4%">
                        #
                        <input type="checkbox" id="BulkSelect">
                    </th>
                    <th style="width: 10%">Unit Details</th>
                    <th style="width: 6%">Invoice #</th>
                    <th style="width: 10%">Chassis #</th>
                    <th style="width: 7%">Auction House</th>
                    <th style="width: 8%">Purchase</th>

                    <th style="width: 10%">
                        <div class="form-group">
                            @Html.DropDownList("ExportBulkDropdown", new SelectList((IEnumerable<SelectListItem>)ViewBag.ExporterList, "Value",
                                    "Text", 0), new { @class = "form-control select2 input-sm" })
                        </div>
                    </th>
                    <th style="width: 10%">
                        <div class="input-group date">
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                            <input id="ExpiryDateBulk" type="text" placeholder="Expiry Date" class="form-control pull-right" readonly>
                        </div>
                    </th>

                    <th style="width: 8%">
                        Shelf
                        @*@Html.DropDownList("ShelfBulkDropdown", new SelectList((IEnumerable<SelectListItem>)ViewBag.ShelfList, "Value",
                                    "Text", 0), new { @class = "form-control select2 input-sm" })*@
                    </th>
                    <th style="width: 8%; text-align:center;">Document</th>

                </tr>

                @if (!string.IsNullOrEmpty(ViewBag.Message))
                {
                    <tr>
                        <td colspan="9" style="text-align:center;">@ViewBag.Message</td>
                    </tr>
                }

                else
                {
                    foreach (var item in Model.DocumentList.Select((value, i) => new { i = i + 1, value }))
                    {
                        <tr>
                            <td>
                                @(Count + @item.i)

                                <input type="checkbox">

                                @Html.HiddenFor(items => items.DocumentList[item.i - 1].CustomerProductInvoiceId,
                                new
                                {
                                    @class = "customerInvoiceId"
                                })
                            </td>
                            <td>
                                @item.value.MakeName @item.value.ModelName <br />
                                @item.value.ProductionYear
                            </td>
                            <td>@item.value.InvoiceNumber</td>
                            <td class="chassisNumber">@item.value.ChassisNumber</td>
                            <td class="auctionHouse">@item.value.AuctionHouse</td>
                            <td>
                                @item.value.PurchaseVendor <br />
                                @item.value.PurchaseDate.ToString("MMM dd, yyyy")
                            </td>

                            <td>
                                <div class="form-group">
                                    @Html.DropDownList("ExporterCompanyId", new SelectList((IEnumerable<SelectListItem>)ViewBag.ExporterList, "Value",
                                    "Text", item.value.ExporterCompanyId),
                                     new { @class = "form-control select2 input-sm exportComapny" })
                                </div>
                            </td>

                            <td>
                                <div class="input-group date">
                                    <div class="input-group-addon">
                                        <i class="fa fa-calendar"></i>
                                    </div>

                                    @if (item.value.ExpiryDate != null)
                                    {
                                        @Html.TextBoxFor(items => items.DocumentList[item.i - 1].ExpiryDate,
                                             new
                                             {
                                                 @class = "form-control pull-right expiryDate",
                                                 @value = item.value.ExpiryDate

                                             })
                                    }

                                    else
                                    {
                                        <input type="text" placeholder="Expiry Date" class="form-control pull-right expiryDate" />
                                    }
                                </div>
                            </td>

                            <td>
                                @item.value.ShelfLocation
                                @*<div class="form-group">
                                    @Html.DropDownList("ShelfListId", new SelectList((IEnumerable<SelectListItem>)ViewBag.ShelfList, "Value",
                                    "Text", item.value.ShelfId),
                                       new { @class = "form-control select2 input-sm shelfLocation" })

                                </div>*@
                            </td>

                            <td class="exporterStatus">

                                @if (item.value.ExportDocumentStatus == 1)
                                {
                                    <span class="label label-warning">
                                        Pending
                                    </span>
                                }

                                else if (item.value.ExportDocumentStatus == 2)
                                {
                                    <span class="label label-primary">
                                        Received
                                    </span>
                                }

                                else
                                {
                                    <span class="label label-success">
                                        Uploaded
                                    </span>
                                }

                                @if (!string.IsNullOrEmpty(item.value.ImageURL))
                                {
                                    <span>
                                        <a style="padding-left:10px" title="View Export Certificate" href="@item.value.ImageURL" target="_blank">
                                            <i class="fa fa-file-image-o"> </i>
                                        </a>
                                    </span>
                                }
                            </td>
                        </tr>
                    }
                }
            </table>

        </div>

        @if (string.IsNullOrEmpty(ViewBag.Message))
        {
            <div class="row">
                <div class="customPagination">
                    <div class="col-xs-12">
                        <div class="box UserVM" style="margin-bottom:0px;">
                            <div class="box-footer clearfix">
                                <div class="col-xs-5">
                                    <div class="dataTables_info" role="status" aria-live="polite">Showing <span class="customRange">0</span> of <span class="customTotalResult">0</span>  entries</div>
                                </div>

                                <div class="col-xs-1 text-center">Page Size</div>
                                <div class="col-xs-2">
                                    <select class="form-control page-size" style="width: 60px; padding: 2px 2px; height: 28px;">
                                        <option selected>25</option>
                                        <option>50</option>
                                        <option>100</option>
                                    </select>
                                </div>

                                <div class="col-xs-4">
                                    <ul class="pagination pagination-sm no-margin pull-right"></ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="modal fade" role="dialog" id="uploadFileStatusModel">
            @* Partial view will be load on upload event handler *@
        </div>
    </div>

    @if (string.IsNullOrEmpty(ViewBag.Message))
    {
        <div class="row">
            <div class="col-md-2 col-md-offset-4">
                <button id="exportCertificateActionButton" type="button" class="btn btn-block btn-primary">
                    <i class="fa fa-check-square-o"></i>
                    Received
                </button>
            </div>

            <div class="col-md-2">
                <button id="uploadButton" type="button" data-toggle="modal" data-target="#uploadFileStatusModel" class="btn btn-block btn-success">
                    <i class="fa fa-upload"></i>
                    Upload
                </button>
            </div>
        </div>
    }

    @if (Model.MissingChassisList.Count > 0)
    {
        <div class="box" style="width:30%">
            <div class="box-body no-padding">
                <table id="MissingChassisTable" class="table table-striped">
                    <tr>
                        <th style="width: 4%">
                            Sno
                        </th>
                        <th style="width: 10%">Missing Chassis #</th>
                    </tr>

                    @foreach (var item in Model.MissingChassisList.Select((value, i) => new { i = i + 1, value }))
                    {
                        <tr>
                            <td>
                                @item.i
                            </td>
                            <td class="chassisNumber">@item.value.ChassisNumber</td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    }
</section>

<script>

    //Dont put this method in document ready as it is converting
    //date string to date using moment.js. Puting it into document.ready will
    //show date in string for couple of seconds
    $('.expiryDate').each(function () {
        var dateInString = $(this).val();
        if (dateInString != "") {
            //var dateformat = "DD/MMM/YYYY";   // IIS Server
            var dateformat = "MM/DD/YYYY";  //Local IIS
            var year = moment(dateInString, dateformat).format("YYYY");
            var month = moment(dateInString, dateformat).format("MM");
            var date = moment(dateInString, dateformat).format("DD");
            $(this).datepicker('setDate', new Date(year, month - 1, date));
        }
    });

    $(document).ready(function () {

        var currentPage = parseInt('@Model.CurrentPage');
        var totalResults = parseInt('@Model.TotalResults');
        var paginationTemplateHTML = $('#paginationTemplate').html();
        var pageSize = parseInt('@Model.PageSize');
        var resultsCount = parseInt('@Model.DocumentList.Count');
        var documentStatusId = parseInt('@Model.DocumentStatusId');

        $(".page-size").val(pageSize);
        $("#documentStatusFilter").val(documentStatusId);
        $("#txtChassisNo").val('@Model.MultipleChassisNumbers');

        //Initialize Select2 Elements
        //$('#ShelfBulkDropdown , .shelfLocation').select2();

        $(".customPagination ul.pagination").on("click", ".rightnav", function () {
            GetPendingExportCertificate(currentPage + 1, pageSize);
        });

        $(".customPagination ul.pagination").on("click", ".leftnav", function () {
            GetPendingExportCertificate(currentPage - 1, pageSize);
        });

        $(".page-size").change(function () {

            var changePageSize = $(this).val();
            GetPendingExportCertificate(1, changePageSize);
        });

        $('#ExportBulkDropdown').change(function () {
            $(this).closest('tr').siblings('tr').find('td select.exportComapny').val($(this).val());
        });

        //$('#ShelfBulkDropdown').change(function () {
        //    $(this).closest('tr').siblings('tr').find('td select.shelfLocation').val($(this).val()).trigger('change');
        //});

        $("#BulkSelect").change(function () {
            $(this).closest('tr').siblings('tr').find(':checkbox').attr('checked', this.checked);
        });

        $('#ExpiryDateBulk').change(function () {
            var currentDate = $(this).datepicker("getDate");
            $(this).closest('tr').siblings('tr').find('td .expiryDate').datepicker("setDate", currentDate);
        });

        $('#documentStatusFilter').change(function () {
            GetPendingExportCertificate(1, pageSize);
        });

        $('#btnChassisNo').click(function () {
            GetPendingExportCertificate(1, pageSize);
        });

        $('#ReportList').on("click", "#exportToExcel", function () {

            var data = {};
            data.ChassisNumbers = $('#txtChassisNo').val();
            data.documentStatusId = $('#documentStatusFilter').val();
            ExportToExcelAjaxRequest(data);

        });

        ExportToExcelAjaxRequest = function (data) {
            window.location = "ExportCertificateToExcel?chassisNumbers=" + data.ChassisNumbers + "&documentStatusId=" + data.documentStatusId;
        };

        $('#txtChassisNo').keyup(function (e) {
            if (e.keyCode == 13) {
                GetPendingExportCertificate(1, pageSize);
            }
        });

        $("#exportCertificateActionButton").click(function () {
            var data = {};
            data.UpdatedListOfExportDocument = GetSelectedCheckedBoxData();
            UpdatePendingExportCerificateStatus(data);
        });

        $('#uploadButton').click(function () {
            GetExportDocumentZipFileStatus();
        });

        $('#uploadFileStatusModel').on("change", "#fileUpload", function () {

            var fileData = ValidateFile();
            if (fileData.IsValid) {

                $("#btnUpload").css("display", "inline-block");
                $('.loadingDiv').show();
                $.ajax({
                    url: '@Url.Action("_ExportDocumentFileDetail")',
                    type: "POST",
                    contentType: false, // Not to set any content header
                    processData: false, // Not to process data
                    data: fileData,
                    success: function (result) {
                        $('.loadingDiv').hide();
                        $('#uploadDocumentStatusDetail').html(result);
                        ValidateDetailView();
                    },
                    error: function (err) {
                        $('.loadingDiv').hide();
                        alert(err.statusText);
                    }
                });
            }

            else
            {
                $("#btnUpload").css("display", "none");
            }


        });

        $('#uploadFileStatusModel').on("click", "#btnUpload", function () {

            var fileData = ValidateFile();
            if (fileData.IsValid) {

                if ($('.chkd:checked').length > 0) {
                    ShowHideModelFooter(0);
                    $('.loadingDiv').show();
                    var selectedCheckBoxDataList = [];
                    $("#exportDocumentStatusTable tr td  input:checked").each(function () {

                        var data = {};
                        data.ChassisNumber = $(this).closest('tr').find('.chassisNumber').text();
                        data.InvoiceNumber = $(this).closest('tr').find('.invoicenumber').text();
                        data.CustomerProductInvoiceId = $(this).closest('tr').find('.customerProductInvoiceId').val();
                        data.ClientId = $(this).closest('tr').find('.ClientId').val();
                        data.StatusId = $(this).closest('tr').find('.DocumentStatusId').val();
                        selectedCheckBoxDataList.push(data);
                    });

                    var requestModel = {};
                    requestModel.ListOfDocument = selectedCheckBoxDataList;
                    fileData.append("requestModel", JSON.stringify(requestModel));

                    $.ajax({
                        url: '@Url.Action("UploadExportCertificate")',
                        type: "POST",
                        contentType: false, // Not to set any content header
                        processData: false, // Not to process data
                        data: fileData,
                        success: function (result) {

                            $("#uploadFileStatusModel").modal('hide');
                            setTimeout(function () {

                                Helper.Methods.ShowPopUp("Success", result.Message);
                            }, 1000);
                        },
                        error: function (err) {
                            ShowHideModelFooter(1);
                            $('.loadingDiv').hide();
                            alert(err.statusText);
                        }
                    });
                }

                else {
                    $('.fileErrorText').text("Please select invoice # first");
                }
            }
        });

        UpdatePendingExportCerificateStatus = function (data) {

            if (data.UpdatedListOfExportDocument.length < 1) {
                alert("Please select atleast one record.");
                return false;
            }

            $.ajax({
                async: true,
                type: 'POST',
                cache: false,
                data: data,
                crossDomain: true,
                url: '@Url.Action("UpdateExportCertificateStatus")',
                success: function (data) {
                    if (!data.IsValid) {
                        alert("Something went wrong. Please try again later.");
                    }

                    else {
                        GetDocumentStats("#exportCertificatePending", '5px solid rgba(7, 115, 25, 0.91)');
                        if ($('#documentStatusFilter').val() == '@Constants.OG_ProductDocumentStatus.ExportCertificate_Pending.GetHashCode()'){
                            $("#documentTable tr td input:checked").closest('tr').remove();
                        }
                        Helper.Methods.ShowPopUp("Success", 'Records Updated Successfully!');
                    }
                }
            });
        };

        GetSelectedCheckedBoxData = function () {
            var selectedCheckBoxDataList = [];

            $("#documentTable tr td  input:checked").each(function () {
                var data = {};
                if ($(this).closest('tr').find('.expiryDate').val() != "") {
                    //var expiryDate = $(this).closest('tr').find('.expiryDate').datepicker("getDate");
                    var expiryDate = $(this).closest('tr').find('.expiryDate').val();
                    data.ExpiryDate = expiryDate;
                }
                data.ExporterId = $(this).closest('tr').find('.exportComapny').val();
                data.CustomerProductInvoiceId = $(this).next('.customerInvoiceId').val();
                //data.ShelfId = $(this).closest('tr').find('.shelfLocation').val();
                data.DocumentStatusId = '@((int)Constants.OG_ProductDocumentStatus.ExportCertificate_Received)';
                selectedCheckBoxDataList.push(data);
            });
            return selectedCheckBoxDataList;
        };

        GetExportDocumentZipFileStatus = function () {

            var data = {};

            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',   //response format
                contentType: 'application/json; charset=utf-8', //request format
                crossDomain: true,
                url: '@Url.Action("_ExportDocumentAttachFile")',
                success: function (data) {
                    $('#uploadFileStatusModel').html(data);
                    $('#uploadFileStatusModel .modal-title').text('Export Certificate Uploading');

                }
            });
        };

        $('.expiryDate, #ExpiryDateBulk').datepicker({
            autoclose: true,
        });

        Helper.Methods.ApplyPagination(currentPage, pageSize, totalResults, resultsCount, paginationTemplateHTML);
    });


</script>


<script id="paginationTemplate" type="text/template">
    <li class="{{activeClassName}}">
        <a href="javascript:;" class="paging" onclick="GetPendingExportCertificate({{currentPage}} , '@Model.PageSize')">{{i}}</a>
    </li>
</script>

+ _PendingInspectionCertificate.cshtml

@using JTJapan.Core;
@model JTJapan.Core.AdminArea.ViewModel.DocumentReceivingViewModelResponseModel

@{
    var Count = (Model.PageSize * (Model.CurrentPage - 1));
}


<section>

    @if (!string.IsNullOrEmpty(ViewBag.Message))
    {
        <div class="col-xs-2" style="display:none;">
            <select class="form-control page-size" style="width: 60px; padding: 2px 2px; height: 28px;">
                <option selected>25</option>
                <option>50</option>
                <option>100</option>
            </select>
        </div>

    }

    <div class="box">


        <div class="box-body no-padding">

            <div class="box-header">
                <div class="col-xs-6">
                    <div class="input-group input-group-sm">
                        <input id="txtChassisNo" type="text" class="form-control" placeholder="Chassis # 1 , Chassis # 2" maxlength="1000">
                        <span class="input-group-btn">
                            <button class="btn btn-primary btn-flat" type="button" id="btnChassisNo"><i class="glyphicon glyphicon-search"></i></button>
                        </span>
                    </div>
                </div>

                <div style="float:right;">
                    <button id="exportToExcel" data-toggle="tooltip" data-placement="top" title="Export To Excel" type="button" class="btn btn-block btn-success">
                        <i class="fa fa-file-excel-o"></i>
                    </button>
                </div>
            </div>


            <table id="documentTable" class="table table-striped">
                <tr>
                    <th style="width: 4%">
                        #
                    </th>
                    <th style="width: 10%">Unit Details</th>
                    <th style="width: 6%">Invoice #</th>
                    <th style="width: 10%">Chassis #</th>
                    <th style="width: 10%">Shipment Yard</th>
                    <th style="width: 10%">Shipment Type</th>
                    <th style="width: 10%">Country</th>
                    <th style="width: 10%">Port</th>
                    <th style="width: 10%">InspectionType</th>
                    <th style="width: 10%">InspectionCost</th>

                </tr>


                @if (!string.IsNullOrEmpty(ViewBag.Message))
                {
                    <tr>
                        <td colspan="10" style="text-align:center;">@ViewBag.Message</td>
                    </tr>
                }


                else
                {
                    foreach (var item in Model.DocumentList.Select((value, i) => new { i = i + 1, value }))
                    {
                        <tr>
                            <td>
                                @(Count + @item.i)
                            </td>
                            <td>
                                @item.value.MakeName @item.value.ModelName <br />
                                @item.value.ProductionYear
                            </td>
                            <td>@item.value.InvoiceNumber</td>
                            <td class="chassisNumber">@item.value.ChassisNumber</td>
                            <td>@item.value.ShippingYard</td>
                            <td>@item.value.ShippingType</td>
                            <td>@item.value.ShippingCountry</td>
                            <td>@item.value.ShippingPort</td>
                            <td>@item.value.InspectionType</td>
                            <td>@item.value.InspectionCost</td>
                        </tr>
                    }

                }

            </table>
        </div>


        @if (string.IsNullOrEmpty(ViewBag.Message))
        {
            <div class="row">
                <div class="customPagination">
                    <div class="col-xs-12">
                        <div class="box UserVM" style="margin-bottom:0px;">
                            <div class="box-footer clearfix">
                                <div class="col-xs-5">
                                    <div class="dataTables_info" role="status" aria-live="polite">Showing <span class="customRange">0</span> of <span class="customTotalResult">0</span>  entries</div>
                                </div>

                                <div class="col-xs-1 text-center">
                                    Page Size
                                </div>
                                <div class="col-xs-2">
                                    <select class="form-control page-size" style="width: 60px; padding: 2px 2px; height: 28px;">
                                        <option selected>25</option>
                                        <option>50</option>
                                        <option>100</option>
                                    </select>
                                </div>


                                <div class="col-xs-4">
                                    <ul class="pagination pagination-sm no-margin pull-right"></ul>
                                </div>


                            </div>

                        </div>
                    </div>

                </div>

            </div>
        }


        <div class="modal fade" role="dialog" id="uploadFileStatusModel">
            @* Partial view will be load on upload event handler *@
        </div>

    </div>


    @if (string.IsNullOrEmpty(ViewBag.Message))
    {
        <div class="row">
            <div class="col-md-2 col-md-offset-5">
                <button id="uploadButton" type="button" data-toggle="modal" data-target="#uploadFileStatusModel" class="btn btn-block btn-success">
                    <i class="fa fa-upload"></i>
                    Upload
                </button>
            </div>
        </div>
    }


    @if (Model.MissingChassisList.Count > 0)
    {
        <div class="box" style="width:30%">
            <div class="box-body no-padding">
                <table id="MissingChassisTable" class="table table-striped">
                    <tr>
                        <th style="width: 4%">
                            Sno
                        </th>
                        <th style="width: 10%">Missing Chassis #</th>
                    </tr>

                    @foreach (var item in Model.MissingChassisList.Select((value, i) => new { i = i + 1, value }))
                    {
                        <tr>
                            <td>
                                @item.i
                            </td>
                            <td class="chassisNumber">@item.value.ChassisNumber</td>

                        </tr>
                    }
                </table>
            </div>
        </div>
    }

</section>



<script>

    $(document).ready(function () {

        var currentPage = parseInt('@Model.CurrentPage');
        var totalResults = parseInt('@Model.TotalResults');
        var paginationTemplateHTML = $('#paginationTemplate').html();
        var pageSize = parseInt('@Model.PageSize');
        var resultsCount = parseInt('@Model.DocumentList.Count');

        $(".page-size").val(pageSize);
        $("#txtChassisNo").val('@Model.MultipleChassisNumbers')


        $('#ReportList').on("click", "#exportToExcel", function () {

            var data = {};
            data.ChassisNumbers = $('#txtChassisNo').val();
            data.documentStatusId =   50050;
            ExportToExcelAjaxRequest(data);

        });

        ExportToExcelAjaxRequest = function (data) {
            window.location = "InspectionCertificateToExcel?chassisNumbers=" + data.ChassisNumbers + "&documentStatusId=" + data.documentStatusId;
        };

        $(".customPagination ul.pagination").on("click", ".rightnav", function () {
            GetPendingInspectionCertificate(currentPage + 1, pageSize);
        });

        $(".customPagination ul.pagination").on("click", ".leftnav", function () {
            GetPendingInspectionCertificate(currentPage - 1, pageSize);
        });

        $(".page-size").change(function () {

            var changePageSize = $(this).val();
            GetPendingInspectionCertificate(1, changePageSize);

        });

        $('#btnChassisNo').click(function () {
            GetPendingInspectionCertificate(1, pageSize);
        });

        $('#txtChassisNo').keyup(function (e) {
            if (e.keyCode == 13) {
                GetPendingInspectionCertificate(1, pageSize);
            }
        });


        $('#uploadButton').click(function () {

            var data = {};

            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',   //response format
                contentType: 'application/json; charset=utf-8', //request format
                crossDomain: true,
                url: '@Url.Action("_InspectionCertificateAttachFile")',
                success: function (data) {
                    $('#uploadFileStatusModel').html(data);
                    $('#uploadFileStatusModel .modal-title').text('Inspection Certificate Uploading');

                }
            });
        });


        $('#uploadFileStatusModel').on("change", "#fileUpload", function () {

            var fileData = ValidateFile();
            if (fileData.IsValid) {
                $('.loadingDiv').show();
                $.ajax({
                    url: '@Url.Action("_InspectionCertificateFileDetail")',
                    type: "POST",
                    contentType: false, // Not to set any content header
                    processData: false, // Not to process data
                    data: fileData,
                    success: function (result) {
                        $('.loadingDiv').hide();
                        $('#uploadDocumentStatusDetail').html(result);
                        ValidateDetailView();

                    },
                    error: function (err) {
                        $('.loadingDiv').hide();
                        alert(err.statusText);
                    }
                });
            }
        });

        $('#uploadFileStatusModel').on("click", "#btnUpload", function () {

            var fileData = ValidateFile();
            if (fileData.IsValid) {

                if ($('.chkd:checked').length > 0) {

                    ShowHideModelFooter(0);
                    $('.loadingDiv').show();
                    var selectedCheckBoxDataList = [];
                    $("#exportDocumentStatusTable tr td  input:checked").each(function () {

                        var data = {};
                        data.ChassisNumber = $(this).closest('tr').find('.chassisNumber').text();
                        data.InvoiceNumber = $(this).closest('tr').find('.invoicenumber').text();
                        data.CustomerProductInvoiceId = $(this).closest('tr').find('.customerProductInvoiceId').val();
                        data.ClientId = $(this).closest('tr').find('.ClientId').val();
                        data.StatusId = $(this).closest('tr').find('.DocumentStatusId').val();

                        selectedCheckBoxDataList.push(data);
                    });

                    var requestModel = {};
                    requestModel.ListOfDocument = selectedCheckBoxDataList;
                    fileData.append("requestModel", JSON.stringify(requestModel));

                    $.ajax({
                        url: '@Url.Action("UploadInspectionCertificate")',
                        type: "POST",
                        contentType: false, // Not to set any content header
                        processData: false, // Not to process data
                        data: fileData,
                        success: function (result) {

                            $("#uploadFileStatusModel").modal('hide');
                            setTimeout(function () {
                                Helper.Methods.ShowPopUp("Success", result.Message);
                            }, 1000);
                        },
                        error: function (err) {

                            ShowHideModelFooter(1);
                            $('.loadingDiv').hide();
                            alert(err.statusText);
                        }
                    });


                }

                else {
                    $('.fileErrorText').text("Please select invoice # first");
                }

            }

        });



        Helper.Methods.ApplyPagination(currentPage, pageSize, totalResults, resultsCount, paginationTemplateHTML);

    });


</script>


<script id="paginationTemplate" type="text/template">
    <li class="{{activeClassName}}">
        <a href="javascript:;" class="paging" onclick="GetPendingCarDocument({{currentPage}} , '@Model.PageSize')">{{i}}</a>
    </li>
</script>


+ Index.cshtml


@using JTJapan.Core;
@{
    ViewBag.Title = "Documntation";
}


<!-- bootstrap datepicker -->
<script src="~/Assets/js/moment.js"></script>
<link rel="stylesheet" href="~/Assets/plugins/datepicker/datepicker3.css">
<script src="~/Assets/plugins/datepicker/bootstrap-datepicker.js"></script>

<style>
    td.exporterStatus {
        font-size: 13px;
        text-align: center;
    }

    .form-group {
        margin-bottom: 0px;
    }

    .expiryDate {
        height: 30px;
        line-height: 30px;
    }

    .auctionHouse {
        word-break: break-all;
    }

    #MissingChassisTable tr th{
        color: red; 
    }

    .select2 {
        width: 100% !important;
    }

    .dataWrapper {
        margin: 0 auto;
    }

    .info-box {
        cursor: pointer;
    }

    .info-box-content {
        height: 90px;
    }

    .dataTables_info {
        padding-left: 10px;
    }

    .actionButton {
        padding-top: 10px;
        padding-bottom: 10px;
    }

    .select2-selection {
        border-radius: inherit !important;
    }

</style>

<div class="content-wrapper">
    <section class="content">
        <div id="DocumentStats" class="dataWrapper">
            @Html.Action("_DocumentStats");
        </div>
        <div id="ReportList" class="dataWrapper">
            @Html.Action("_PendingCarDocument", new { pageSize = 25, pageNumber = 1 , documentStatusId = (int)Constants.OG_ProductDocumentStatus.CarDocuments_Pending });
        </div>

    </section>
</div>

<script>

    $(document).ready(function () {

        function GetPageSize() {
            return $('.page-size').val();
        }

        ChangeStyle = function(currentElement, style) {
            $('.info-box').css('border-top', 'none');
            $('#DocumentStats').find(currentElement).css('border-top', style);
        }

        $('#DocumentStats').on('click', '#carDocumentPending', function () {
            ChangeStyle(this, '5px solid #0483a2');
            GetPendingCarDocument(1, GetPageSize(), '@((int)Constants.OG_ProductDocumentStatus.CarDocuments_Pending)' , '');
        });

        $('#DocumentStats').on('click', '#carDocumentReceived', function () {
            ChangeStyle(this, '5px solid rgb(202, 8, 17)');
            GetPendingCarDocument(1, GetPageSize(), '@((int)Constants.OG_ProductDocumentStatus.CarDocument_Received)', '');
        });

        $('#DocumentStats').on('click', '#exportCertificatePending', function () {
            ChangeStyle(this, '5px solid rgba(7, 115, 25, 0.91)');
            GetPendingExportCertificate(1, GetPageSize(), '@((int)Constants.OG_ProductDocumentStatus.ExportCertificate_Pending)' , '');
        });

        $('#DocumentStats').on('click', '#inspectionCertificatePending', function () {
            ChangeStyle(this, '5px solid #a56706');
            GetPendingInspectionCertificate(1, GetPageSize() , '');
        });


        GetDocumentStats = function (element , bordorColor) {

            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                dataType: 'html',   //response format
                contentType: 'application/json; charset=utf-8', //request format
                crossDomain: true,
                url: '@Url.Action("_DocumentStats")',
                success: function (data) {
                    $('#DocumentStats').html(data);
                    ChangeStyle(element, bordorColor)
                }
            });
        }

        GetPendingCarDocument = function (pageNumber, pageSize, documentStatusId, chassisNumbers) {

            var data = {};
            data.pageSize = pageSize;
            data.PageNumber = pageNumber;
            data.ChassisNumbers = chassisNumbers == undefined ? $('#txtChassisNo').val() : chassisNumbers;
            data.documentStatusId = documentStatusId == undefined ? $('#documentStatusFilter').val() : documentStatusId;

            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',   //response format
                contentType: 'application/json; charset=utf-8', //request format
                crossDomain: true,
                url: '@Url.Action("_PendingCarDocument")',
                success: function (data) {
                    $('#ReportList').html(data);
                }
            });
        };

        GetPendingExportCertificate = function (pageNumber, pageSize, documentStatusId, chassisNumbers) {

            var data = {};
            data.pageSize = pageSize;
            data.PageNumber = pageNumber;
            data.ChassisNumbers = chassisNumbers == undefined ? $('#txtChassisNo').val() : chassisNumbers;
            data.documentStatusId = documentStatusId == undefined ? $('#documentStatusFilter').val() : documentStatusId;

            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',   //response format
                contentType: 'application/json; charset=utf-8', //request format
                crossDomain: true,
                url: '@Url.Action("_PendingExportCertificate")',
                success: function (data) {
                    $('#ReportList').html(data);
                }
            });
        };

        GetPendingInspectionCertificate = function (pageNumber, pageSize, chassisNumbers) {

            var data = {};
            data.pageSize = pageSize;
            data.PageNumber = pageNumber;
            data.ChassisNumbers = chassisNumbers == undefined ? $('#txtChassisNo').val() : chassisNumbers;

            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',   //response format
                contentType: 'application/json; charset=utf-8', //request format
                crossDomain: true,
                url: '@Url.Action("_PendingInspectionCertificate")',
                success: function (data) {
                    $('#ReportList').html(data);
                }
            });
        };

        ValidateFile = function () {

            var fileUpload = $('#fileUpload').get(0);
            var files = fileUpload.files;
            if (files.length > 0 && files.length == 1) {
                var filename = $('#fileUpload').val();
                var extension = filename.split(/[\s.]+/);
                extension = extension[extension.length - 1].toLowerCase();
                var fileData = new FormData();
                fileData.append(files[0].name, files[0]);

                if (extension == "zip") {
                    fileData.IsValid = true;
                }

                else {
                    fileData.IsValid = false;
                    $('.fileErrorText').text("Invalid Format");
                }

                return fileData;
            }

            else {

                $('.fileErrorText').text("Please upload file");
                return "";
            }
        };
    });

</script>



+ PendingDocumentReport.cshtml

@{
    ViewBag.Title = "Pending Document Report";
    int year = DateTime.Now.Year;
    DateTime firstDay = new DateTime(year, 1, 1);
    DateTime today = DateTime.Now;
}
<style>
   .linee {
        float: left !important;
    }

</style>
<!-- bootstrap datepicker -->
<script src="~/Assets/plugins/daterangepicker/moment.js"></script>
<script src="~/Assets/plugins/daterangepicker/daterangepicker.js"></script>
<link href="~/Assets/plugins/daterangepicker/daterangepicker.css" rel="stylesheet" />
<div class="content-wrapper">
    <section class="content-header">
        <div class="row" style="margin-left:0px; margin-right:0px;">
            <h4 class="pull-left">Document Pending Report</h4>

        </div>
        <div class="row">
            <div class="col-md-12 ">
                <div class="input-group" id="daterange-btn">
                    <div class="input-group-addon" style="background-color: #F4F4F4">
                        <i class="fa fa-calendar"></i>
                    </div>
                    <button type="button" class="btn btn-default pull-left" id="dateRangeButton">
                        <span id="startDate"></span> <span id="dash"> - </span> <span id="endDate"></span>&nbsp;
                        <span></span>&nbsp;
                        <i class="fa fa-caret-down"></i>
                    </button>
                </div>
            </div>
        </div>
    </section>

    <div id="ReportList" class="row" style="margin-left:0px; margin-right:0px;">

        @Html.Action("_PendingDocumentReport", new
    {
        DateFrom = firstDay.ToString(),
        ToDate = today.ToString()
    });

    </div>



</div>

<script>

 
    $(document).ready(function () {
        var date = new Date(), y = date.getFullYear(), m = date.getMonth();
       
        $('#startDate').text(moment(new Date(y, 0, 1)).format('MMMM DD, YYYY'));
        $('#endDate').text(moment(new Date()).format('MMMM DD, YYYY'));

        $('#dateRangeButton').daterangepicker(
        {
            ranges: {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
            },
            "linkedCalendars": false,
            startDate: moment(),//.subtract(29, 'days'),
            endDate: moment()
        },
        function (start, end) {
            $('#startDate').hide();
            $('#endDate').hide();
            $('#dash').hide();

            $('#dateRangeButton span').html(start.format('MMMM DD, YYYY') + ' - ' + end.format('MMMM DD, YYYY'));
            DateFrom = start.format('MMMM DD, YYYY');
            ToDate = end.format('MMMM DD, YYYY');
            GetfilteredRecords(DateFrom, ToDate);
          
        }
    );

    });
</script>


========Folder:Home
+ Dashboard.cshtml

@{
    ViewBag.Title = "Dashboard";
    DateTime firstDay = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime today = DateTime.Now;
}

<!-- bootstrap datepicker -->
<script src="~/Assets/plugins/daterangepicker/moment.js"></script>
<script src="~/Assets/plugins/daterangepicker/daterangepicker.js"></script>
<link href="~/Assets/plugins/daterangepicker/daterangepicker.css" rel="stylesheet" />
<div class="content-wrapper">
    <section class="content-header">
        <div class="row">
            <div class="col-md-8">
                <h4 class="pull-left">Dashboard</h4>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="input-group" id=" daterange-btn">
                    <div class="input-group-addon" style="background-color: #F4F4F4">
                        <i class="fa fa-calendar"></i>
                    </div>
                    <button type="button" class="btn btn-default pull-left" id="dateRangeButton">
                        <span id="startDate"></span> <span id="dash"> - </span> <span id="endDate"></span>&nbsp;
                        <span></span>&nbsp;
                        <i class="fa fa-caret-down"></i>
                    </button>
                </div>
            </div>
        </div>
</section>
    @Html.Action("_Dashboard", new
    {
        DateFrom = firstDay.ToString(),
        ToDate = today.ToString()
    });

</div>


<script type="text/javascript">
    $(document).ready(function () {
        var date = new Date(), y = date.getFullYear(), m = date.getMonth();

        $('#startDate').text(moment(new Date(y, m, 1)).format('MMMM DD, YYYY'));
        $('#endDate').text(moment(new Date()).format('MMMM DD, YYYY'));

        $('#dateRangeButton').daterangepicker(
        {
            ranges: {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
            },
            "linkedCalendars": false,
            startDate: moment(),
            endDate: moment()
        },
        function (start, end) {
            $('#startDate').hide();
            $('#endDate').hide();
            $('#dash').hide();

            $('#dateRangeButton span').html(start.format('MMMM DD, YYYY') + ' - ' + end.format('MMMM DD, YYYY'));
            DateFrom = start.format('MMMM DD, YYYY');
            ToDate = end.format('MMMM DD, YYYY');
            GetfilteredRecords(DateFrom, ToDate);
        }
    );

    });
</script>


+ Index.cshtml

<!-- bootstrap datepicker -->
<script src="~/Assets/js/moment.js"></script>

<link rel="stylesheet" href="~/Assets/plugins/datepicker/datepicker3.css">
<script src="~/Assets/plugins/datepicker/bootstrap-datepicker.js"></script>



<style>
    .control-sidebar {
        width: 400px !important;
        right: -400px;
    }
   
</style>
<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <h1 class="pull-left">
            Dashboard
            <small>Control panel</small>
        </h1>
        <button class="btn btn-primary btn-flat pull-right" type="button" data-toggle="control-sidebar">
            <i class="fa fa-fw fa-filter"></i> Filters
        </button>
    </section>
    <!-- Main content -->
    <section class="content">
        
    </section>
    <aside class="control-sidebar control-sidebar-dark" style="height: 750px">
        <!-- Tab panes -->
        <div class="tab-content">
            <!-- Home tab content -->
            <div class="tab-pane active" id="control-sidebar-home-tab">
                <h3 class="control-sidebar-subheading"><i class="fa fa-fw fa-filter"></i>Search Filters <i class="fa fa-fw fa-close pull-right" data-toggle="control-sidebar" style="cursor:pointer;"></i></h3>
                <div class="row" style="margin-top:20px;">
                    <div class="col-xs-12">
                        <div class="form-horizontal">
                            <div class="form-group">
                                <div class="col-md-6">
                                    <small>From</small>
                                    <div class="input-group date">
                                        <div class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </div>
                                        <input type="text" class="form-control pull-right" id="dateFrom" readonly>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <small>To</small>
                                    <div class="input-group date">
                                        <div class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </div>
                                        <input type="text" class="form-control pull-right" id="dateTo" readonly>
                                    </div>
                                </div>
                            </div>                            
                        </div>
                        <div class="form-group">
                            <div class="col-md-12 text-center">
                                <button class="btn btn-primary" type="button" data-toggle="control-sidebar" data-bind="click:function(){$root.ApplyFilter()}"><i class="fa fa-fw fa-search"></i> Apply Filters </button>
                                <button class="btn btn-default" type="button" data-bind="click:function(){$root.ClearFilter()}"><i class="fa fa-fw fa-refresh"></i> Clear Filters </button>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- /.tab-pane -->
            </div>
        </div>
    </aside>
    <!-- /.content -->
</div>

<script type="text/javascript">   
    $(document).ajaxStart(function () {
        Pace.restart()
    })
    $(function () {
        var date = new Date();
        $('#dateFrom').datepicker({
            autoclose: true
        });
        $('#dateFrom').datepicker('setDate', new Date(date.getFullYear(), date.getMonth(), date.getDate()));

        $('#dateTo').datepicker({
            autoclose: true,
            endDate: '+0d'
        });
        $('#dateTo').datepicker('setDate', new Date(date.getFullYear(), date.getMonth(), date.getDate()));
        
    });
</script>


+ SearchMaster.cshtml

<div class="content-wrapper">
    <div id="SearchPartial">
        @Html.Action("_SearchMaster", new
    {
    });
    </div>
</div>

==Folder :shared

+ _ChassisNoFilter.cshtml

<div class="col-lg-5 input-group input-group-sm pull-right">
    <textarea rows="3" id="txtChassisNo" name="txtChassisNo" class="form-control chassis-txtarea" placeholder="Chassis # 1 , Chassis # 2"></textarea>
    <span class="input-group-btn">
        <button class="btn btn-primary btn-flat" style="margin-right:5px;" type="button" id="btnChassisNo"><i class="glyphicon glyphicon-search"></i></button>
        <button class="btn btn-default" type="button" id="refreshbutton" onclick="location.reload();" value="Refresh"><i class="glyphicon glyphicon-refresh"></i></button>
    </span>
</div>
+ _Footer.cshtml

<footer class="main-footer">
    <div class="pull-right hidden-xs">
        <b>Version</b> 1.0.0
    </div>
    <strong>Copyright &copy; @DateTime.Now.Year Autos Trading.</strong> All rights
    reserved.
</footer>
+ _Header.cshtml
@{
    Layout = null;
    var UserName = @JTJapan.Core.Helper.AuthBase.UserName;
    //var clientId = @JTJapan.Core.Helper.AuthBase.ClientId;
}


<script type="text/javascript">


    function changeClient(id) {
        $.ajax({
            url: '/Home/UpdateClientId',
            dataType: 'json',
            type: 'POST',
            async: false,
            data: { 'ClientId': id },
            success: function (data) {
                location.reload();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                //console.log(XMLHttpRequest);
                //console.log("error occur : " + errorThrown + "  " + textStatus + "  " + XMLHttpRequest);
            }

        });
    };

    function SearchMaster(btn) {
        $('#txtsearch').val($.trim($('#txtsearch').val()));
        if ($('#txtsearch').val().length < 3) {
            return;
        }
        else {
            $('#searchForm').submit();
        }
    }

    function changeClientName(name) {

        $("[id*='btnClient']").text(name);
        $(".client-name").text(name.substring(0, 18));
        var img = location.origin + '/Assets/img/' + name + '.png';
        $(".admin-logo").attr('src', img);
    };

    $(document).ready(function () {
        $('#txtsearch').val($.trim($('#txtsearch').val()));
        $('#searchForm').on('submit', function (e) {
            if ($('#txtsearch').val().length < 3) {
                e.preventDefault();
            }
        });
    })
</script>
<header class="main-header">
    <!-- Logo -->
    <a href="../home/index" class="logo">
        <!-- mini logo for sidebar mini 50x50 pixels -->
        <span class="logo-mini pull-left"><img class="admin-logo" src="" title="Admin" width="40" height="28" /></span>
        <!-- logo for regular state and mobile devices -->
        <span class="logo-lg pull-left">
            <img class="admin-logo" src="" title="Automobile Admin" width="40" height="28" />
            <span class="client-name"></span>
        </span>
    </a>
    <!-- Header Navbar: style can be found in header.less -->
    <nav class="navbar navbar-static-top">
        <!-- Sidebar toggle button-->
        <a href="#" class="sidebar-toggle" data-toggle="push-menu" role="button">
            <span class="sr-only">Toggle navigation</span>
        </a>

        @using (Html.BeginForm("SearchMaster", "Home", FormMethod.Post, new { id = "searchForm" }))
        {<div class="col-md-6 pull-left" style="margin-left:100px; margin-top:8px;">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search by Chassis no.  or  Invoice no. " style="border-right:0px;" id="txtsearch" name="txtsearch" required>
                <span class="input-group-addon"><i class="fa fa-search" onclick="SearchMaster(this);"></i></span>
            </div>
        </div>
        }
        <div class="navbar-custom-menu">
            <ul class="nav navbar-nav">
                <li style="padding-top:8px;margin-right:15px;">
                    <div class="btn-group">
                        <button id="btnClient" type="button" class="btn btn-primary">Select Client</button>
                        <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                            <span class="caret"></span>
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <ul class="dropdown-menu" role="menu">
                            <li>
                                <a href="" onclick='changeClient(-1);'>
                                    Select All
                                </a>
                            </li>
                            @foreach (var item in ViewBag.ClientList)
                            {
                                <li>
                                    <a href="" onclick='changeClient(@item.Value);'>
                                        <img src='@Url.Content("~/Assets/img/" + item.Text + ".png")' title="" width="20" height="20" />
                                        @item.Text
                                    </a>
                                    <script type="text/javascript">
                                    @if (item.Value == Convert.ToString(JTJapan.Core.Helper.AuthBase.ClientId))
                                {
                                         @: changeClientName('@item.Text');
                                                                            }
                                    </script>
                                </li>
                            }
                        </ul>

                    </div>
                </li>
                <li class="dropdown user user-menu">
                    <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                        <img src='@Url.Content("~/Assets/img/default-user.png")' class="user-image" alt="User Image">
                        <span class="hidden-xs">@UserName</span>
                    </a>
                    <ul class="dropdown-menu">
                        <!-- User image -->
                        <li class="user-header">
                            <img src='@Url.Content("~/Assets/img/default-user.png")' class="img-circle" alt="User Image">
                            <p>
                                @UserName
                            </p>
                        </li>
                        <!-- Menu Footer-->
                        <li class="user-footer">
                            <div class="pull-right">
                                <a href='@(Url.Action("Logout", "Account"))' class="btn btn-default btn-flat">Sign out</a>
                            </div>
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
    </nav>

</header>


+ _Layout.cshtml

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=10; IE=9; IE=8; IE=7; IE=EDGE">
    <link rel="icon" type="image/png" href="~/Assets/img/favicon.ico">
    <title>@ViewBag.Title</title>

    <!-- Tell the browser to be responsive to screen width -->
    <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport">

    @System.Web.Optimization.Styles.Render("~/Assets/css/bundle")
    @System.Web.Optimization.Scripts.Render("~/Assets/Scripts")

    <style type="text/css">
        body {
            font-size: 14px !important;
        }

        .main-header .logo {
            font-size: 16px !important;
        }

        .info-box.count-box {
            min-height: 60px !important;
            max-height: 60px !important;
            cursor: pointer;
        }

        .info-box-content.count-box-content {
            margin-left: 0px !important;
        }

        .info-box-text.count-box-text {
            text-transform: none !important;
            vertical-align: middle;
            white-space: normal;
            overflow: hidden;
            max-height: 40px;
        }

        .info-box .circle {
            background-color: #3c8dbc;
            border: 2px solid #367fa9;
            border-radius: 200px;
            height: 40px;
            font-size: 20px;
            font-weight: bold;
            color: white;
            width: 40px;
            display: table;
            margin: 4px 5px 4px 0px;
            box-shadow: 3px -3px 5px #CCC;
        }

            .info-box .circle p {
                vertical-align: middle;
                display: table-cell;
                text-align: center;
            }

        .selected {
            border-top: solid;
            border-color: #3c8dbc;
        }

        .chassis-txtarea {
            height: auto !important;
            resize: none;
        }

            .chassis-txtarea + .input-group-btn {
                vertical-align: top !important;
            }

                .chassis-txtarea + .input-group-btn .btn {
                    height: 66px !important;
                }

        #modal-email .email-dialog {
            width: 90% !important;
        }

        .Email {
            padding-top: 2% !important;
        }

            .Email .box-body .input-group input.form-control, .Email .box-body .form-group textarea {
                background-color: #ffffff !important;
            }

            .Email .input-group-addon {
                font-weight: bold !important;
            }

        #modal-email .box-footer {
            text-align: left !important;
            border-top: none !important;
        }

        #modal-email .box-body .input-group input.form-control {
            right: 3px;
        }

        #compose-textarea {
            height: 225px !important;
            overflow-x: scroll !important;
        }

        .second {
            font-size: 11px;
            color: #333;
            word-break: break-all;
        }

        .third {
            font-size: 11px;
            color: #999;
            word-break: break-all;
        }

        .error {
            border: 1px solid red !important;
        }

        .red-text {
            color: red;
        }

        .green-text {
            color: green;
        }


    </style>

    <script>
        var AdminVD =  '@System.Configuration.ConfigurationManager.AppSettings["AdminVD"]';
    </script>

    <script type="text/javascript">
        $(document).ajaxStart(function () {
            Pace.restart();
        });
    </script>
</head>

<body class="hold-transition skin-black sidebar-mini sidebar-collapse">
    <div class="wrapper">

        @Html.Action("_Header", "Home", null)

        @Html.Action("_LeftSidebar", "Home", null)
        @*@Html.Partial("_LeftSidebarAdmin")*@

        @RenderBody()

        @Html.Partial("_Footer")
    </div>

    <div class="modal fade" id="msgModal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color:#3C8DBC">
                    <h4 class="modal-title" style="color:white"><b></b></h4>
                </div>
                <div class="modal-body" id="modalbody">
                    <p></p>
                </div>
            </div>
        </div>
    </div>

</body>

</html>

+ _LeftSidebar.cshtml

@model IEnumerable<JTJapan.Core.AdminArea.ViewModel.AdminMenu>
@{
    Layout = null;
    var UserName = @JTJapan.Core.Helper.AuthBase.UserName;
}

<aside class="main-sidebar">    
    <section class="sidebar">        
        <div class="user-panel">
            <div class="pull-left image">
                <img src='@Url.Content("~/Assets/img/default-user.png")' class="img-circle" alt="User Image">
            </div>
            <div class="pull-left info">
                <p>@UserName</p>
            </div>
        </div>        
        <ul class="sidebar-menu" data-widget="tree">
            @if (Model != null && Model.Count() > 0)
            {
                foreach (var menu in Model.GroupBy(x => x.CategoryId))
                {
                    <li class="treeview">
                        <a href="#">
                            <i class="@menu.FirstOrDefault().CssClass"></i>
                            <span>@menu.FirstOrDefault().CategoryName</span>
                            <span class="pull-right-container">
                                <i class="fa fa-angle-left pull-right"></i>
                            </span>
                        </a>
                        @if (Model.Where(x => x.CategoryId == menu.Key).Count() > 0)
                        {
                            <ul class="treeview-menu">
                                @foreach (var item in (Model.Where(x => x.CategoryId == menu.Key)))
                                {
                                    <li><a href='@(item.ScreenUrl)' @(item.TargetBlank == true ? "target='_blank'" : "")><i class="fa fa-circle-o"></i> @item.ScreenName</a></li>
                                }
                            </ul>
                        }
                    </li>
                }
            }

        </ul>
    </section>    
</aside>

+ _LeftSidebarAdmin.cshtml


 <!-- Left side column. contains the logo and sidebar -->
<aside class="main-sidebar NavigationVM" style="position: fixed">
    <!-- sidebar: style can be found in sidebar.less -->
    <section class="sidebar">
        <!-- Sidebar user panel -->
        <div class="user-panel">
            <div class="pull-left image">
                <img src='@Url.Content("~/Assets/img/default-user.png")' class="img-circle" alt="User Image">
            </div>
            <div class="pull-left info">
            </div>

        </div>

        <ul class="sidebar-menu" data-bind="foreach: { data: NavigationList }">

            <li data-bind="attr:{class:'treeview '+ IsActive}" style="cursor: pointer;">
                <a data-bind="click:$root.OpenLink">
                    <i data-bind="attr: { 'class': IconClass}"></i>
                    <span style="cursor: pointer !important;" data-bind="text: NavigationName"></span>
                    <span class="pull-right-container">
                        <i data-bind="css:{ 'fa fa-angle-left pull-right': ChildList().length > 0 }"></i>
                    </span>
                </a>
                <ul class="treeview-menu" data-bind="foreach:{data:ChildList}">
                    <li data-bind="attr:{'id' : NavigationCode,'class' : IsActive}">
                        <a data-bind="attr:{'href':NavigationURL}">
                            <i class="fa fa-dot-circle-o"></i>
                            <!--ko text : NavigationName -->
                            <!-- /ko-->
                        </a>
                    </li>
                </ul>
            </li>

        </ul>

    </section>
    <!-- /.sidebar -->
</aside>

<script type="text/javascript">

    var NavigationVM = function () {
        var self = this;
        self.NavigationList = ko.observableArray();
        function NavigationDO(data) {
            var self = this;
            self.NavigationCode = data.NavigationCode;
            self.NavigationName = data.NavigationName;
            self.IconClass = data.IconClass;
            self.ChildList = ko.observableArray();
            self.NavigationURL = data.NavigationURL;
            self.IsActive = "";
        };
        function ChildNavigationDO(data) {
            var self = this;
            self.NavigationCode = data.NavigationCode;
            self.NavigationName = data.NavigationName;
            self.NavigationURL = AdminVD + data.NavigationURL;
            self.IsActive = window.location.pathname.toLowerCase() == (AdminVD + data.NavigationURL).toLowerCase() ? "active" : "";
        }

        self.LoadData = function () {
            self.NavigationList([]);
            var url = AdminVD + '/Common/GetNavigations';
            $.getJSON(url, function (data) {
                var Data = data.Table;
                var Parent = [];
                var Child = [];

                $.each(Data, function (i, v) {
                    if (v.LevelType == 1) {
                        Parent.push(v);
                    }
                });

                $.each(Data, function (i, v) {
                    if (v.LevelType == 2) {
                        Child.push(v);
                    }
                });

                $.each(Parent, function (i, v) {
                    var f = new NavigationDO(v, self);
                    if (f.NavigationURL != "null" && window.location.pathname.toLowerCase() == (f.NavigationURL).toLowerCase()) {
                        f.IsActive = "active";
                        self.NavigationList.push(f);
                        return;
                    }
                    $.each(Child, function (ii, vv) {
                        if (vv.ParentCode == f.NavigationCode) {
                            var Childs = new ChildNavigationDO(vv, f);
                            if (Childs.IsActive == "active")
                                f.IsActive = Childs.IsActive;
                            f.ChildList.push(Childs);
                        }
                    });
                    self.NavigationList.push(f);
                });
            });
        };
        self.LoadData();

        self.OpenLink = function (data, event) {
            if (data.NavigationURL != null) {
                window.location.href = AdminVD + data.NavigationURL;
            }

        }
    }

    var NavigationVMObj = new NavigationVM();
    $(document).ready(function () {
        ko.applyBindings(NavigationVMObj, $('.NavigationVM')[0]);
    })

</script>


Folder : Shipment

+_AuctionHousePicturesPending.cshtml
@model JTJapan.Core.AdminArea.ViewModel.AuctionHousePicturesPendingModel

@{
    var Count = (Model.PageSize * (Model.CurrentPage - 1));
}

<style>
    .NoRecord {
        width: 100%;
    }

        .NoRecord tr td {
            text-align: center;
            padding-bottom: 2%;
        }

    .Miss-Chassis {
        width: 25% !important;
        margin-top: 2% !important;
    }

        .Miss-Chassis table thead {
            color: #FF0000 !important;
        }
</style>

    <section class="content">
@if (Model.AuctionHousePicturesPendingCount.Count() != 0)
{
        <div class="row">

            @foreach (var item in Model.AuctionHousePicturesPendingCount)
            {
                <div class="col-md-2 col-sm-4 col-xs-8 Vendor" id="@item.AuctionHouseId" onclick="toggleDetail(this)">
                    <div class="info-box info-box count-box">
                        <div class="info-box-content count-box-content">
                            <div class="pull-left circle">
                                <p> @item.AuctionHouseCount</p>
                            </div>
                            <span class="info-box-text count-box-text">@item.AuctionHouse</span>


                        </div>
                    </div>
                </div>
            }

        </div>
}
        <div class="box box-primary">
            <div class="box-body table-responsive no-padding">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th style="width:3%">#</th>
                            <th style="width:19%">Purchase ID</th>
                            <th style="width:30%">Vehicle Detail</th>
                            <th style="width:20%">Chassis #</th>
                            <th style="width:18%">Purchase Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.AuctionHousePicturesPendingList.Count() != 0)
                        {

                            foreach (var item in Model.AuctionHousePicturesPendingList.Select((value, i) => new { i = i + 1, value }))
                            {
                                <tr>
                                    <td>@(Count + @item.i)</td>
                                    <td>
                                        @item.value.PurchaseUID
                                    </td>
                                 
                                    <td>
                                        <span>@item.value.Make @item.value.Model </span><br />
                                        <span class="second">@item.value.ModelYear.ToString("yyyy") </span>
                                    </td>
                                    <td class="col-md-1">
                                        @item.value.ChassisNumber
                                    </td>
                                    <td>
                                        @item.value.PurchaseDate.ToString("MMM dd, yyyy")
                                    </td>
                                 
                                </tr>
                            }
                        }
                       
                    </tbody>
                </table>
                @if (Model == null || Model.AuctionHousePicturesPendingList == null || Model.AuctionHousePicturesPendingList.Count() == 0)
                {
                    <table class="NoRecord">
                        <tr>
                            <td>
                                No record(s) found
                            </td>
                        </tr>
                    </table>
                }
            </div>
            <div class="row">
                <div class="customPagination">
                    <div class="col-xs-12">
                        <div class="box UserVM" style="margin-bottom:0px;">
                            <div class="box-footer clearfix">
                                <div class="col-xs-5">
                                    <div class="dataTables_info" role="status" aria-live="polite">Showing <span class="customRange">0</span> of <span class="customTotalResult">0</span>  entries</div>
                                </div>

                                <div class="col-xs-1 text-center">
                                    Page Size
                                </div>
                                <div class="col-xs-2">
                                    <select class="form-control page-size" style="width: 60px; padding: 2px 2px; height: 28px;">
                                        <option selected>25</option>
                                        <option>50</option>
                                        <option>100</option>
                                        <option>500</option>
                                    </select>
                                </div>
                                <div class="col-xs-4">
                                    <ul class="pagination pagination-sm no-margin pull-right"></ul>
                                </div>
                            </div>

                        </div>
                    </div>

                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-md-2 col-md-offset-5">
                <button id="uploadButton" type="button" data-toggle="modal" data-target="#uploadFileStatusModel" class="btn btn-block btn-success">

                    <i class="fa fa-upload"></i>
                    Upload
                </button>
            </div>
        </div>
        @if (Model != null && Model.MissingChassisNoList != null && Model.MissingChassisNoList.Count != 0)
        {

            <div class="box Miss-Chassis">
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th width="5%">
                                Sno.
                            </th>
                            <th width="95%">Missing Chassis #</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{ int j = 0;
                         foreach (var item in Model.MissingChassisNoList)
                         {

                             j++;
                            <tr>
                                <td>@j</td>
                                <td>@item.ChassisNo</td>
                            </tr>
                         }
                        }
                    </tbody>
                </table>
            </div>
        }

    </section>



<script type="text/javascript">
    var currentPage;
    var totalResults;
    var paginationTemplateHTML;
    var pageSize;
    var resultsCount;
    var AuctionHouseId;
    var ChasisNo;

    $(document).ready(function () {

        currentPage = parseInt('@Model.CurrentPage');
        totalResults = parseInt('@Model.TotalResults');
        paginationTemplateHTML = $('#paginationTemplate').html();
        pageSize = parseInt('@Model.PageSize');
        resultsCount = parseInt('@Model.AuctionHousePicturesPendingList.Count');
        AuctionHouseId = parseInt('@Model.AuctionHouseId');
        ChasisNo = $('#txtChassisNo').val() == '' ? null : $('#txtChassisNo').val().replace(/[\n\r]/g, ',');

        if (resultsCount > 0) {
            $(".customPagination").show();
        }
        else {
            $(".customPagination").hide();
        }

        $(".page-size").val(pageSize);

        $(".customPagination ul.pagination").on("click", ".rightnav", function () {
            GetfilteredRecords(currentPage + 1, pageSize, AuctionHouseId, ChasisNo);
        });

        $(".customPagination ul.pagination").on("click", ".leftnav", function () {
            GetfilteredRecords(currentPage - 1, pageSize, AuctionHouseId, ChasisNo);
        });

        $(".page-size").change(function () {

            var changePageSize = $(this).val();
            GetfilteredRecords(1, changePageSize, AuctionHouseId, ChasisNo);

        });

        GetfilteredRecords = function (PageCount, PageSize, AuctionHouseId, ChasisNo) {

            var data = {};
            data.PageCount = PageCount;
            data.PageSize = PageSize;
            data.AuctionHouseId = AuctionHouseId;
            data.ChasisNo = ChasisNo;
            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',
                contentType: 'application/json; charset=utf-8',
                crossDomain: true,
                url: '@Url.Action("_AuctionHousePicturesPending")',
                success: function (data) {
                    $('#ReportList').html(data);
                    $('#' + AuctionHouseId).find('.info-box').addClass('selected');
                }
            });
        };

        Helper.Methods.ApplyPagination(currentPage, pageSize, totalResults, resultsCount, paginationTemplateHTML);

    });
</script>

<script id="paginationTemplate" type="text/template">
    <li class="{{activeClassName}}">
        <a href="javascript:;" class="paging" onclick="GetfilteredRecords({{currentPage}} , '@Model.PageSize', @Model.AuctionHouseId, $('#txtChassisNo').val().replace(/[\n\r]/g, ','))">{{i}}</a>
    </li>
</script>
+__AuctionHousePicturesStatus.cshtml


<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header" style="background-color:#3C8DBC">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <h4 class="modal-title" style="color:white">Upload Auction House Pictures</h4>
        </div>
        <div class="modal-body">

            <input type="file" id="fileUpload" accept=".zip,application/octet-stream,application/zip,application/x-zip,application/x-zip-compressed"
                   data-documenttype=" 4" style=" width:90%;" />

            <div class="loadingDiv pull-right" style="display:none">

                <img id="loadingImg" height="20" alt="" src="~/Assets/img/loader.gif" style="width: 200px;">

            </div>
            <p class="help-block">Upload file in zip format </p>
            <label class="fileErrorText" style="color:red;"></label>

            <div id="uploadDocumentStatusDetail"></div>


        </div>

        <div class="modal-footer" id="modelFooter">
            <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Cancel</button>
            <button type="button" id="btnUpload" class="btn btn-primary">Upload</button>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        if ($("#AuctionHousePicturesStatusTable tr td  input:checkbox").length < 1) {
            $("#selectCheckBox").css("display", "none");
        }

        $('#fileUpload').change(function () {
            var fileData = ValidateFile();
            if (fileData.IsValid) {
                $('.loadingDiv').show();
                $.ajax({
                    url: '@Url.Action("_AuctionHousePicturesStatusDetail")',
                    type: "POST",
                    contentType: false, // Not to set any content header
                    processData: false, // Not to process data
                    data: fileData,
                    success: function (result) {
                         $('.loadingDiv').hide();
                        $('#uploadDocumentStatusDetail').html(result);
                    },
                    error: function (err) {
                        $('.loadingDiv').hide();
                        alert(err.statusText);
                    }

                });
            }
        });


        $("#btnUpload").click(function () {

            var fileData = ValidateFile();
            if (fileData.IsValid) {
                if ($('.chkd:checked').length > 0) {
                    $('.loadingDiv').show();
                    var selectedCheckBoxDataList = [];
                    $("#AuctionHousePicturesStatusTable tr td  input:checked").each(function () {
                        var data = {};
                        data.ChassisNumber = $(this).closest('tr').find('.chassisNumber').text();
                        data.PurchaseId = $(this).closest('tr').find('.PurchaseId').val();
                        data.PurchaseUID = $(this).closest('tr').find('.PurchaseUID').text();
                        data.StatusId = $(this).closest('tr').find('.StatusId').val();
                        selectedCheckBoxDataList.push(data);
                    });

                    var requestModel = {};
                    requestModel.ListOfDocument = selectedCheckBoxDataList;
                    fileData.append("requestModel", JSON.stringify(requestModel));
                    ShowHideModelFooter(0);
                    $.ajax({
                        url: '@Url.Action("UploadAuctionHousePictures")',
                        type: "POST",
                        contentType: false,
                        processData: false,
                        data: fileData,
                        success: function (result) {
                            $('.close').trigger('click');
                            Helper.Methods.ShowPopUp('success', result.Message);
                            setTimeout(function () {
                                location.reload();
                            }, 500);
                            $('.loadingDiv').hide();
                            ShowHideModelFooter(1);
                        },
                        error: function (err) {
                            alert(err.statusText);
                            $('.loadingDiv').hide();
                            ShowHideModelFooter(1);
                        }
                    });
                }
                else {
                    $('.fileErrorText').text("Please select chassis # first");
                }
            }

        });

        ValidateFile = function () {

            var fileUpload = $('#fileUpload').get(0);
            var files = fileUpload.files;
            if (files.length > 0 && files.length == 1) {
                var filename = $('#fileUpload').val();
                var extension = filename.split(/[\s.]+/);
                extension = extension[extension.length - 1].toLowerCase();
                var fileData = new FormData();
                fileData.append(files[0].name, files[0]);

                if (extension == "zip") {
                    fileData.IsValid = true;
                }

                else {
                    fileData.IsValid = false;
                    $('.fileErrorText').text("Invalid Format");
                }

                return fileData;
            }

            else {

                $('.fileErrorText').text("Upload File");
                return "";
            }

        };


       ShowHideModelFooter = function(IsShow)
       {
           if (IsShow == 1) {
               $('.modal-footer').find('button').css('visibility', 'visible');
           }
           else {
               $('.modal-footer').find('button').css('visibility', 'hidden');
           }

        }

    });



</script>
+__AuctionHousePicturesStatusDetail.cshtml
@model JTJapan.Core.AdminArea.ViewModel.AuctionHouseStatuseModel

@if (!@Model.IsValid)
{
    <div style="color:red;"> @Model.Message  </div>
}

else
{
    <table id="AuctionHousePicturesStatusTable" class="table table-striped">
        <tr>
            <th>
                #
                <input type="checkbox" id="selectCheckBox">
            </th>
            <th>Chassis #</th>
            <th>Purchase ID</th>
            <th>Comments</th>
        </tr>

        @foreach (var item in Model.AuctionHousePicturesStatusList.Select((value, i) => new { i = i + 1, value }))
        {
            <tr>
                <td>
                    @item.i

                    @if (item.value.StatusId != 3)
                    {
                        <input type="checkbox" class="chkd">

                      
                        @Html.HiddenFor(items => items.AuctionHousePicturesStatusList[item.i - 1].PurchaseId,
                                new
                                {
                                    @class = "PurchaseId"
                                })
                        @Html.HiddenFor(items => items.AuctionHousePicturesStatusList[item.i - 1].StatusId,
                                new
                                {
                                    @class = "StatusId"
                                })

                    }


                </td>

                <td class="chassisNumber">@item.value.ChassisNumber</td>
                <td class="PurchaseUID">@item.value.PurchaseUID</td>
                <td class="PurchaseId" style="display:none">@item.value.PurchaseId</td>
                @if (item.value.StatusId == 1)
                {
                    <td class="auctionHouse" style="color:green">@item.value.Comments</td>
                }

                else if (item.value.StatusId == 2)
                {
                    <td class="auctionHouse" style="color: darkorange">@item.value.Comments</td>
                }

                else
                {
                    <td class="auctionHouse" style="color:red">@item.value.Comments</td>
                }

            </tr>
        }
    </table>
}

<script>

    $(document).ready(function () {
        $('.fileErrorText').text('');
        if ($("#AuctionHousePicturesStatusTable tr td  input:checkbox").length < 1) {
            $("#selectCheckBox,#btnUpload").css("display", "none");
        }
        $("#selectCheckBox").on("click", function () {
            var all = $(this);
            $('input:checkbox').each(function () {
                $(this).prop("checked", all.prop("checked"));
            });
        });

    });

</script>



+___SendEmailPreview.cshtml
@using JTJapan.Core.AdminArea.ViewModel;

<div class="modal fade" id="modal-email">
    <div class="modal-dialog email-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#3C8DBC">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" style="color:white">Email</h4>
            </div>
            @foreach (var item in Model)
            {
                InspectionEmailModel i = item;
                <div class="modal-body">
                    <div class="col-md-12 Email">
                        <div class="box box-primary">
                            <div class="box-header with-border">
                                <h3 class="box-title">@i.EmailSubject - @i.ChassisNumber </h3>
                            </div>
                            <!-- /.box-header -->
                            <div class="box-body">
                                <div class="form-group input-group">
                                    <span class=" input-group-addon">From:&nbsp;&nbsp;&nbsp;&nbsp;</span>
                                    <input class="form-control fromEmail" type="email" id="fromemail" value="@(i.FromEmailAddress==null?"":i.FromEmailAddress)">
                                </div>
                                <div class="input-group form-group">
                                    <span class="input-group-addon">To:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                                    <input class="form-control toEmail" type="email" id="toemail" value="@(i.ToEmailAddress==null?"":i.ToEmailAddress)">
                                </div>
                                <div class="input-group form-group">
                                    <span class="input-group-addon">Cc:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                                    <input class="form-control CCEmail" type="email" id="ccemail" value="@(i.CCEmail==null?"":i.CCEmail)">
                                </div>
                                <div class="input-group form-group">
                                    <span class="input-group-addon">Subject:</span>
                                    <input class="form-control" value="Unit Inspection Pending" readonly>
                                </div>
                                <div class="form-group">
                                    @*<textarea id="compose-textarea" class="form-control body-textarea" style="height: 300px" readonly>*@
                                    <div class="form-control EmailBody" id="compose-textarea" contenteditable="true">
                                        @Html.Raw(i.EmailBody)
                                        @*</textarea>*@
                                    </div>
                                </div>
                            </div>
                            <!-- /.box-body -->
                            <!-- /.box-footer -->
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="box-footer">
                        <div class="pull-right">
                            <button type="submit" class="btn btn-primary" onclick="SendEmail(this)" data-invoiceid="@i.customerproductinvoiceid" data-fromemail="@i.FromEmailAddress" data-toemail="@i.ToEmailAddress" data-emailbody="@i.EmailBody.ToString()" data-template="@i.emailtemplateid"><i class="fa fa-envelope-o"></i> Send</button>
                        </div>
                        <button type="reset" class="btn btn-default" onclick="$('#modal-email').modal('hide');"><i class="fa fa-times"></i> Discard</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<script>
    function SendEmail(btn) {
        var TextRegExp = new RegExp(/^([\w-\.]+@@([\w-]+\.)+[\w-]{2,4})?$/);
        var frmemailval = $('#fromemail').val();
        var toemailval = $('#toemail').val();
        var ccemailval = $('#ccemail').val();
        var chk=1;
        if (!TextRegExp.test(frmemailval) || frmemailval.length < 1)
        {
            $('#fromemail').addClass('Error');
            chk=0;
        }
        if (toemailval.length < 1 || !TextRegExp.test(toemailval))
        {
            $('#toemail').addClass('Error');
            chk=0
        }         
            
        if (chk == 1) {




            $.ajax({
                async: true,
                type: 'POST',
                cache: false,
                data: { customerproductinvoiceid: $(btn).data('invoiceid'), fromemail: frmemailval, toemail: toemailval, ccemail: ccemailval, tmpId: $(btn).data('template'), 'body': $('.EmailBody').html().trim() },
                url: 'InsertEmailTemplate',
                success: function (data) {
                    ModalPopInn('Success', 'Email sent successfully!');
                    $('#modal-email').modal('hide');
                }
            });
        }
        else {
            return;

        }

        setTimeout(function () { location.reload(true) }, 4000);
    }
</script>

+___UnitPicturesPendingDetail.cshtml
@model JTJapan.Core.AdminArea.ViewModel.UnitPicturesPendingModel

@{
    var Count = (Model.PageSize * (Model.CurrentPage - 1));
}

<style>
    .NoRecord {
        width: 100%;
    }

        .NoRecord tr td {
            text-align: center;
            padding-bottom: 2%;
        }
    .Miss-Chassis {
        width: 25% !important;
        margin-top: 2% !important;
    }

        .Miss-Chassis table thead {
            color: #FF0000 !important;
        }
</style>

<section class="content">
    @if (Model.UnitPicturesPendingCountVendorWise.Count() != 0)
    {
        <div class="row">

            @foreach (var item in Model.UnitPicturesPendingCountVendorWise)
            {
                <div class="col-md-2 col-sm-4 col-xs-8 Vendor" id="@item.VenodorId" onclick="toggleDetail(this)">
                    <div class="info-box info-box count-box">
                        <div class="info-box-content count-box-content">
                            <div class="pull-left circle">
                                <p> @item.VendorCount   </p>
                            </div>
                            <span class="info-box-text count-box-text">@item.Vendor</span>


                        </div>
                    </div>
                </div>
            }

        </div>
    }
    <div class="box box-primary">
        <div class="box-body table-responsive no-padding">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th style="width:3%">#</th>
                        <th style="width:13%">Invoice #</th>
                        <th style="width:17%">Vehicle Detail</th>
                        <th style="width:18%">Port/Country</th>
                        <th style="width:14%">Transport</th>
                        <th style="width:15%">Shipping Detail</th>
                        <th style="width:10%">Purchase Date</th>
                        <th style="width:10%">Date</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.UnitPicturesPendingList.Count() != 0)
                    {

                        foreach (var item in Model.UnitPicturesPendingList.Select((value, i) => new { i = i + 1, value }))
                        {
                            <tr>
                                <td>@(Count + @item.i)</td>
                                <td>
                                    @item.value.InvoiceNumber
                                </td>
                                <td>
                                    <span> @item.value.ChassisNumber</span><br />
                                    <span class="second">@item.value.Make @item.value.Model </span><br />
                                    <span class="third">@item.value.ModelYear.ToString("yyyy") </span>
                                </td>
                               
                                <td>
                                    <span>@item.value.Port</span><br />
                                    <span class="second">@item.value.Country </span>
                                </td>
                                <td>
                                    @item.value.TransportVendor
                                </td>
                                <td>
                                    <span>@item.value.Shippingyard</span><br />
                                    <span class="second">@item.value.ShipmentType </span>
                                </td>
                                <td>
                                    @item.value.PurchaseDate.ToString("MMM dd, yyyy")
                                </td>
                                <td>
                                    @item.value.UpdationDate.ToString("MMM dd, yyyy")
                                </td>
                            </tr>
                        }
                    }
                   
                </tbody>
            </table>
            @if (Model == null || Model.UnitPicturesPendingList == null || Model.UnitPicturesPendingList.Count() == 0)
            {
                <table class="NoRecord">
                    <tr>
                        <td>
                            No record(s) found
                        </td>
                    </tr>
                </table>
            }
        </div>
        <div class="row">
            <div class="customPagination">
                <div class="col-xs-12">
                    <div class="box UserVM" style="margin-bottom:0px;">
                        <div class="box-footer clearfix">
                            <div class="col-xs-5">
                                <div class="dataTables_info" role="status" aria-live="polite">Showing <span class="customRange">0</span> of <span class="customTotalResult">0</span>  entries</div>
                            </div>

                            <div class="col-xs-1 text-center">
                                Page Size
                            </div>
                            <div class="col-xs-2">
                                <select class="form-control page-size" style="width: 60px; padding: 2px 2px; height: 28px;">
                                    <option selected>25</option>
                                    <option>50</option>
                                    <option>100</option>
                                    <option>500</option>
                                </select>
                            </div>
                            <div class="col-xs-4">
                                <ul class="pagination pagination-sm no-margin pull-right"></ul>
                            </div>
                        </div>

                    </div>
                </div>

            </div>

        </div>
    </div>
    <div class="row">
        <div class="col-md-2 col-md-offset-5">
            <button id="uploadButton" type="button" data-toggle="modal" data-target="#uploadFileStatusModel" class="btn btn-block btn-success">

                <i class="fa fa-upload"></i>
                Upload
            </button>
        </div>
    </div>
    @if (Model != null && Model.MissingChassisNoList != null && Model.MissingChassisNoList.Count != 0)
    {

        <div class="box Miss-Chassis">
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th width="5%">
                            Sno.
                        </th>
                        <th width="95%">Missing Chassis #</th>
                    </tr>
                </thead>
                <tbody>
                    @{ int j = 0;
                     foreach (var item in Model.MissingChassisNoList)
                     {

                         j++;
                        <tr>
                            <td>@j</td>
                            <td>@item.ChassisNo</td>
                        </tr>
                     }
                    }
                </tbody>
            </table>
        </div>
    }

</section>






<script type="text/javascript">
    var currentPage;
    var totalResults;
    var paginationTemplateHTML;
    var pageSize;
    var resultsCount;
    var VendorId;
    var ChasisNo;

    $(document).ready(function () {

        currentPage = parseInt('@Model.CurrentPage');
        totalResults = parseInt('@Model.TotalResults');
        paginationTemplateHTML = $('#paginationTemplate').html();
        pageSize = parseInt('@Model.PageSize');
        resultsCount = parseInt('@Model.UnitPicturesPendingList.Count');
        VendorId = parseInt('@Model.VendorId');
        ChasisNo = $('#txtChassisNo').val() == '' ? null : $('#txtChassisNo').val().replace(/[\n\r]/g, ',');

        if (resultsCount > 0) {
            $(".customPagination").show();
        }
        else {
            $(".customPagination").hide();
        }

        $(".page-size").val(pageSize);

        $(".customPagination ul.pagination").on("click", ".rightnav", function () {
            GetfilteredRecords(currentPage + 1, pageSize, VendorId, ChasisNo);
        });

        $(".customPagination ul.pagination").on("click", ".leftnav", function () {
            GetfilteredRecords(currentPage - 1, pageSize, VendorId, ChasisNo);
        });

        $(".page-size").change(function () {

            var changePageSize = $(this).val();
            GetfilteredRecords(1, changePageSize, VendorId, ChasisNo);

        });

        GetfilteredRecords = function (PageCount, PageSize, VendorId, ChasisNo) {

            var data = {};
            data.PageCount = PageCount;
            data.PageSize = PageSize;
            data.VendorId = VendorId;
            data.ChasisNo = ChasisNo;
            $.ajax({
                async: true,
                type: 'GET',
                cache: false,
                data: data,
                dataType: 'html',
                contentType: 'application/json; charset=utf-8',
                crossDomain: true,
                url: '@Url.Action("_UnitPicturesPendingDetail")',
                success: function (data) {
                    $('#ReportList').html(data);
                    $('#' + VendorId).find('.info-box').addClass('selected');
                }
            });
        };

        Helper.Methods.ApplyPagination(currentPage, pageSize, totalResults, resultsCount, paginationTemplateHTML);

    });
</script>

<script id="paginationTemplate" type="text/template">
    <li class="{{activeClassName}}">
        <a href="javascript:;" class="paging" onclick="GetfilteredRecords({{currentPage}} , '@Model.PageSize', @Model.VendorId, $('#txtChassisNo').val().replace(/[\n\r]/g, ','))">{{i}}</a>
    </li>
</script>



+___UnitPicturesStatus.cshtml

<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header" style="background-color:#3C8DBC">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <h4 class="modal-title" style="color:white">Upload Unit Pictures</h4>
        </div>
        <div class="modal-body">

            <input type="file" id="fileUpload" accept=".zip,application/octet-stream,application/zip,application/x-zip,application/x-zip-compressed"
                   data-documenttype=" 4" style=" width:90%;" />

            <div class="loadingDiv pull-right" style="display:none">

                <img id="loadingImg" height="20" alt="" src="~/Assets/img/loader.gif" style="width: 200px;">

            </div>
            <p class="help-block">Upload file in zip format </p>
            <label class="fileErrorText" style="color:red;"></label>

            <div id="uploadDocumentStatusDetail"></div>


        </div>

        <div class="modal-footer" id="modelFooter">
            <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Cancel</button>
            <button type="button" id="btnUpload" class="btn btn-primary">Upload</button>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        if ($("#UnitPicturesStatusTable tr td  input:checkbox").length < 1) {
            $("#selectCheckBox").css("display", "none");
        }

        $('#fileUpload').change(function () {
            var fileData = ValidateFile();
            if (fileData.IsValid) {
                $('.loadingDiv').show();
                $.ajax({
                    url: '@Url.Action("_UnitPicturesStatusDetail")',
                    type: "POST",
                    contentType: false, // Not to set any content header
                    processData: false, // Not to process data
                    data: fileData,
                    success: function (result) {
                         $('.loadingDiv').hide();
                        $('#uploadDocumentStatusDetail').html(result);
                    },
                    error: function (err) {
                        $('.loadingDiv').hide();
                        alert(err.statusText);
                    }
                    
                });
            }
        });


        $("#btnUpload").click(function () {

            var fileData = ValidateFile();
            if (fileData.IsValid) {
                if ($('.chkd:checked').length > 0) {
                    $('.loadingDiv').show();
                    var selectedCheckBoxDataList = [];
                    $("#UnitPicturesStatusTable tr td  input:checked").each(function () {
                        var data = {};
                        data.ChassisNumber = $(this).closest('tr').find('.chassisNumber').text();
                        data.InvoiceNumber = $(this).closest('tr').find('.invoicenumber').text();
                        data.CustomerProductInvoiceId = $(this).closest('tr').find('.CustomerProductInvoiceId').val();
                        data.ClientId = $(this).closest('tr').find('.ClientId').val();
                        data.StatusId = $(this).closest('tr').find('.StatusId').val();
                        selectedCheckBoxDataList.push(data);
                    });

                    var requestModel = {};
                    requestModel.ListOfDocument = selectedCheckBoxDataList;
                    fileData.append("requestModel", JSON.stringify(requestModel));
                    ShowHideModelFooter(0);
                    $.ajax({
                        url: '@Url.Action("UploadUnitPictures")',
                        type: "POST",
                        contentType: false,
                        processData: false,
                        data: fileData,
                        success: function (result) {
                            $('.close').trigger('click');
                            Helper.Methods.ShowPopUp('success', result.Message);
                            setTimeout(function () {
                                location.reload();
                            }, 500);
                            $('.loadingDiv').hide();
                            ShowHideModelFooter(1);
                        },
                        error: function (err) {
                            alert(err.statusText);
                            $('.loadingDiv').hide();
                            ShowHideModelFooter(1);
                        }
                    });
                }
                else {
                    $('.fileErrorText').text("Please select invoice # first");
                }
            }

        });

        ValidateFile = function () {

            var fileUpload = $('#fileUpload').get(0);
            var files = fileUpload.files;
            if (files.length > 0 && files.length == 1) {
                var filename = $('#fileUpload').val();
                var extension = filename.split(/[\s.]+/);
                extension = extension[extension.length - 1].toLowerCase();
                var fileData = new FormData();
                fileData.append(files[0].name, files[0]);

                if (extension == "zip") {
                    fileData.IsValid = true;
                }

                else {
                    fileData.IsValid = false;
                    $('.fileErrorText').text("Invalid Format");
                }

                return fileData;
            }

            else {

                $('.fileErrorText').text("Upload File");
                return "";
            }

        };

        

        ShowHideModelFooter = function (IsShow) {
            if (IsShow == 1) {
                $('.modal-footer').find('button').css('visibility', 'visible');
            }
            else {
                $('.modal-footer').find('button').css('visibility', 'hidden');
            }

        }

    });



</script>

+__UnitPicturesStatusDetail.cshtml
@model JTJapan.Core.AdminArea.ViewModel.UnitPicturesStatuseModel

@if (!@Model.IsValid)
{
    <div style="color:red;"> @Model.Message  </div>
}

else
{
    <table id="UnitPicturesStatusTable" class="table table-striped">
        <tr>
            <th>
                #
                <input type="checkbox" id="selectCheckBox">
            </th>
            <th>Chassis #</th>
            <th>Invoice #</th>
            <th>Comments</th>
        </tr>

        @foreach (var item in Model.UnitPicturesStatusList.Select((value, i) => new { i = i + 1, value }))
        {
            <tr>
                <td>
                    @item.i

                    @if (item.value.StatusId != 3 )
                    {
                        <input type="checkbox" class="chkd">

                        @Html.HiddenFor(items => items.UnitPicturesStatusList[item.i - 1].ClientId, new
                                {
                                    @class = "ClientId"
                                })

                        @Html.HiddenFor(items => items.UnitPicturesStatusList[item.i - 1].CustomerProductInvoiceId,
                                new
                                {
                                    @class = "CustomerProductInvoiceId"
                                })
                         @Html.HiddenFor(items => items.UnitPicturesStatusList[item.i - 1].StatusId,
                                new
                                {
                                    @class = "StatusId"
                                })

                    }


                </td>

                <td class="chassisNumber">@item.value.ChassisNumber</td>
                <td class="invoicenumber">@item.value.InvoiceNumber</td>
                <td class="CustomerProductInvoiceId" style="display:none">@item.value.CustomerProductInvoiceId</td>
                @if (item.value.StatusId == 1)
                {
                    <td class="auctionHouse" style="color:green">@item.value.Comments</td>
                }

                else if (item.value.StatusId == 2)
                {
                    <td class="auctionHouse" style="color: darkorange">@item.value.Comments</td>
                }

                else
                {
                    <td class="auctionHouse" style="color:red">@item.value.Comments</td>
                }

            </tr>
        }
    </table>
}

<script>

    $(document).ready(function () {
        $('.fileErrorText').text('');
        if ($("#UnitPicturesStatusTable tr td  input:checkbox").length < 1) {
            $("#selectCheckBox,#btnUpload").css("display", "none");
        }
        $("#selectCheckBox").on("click", function () {
            var all = $(this);
            $('input:checkbox').each(function () {
                $(this).prop("checked", all.prop("checked"));
            });
        });

    });

</script>



+AlterationPending.cshtml

@using JTJapan.Core.AdminArea.ViewModel
<style type="text/css">


    .Error {
        border-color: #ff0000 !important;
        border: 1px solid #ff0000 !important;
    }


    .Miss-Chassis {
        width: 25% !important;
        margin-top: 2% !important;
    }

        .Miss-Chassis table thead {
            color: #FF0000 !important;
        }
</style>
<script>
    function ModalPopInn(title, body) {
        $("#modalbody").html();
        $('#myModal').find('.modal-title').html(title);
        $('#myModal').find('.modal-body').html(body);
        $('#myModal').modal('show');
        setTimeout(function () {
            $('#myModal').modal('hide');
        }, 3000);
    }
    var IsPageLoad = 0;
    $(document).ready(function () {
        if (IsPageLoad == 0) {
            $($('.info-box')[0]).addClass('selected');
            $($('.hidden')[0]).removeClass('hidden').addClass('detail');
        }
        else {
            IsPageLoad = 1;
        }
        $('#btnChassisNo').click(function () {
            GetfilteredRecords($('#txtChassisNo').val().replace(/[\n\r]/g, ','));
        });
        $('#refreshbutton').click(function () {
            location.href = './AlterationPending';
        });
        $('#txtChassisNo').keyup(function (e) {
            if (e.keyCode == 13) {
                GetfilteredRecords($('#txtChassisNo').val().replace(/[\n\r]/g, ','));
            }
        });

        var rows = $('.detail #dataintable tr').length;
        if (rows < 1) {
            $('.mainbuttons').hide();

        }
    });
    function checkAllVisible(maincheck) {
        var chks = $('.detail').find('input:checkbox');
        if ($('#' + maincheck.id).prop('checked')) {
            var chks = $('.detail').find('input:checkbox');
            $(chks).not(this).prop('checked', true);
        }
        else {
            $(chks).not(this).prop('checked', false);
        }
    }
    function toggleDetail(ClickElement) {
        if (ClickElement == null) {
            allbox = $(document).find('.info-box');
            ClickElement = allbox[0];
        }
        $('div').find('.detail').removeClass('detail').addClass('hidden');
        $('div').find('#detail' + ClickElement.id).removeClass('hidden').addClass('detail');
        $('div').find('.selected').removeClass('selected');
        $(ClickElement).find('.info-box').addClass('selected');
    }
    function GetfilteredRecords(value) {
        $('#txtChassisNo').val(value);
        $('#searchChasis').submit();
    }
    function UpdateSingle(btn) {
        $(".Error").removeClass("Error");
        var data = {};
        data.UpdateListOfVendorModel = GetSingleRecord(btn);
        if (data.UpdateListOfVendorModel[0].comments == "") {
            return;
        }
        if (data.UpdateListOfVendorModel[0].vendid != "0") {
            UpdateMain(data);
            $(btn).closest('tr').remove();
        } else {
            return;
        }
        location.href = './AlterationPending';
    }
    function UpdateMain(data) {
        $.ajax({
            async: true,
            type: 'POST',
            cache: false,
            data: data,
            url: '@Url.Action("UpdateAlterationPending")',
            success: function (data) {
                ModalPopInn('Success', 'Record Updated');
            }
        });
    }
    function Update(btn) {
        $(".Error").removeClass("Error");
        var data = {};
        data.UpdateListOfVendorModel = GetSelectedCheckedBoxData();
        if (data.UpdateListOfVendorModel.length != 0) {
            for (var i = 0; i < data.UpdateListOfVendorModel.length; i++) {
                if (data.UpdateListOfVendorModel[i].comments == "") {
                    return;
                }
                if (data.UpdateListOfVendorModel[i].vendid == "0") {
                    return;
                }
                //$(btn).closest('tr').remove();
            }
            UpdateMain(data);
        } 
        else {
            ModalPopInn('Warning', 'Please select at least one record');
            return;
        }
        location.href = './AlterationPending';
    }
    GetSelectedCheckedBoxData = function () {
         
        var objects = [];
        $(".detail tr td  input:checkbox:checked").each(function () {
            var data = {};
            data.cpid = this.value;
            data.vendid = $(this).closest('tr').find('#Vendor').val();
            data.comments = $(this).closest('tr').find('.AlterComment').val();
            if (data.comments == "") {
                $($(this).closest('tr').find('.AlterComment')).addClass('Error');
            }
            if (data.vendid == "0") {
                $($(this).closest('tr').find('#Vendor')).addClass('Error');
            }
            objects.push(data);
        });
        return objects;
    };
    GetSingleRecord = function (value) {
        var data = {};
        var objects = [];
        data.cpid = $(value).closest('tr').find('.cpid').val();
        data.vendid = $(value).closest('tr').find('#Vendor').val();
        data.comments = $(value).closest('tr').find('.AlterComment').val();
        if (data.comments == "") {
            $($(value).closest('tr').find('.AlterComment')).addClass('Error');
        }
        if (data.vendid == "0") {
            $($(value).closest('tr').find('#Vendor')).addClass('Error');
        }
        objects.push(data);
        return objects;
    };

    ExportToExcel = function (type, Client) {
        window.location = "AlterationPendingExportToExcel";
    };
</script>
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#3C8DBC">
                <h4 class="modal-title" style="color:white"><b>Acknowledged Successfully!</b></h4>
            </div>
            <div class="modal-body" id="modalbody">
                <p>Information Saved</p>
            </div>
        </div>
    </div>
</div>
<div class="content-wrapper">
    <section class="content-header">
        <div class="row" style="margin-right:4px;">
            <div class="col-lg-5">
                <h4>@ViewBag.Title</h4>
                <button id="exportToExcel" title="Export To Excel" type="button" class="btn btn-success" onclick="ExportToExcel()">
                    <i class="fa fa-file-excel-o"></i>
                </button>
            </div>
            @using (Html.BeginForm("AlterationPending", "Shipment", FormMethod.Post, new { id = "searchChasis" }))
            {
                @Html.Partial("_ChassisNoFilter")
            }
        </div>
    </section>
    <div id="Databind" class="content">
        <div class="row">
            @foreach (ShippingYard item in Model)
            {
                string k = item.shipyardId;
                string buttonid = "vBtnApprove" + k;
                string divid = "vCollapse" + k;
                <div class="col-md-2 col-sm-4 col-xs-4" style="cursor:pointer" id=@item.shipyardId onclick="toggleDetail(this)">
                    <div class="info-box count-box">
                        <div class="info-box-content count-box-content">
                            <div class="pull-left circle">
                                <p> @item.alterationDetail.Count    </p>
                            </div>
                            <span class="info-box-text count-box-text">@item.shipyard</span>
                        </div>
                    </div>
                </div>
            }
        </div>
        @foreach (ShippingYard item in Model)
        {
            string id = "detail" + item.shipyardId;
            string chkAllId = "chkAll" + item.shipyardId;
            <div class="hidden" id=@id>
                <div class="box">
                    <div class="box-header">
                        <h3 class="box-title">@item.shipyard</h3>
                    </div>
                    <div class="box-body no-padding">
                        <table id="dataintable" class="table table-bordered table-striped table-condensed table-hover table-even-widths">
                            <tbody id="vendordetail">
                                <tr>
                                    <th style="width:5%;">
                                        # &nbsp;&nbsp;<input type="checkbox" class="checkall" id=@chkAllId onchange="checkAllVisible(this)" value="0">
                                    </th>
                                    @*<th style="width: 8%">Invoice #</th>*@
                                    <th style="width: 8%">Vehicle Detail</th>
                                    <th style="width: 10%">Chasis #</th>
                                    <th style="width: 10%">Port/Country</th>
                                    <th style="width: 12%">Shipping Yard/Type</th>
                                    <th style="width:12%">Vendor</th>
                                    <th style="width:10%">Alteration</th>

                                    <th style="width:8%">Date</th>
                                    <th style="width:16%;">Comments</th>
                                </tr>
                                @foreach (AlterationDetail alt in item.alterationDetail)
                                {
                                    string i = alt.sno.ToString();
                                    int sno = @alt.sno + 1;
                                    <tr>
                                        <td>@sno &nbsp;&nbsp;<input type="checkbox" id=@i class="cpid" value=@alt.CustomerProductInvoiceId /> </td>
                                        <td>@alt.customerProductInvoiceNumber <br /> @alt.Make  @alt.Model<br />  @alt.Year</td>
                                        <td>@alt.ChasisID</td>
                                        <td>@alt.Port <br />@alt.Country</td>
                                        <td>
                                            @alt.ShippingYard
                                            <br />
                                            @alt.ShipmentType
                                        </td>
                                        <td>
                                            @Html.DropDownList("Id", new SelectList((IEnumerable<SelectListItem>)ViewBag.Vendor, "Value", "Text"), new { @class = "form-control select2 input-sm", @id = "Vendor" })
                                        </td> 
                                        <td>
                                            @alt.Alteration
                                            @if (Convert.ToDecimal(alt.RequestedMeterReading == null ? "0" : alt.RequestedMeterReading) > 0)
                                            {<br />
                                                <span style="font-size:smaller">Reading:@alt.RequestedMeterReading</span>
                                            }
                                        </td>
                                        <td> @(alt.DateModified != "" ? Convert.ToDateTime(alt.DateModified).ToString("MMM dd, yyyy") : "-")</td>
                                        <td><textarea class="AlterComment form-control" style="padding:2px 5px;resize:none;" rows="2">@alt.RequestComment</textarea>   </td>
                                        @*<td>
                                            <button type="button" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="Request" onclick="UpdateSingle(this)" data-value=@alt.CustomerProductInvoiceId style="margin-right:10px;" data-cmd="1"><i class="fa fa-check"></i></button>
                                        </td>*@
                                    </tr>  
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
        <div class="row">
            <span class="col-md-2 col-md-offset-5">
                <button class="btn btn-block btn-primary mainbuttons" type="button" id="submitbuttonApprove" onclick="Update(this)" value="Approve All" style="margin-right:5px;" data-cmd="1"><i class="fa fa-check"></i> Request All </button>
            </span>
        </div>
        <div id="MissingChassis">
            @if (((List<MissingChassis>)ViewData["MissingChassis"]).Count > 0)
            {
                var list = (List<MissingChassis>)ViewData["MissingChassis"];
                <br />
                <div class="box Miss-Chassis">
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th id="hdrChckBox" width="5%">
                                    Sno.
                                </th>
                                <th width="95%">Missing Chassis #</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{ int j = 0;
                             foreach (var item in list)
                             {
                                 j++;
                                <tr>
                                    <td>@j</td>
                                    <td>@item.ChassisNo</td>
                                </tr>
                             }
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>
<input type="hidden" id="shipyardid" />


+AlterationRequestPending.cshtml
@using JTJapan.Core.AdminArea.ViewModel
<style type="text/css">
    .NoRecord {
        width: 100%;
    }

        .NoRecord tr td {
            text-align: center;
            padding-bottom: 2%;
        }

    .Error {
        border-color: #ff0000 !important;
        border: 1px solid #ff0000 !important;
    }

    .box-active {
        border-top: 3px solid transparent;
        margin-bottom: -2px;
        margin-right: 5px;
        border-top-color: #3c8dbc;
    }


    .Miss-Chassis {
        width: 25% !important;
        margin-top: 2% !important;
    }

        .Miss-Chassis table thead {
            color: #FF0000 !important;
        }
</style>
<script>
    function ModalPopInn(title, body) {
        $("#modalbody").html();
        $('#myModal').find('.modal-title').html(title);
        $('#myModal').find('.modal-body').html(body);
        $('#myModal').modal('show');
        setTimeout(function () {
            $('#myModal').modal('hide');
        }, 3000);
    }
    var IsPageLoad = 0;
    $(document).ready(function () {

        if (IsPageLoad == 0) {
            $($('.info-box')[0]).addClass('selected');
            $($('.hidden')[0]).removeClass('hidden').addClass('detail');

            $('#btnChassisNo').click(function () {
                GetfilteredRecords($('#txtChassisNo').val().replace(/[\n\r]/g, ','));
            });



            $('#refreshbutton').click(function () {
                location.href = './AlterationRequestPending';
            });
            $('#txtChassisNo').keyup(function (e) {
                if (e.keyCode == 13) {
                    GetfilteredRecords($('#txtChassisNo').val().replace(/[\n\r]/g, ','));
                }
            });
        }
        else {
            IsPageLoad = 1;
        }
        var rows = $('.detail #dataintable tr').length;
        if (rows < 1) {
            $('#submitbutton').hide();
        }


    });
    function GetfilteredRecords(value) {
        $('#txtChassisNo').val(value);
        $('#searchChasis').submit();
    }
    function checkAllVisible(maincheck) {
        var chks = $('.detail').find('input:checkbox');
        if ($(maincheck).prop('checked')) {
            var chks = $('.detail').find('input:checkbox');
            $(chks).not(this).prop('checked', true);
        }
        else {
            $(chks).not(this).prop('checked', false);
        }
    }
    function toggleDetail(ClickElement) {
        if (ClickElement == null) {
            allbox = $(document).find('.info-box');
            ClickElement = allbox[0];
        }
        $('div').find('.detail').removeClass('detail').addClass('hidden');
        $('div').find('#detail' + ClickElement.id).removeClass('hidden').addClass('detail');
        $('div').find('.selected').removeClass('selected');
        $(ClickElement).find('.info-box').addClass('selected');
    }
    function UpdateSingle(btn) {

        $(".Error").removeClass("Error");
        var $row;
        var checkedvalues = [];
        $row = $(btn).closest('tr');
        for (i = 0; i < $row.length; i++) {
            var val1 = $($row[i]).find('.AlterComment').val();
            if (val1.length < 1) {
                $($($row[i]).find('.AlterComment')).addClass("Error");
                return;
            }
            var obj = { cpid: $(btn).data('value'), comment: $($row[i]).find('.AlterComment').val() }
            checkedvalues.push(obj);
        }
        UpdateMain(checkedvalues);
    }
    function UpdateMain(checkedvalues) {
        if (checkedvalues.length == 0) {
            checkedValues = null;
            ModalPopInn('Warning', 'Please select at least one record');
        }
        else {
            $.ajax({
                async: true,
                type: 'POST',
                cache: false,
                data: { objects: checkedvalues },
                url: 'UpdateAlterationRequestPending',
                success: function (data) {
                    if (data == "success") {
                        ModalPopInn('Success', 'Record Updated!');
                        setTimeout(function () { window.location.href = "./AlterationRequestPending"; }, 3000);
                    }
                }
            });
        }
    }
    function Update() {


        $(".Error").removeClass("Error");
        var checkedvalues = [];
        $row = $('.detail').find('tr');
        var valid = 1;
        for (i = 1; i < $row.length; i++) {

            if ($($row[i]).find('input:checkbox').prop('checked')) {
                if ($($row[i]).find('.AlterComment').val() == "" || $($row[i]).find('.AlterComment').val().length > 100) {
                    $($row[i]).find('.AlterComment').addClass('Error');
                    valid = 0;
                } else {
                    var obj = { cpid: $($row[i]).find('input:checkbox').val(), comment: $($row[i]).find('.AlterComment').val() }
                    checkedvalues.push(obj);
                }
            }
        }
        if (valid == 0) {
            return;
        }
        else {
            UpdateMain(checkedvalues);
        }
    }

    ExportToExcel = function (type, Client) {
        window.location = "AlterationRequestPendingExportToExcel";
    };
</script>
<div id="EmailPreview">
</div>
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#3C8DBC">
                <h4 class="modal-title" style="color:white"><b>Inspection Marked Successfully!</b></h4>
            </div>
            <div class="modal-body" id="modalbody">
                <p>Information Saved</p>
            </div>
        </div>
    </div>
</div>
<div class="content-wrapper">
    <section class="content-header">
        <div class="row" style="margin-right:4px;">
            <div class="col-lg-5">
                <h4>Unit Alteration Request Pending</h4>
                <button id="exportToExcel" title="Export To Excel" type="button" class="btn btn-success" onclick="ExportToExcel()">
                    <i class="fa fa-file-excel-o"></i>
                </button>
            </div>
            @using (Html.BeginForm("AlterationRequestPending", "Shipment", FormMethod.Post, new { id = "searchChasis" }))
            {
                @Html.Partial("_ChassisNoFilter");
            }
        </div>
    </section>
    <div id="Databind" class="content">
        <div class="row">
            @foreach (ShippingYard item in Model)
            {
            string k = item.shipyardId;
            string buttonid = "vBtnApprove" + k;
            string divid = "vCollapse" + k;
            <div class=" col-md-2 col-sm-4 col-xs-4" style="cursor:pointer" id=@item.shipyardId onclick="toggleDetail(this)">
                <div class="info-box count-box">
                    <div class="info-box-content count-box-content">
                        <div class="pull-left circle">
                            <p> @item.shipyardDetail.Count    </p>
                        </div>
                        <span class="info-box-text count-box-text">@item.shipyard</span>
                    </div>
                </div>
            </div>
            }
        </div>
        @foreach (ShippingYard item in Model)
        {
        string id = "detail" + item.shipyardId;
        string chkAllId = "chkAll" + item.shipyardId;
        <div class="hidden" id=@id>
            <div class="box">
                <div class="box-header">
                    <h3 class="box-title">@item.shipyard</h3>
                </div>
                <div class="box-body no-padding">
                    <table id="dataintable" class="table table-bordered table-striped table-condensed table-hover table-even-widths">
                        <tbody id="vendordetail">
                            <tr>
                                <th style="width:4%"># &nbsp;<input type="checkbox" class="checkall" id="chkAll2" onchange="checkAllVisible(this)" value="0"></th>
                                @*
                                <th style="width:7%">Invoice #</th>*@
                                <th style="width:10%">Vehicle Detail</th>
                                <th style="width: 10%">Chasis #</th>
                                <th style="width: 5%">Port / Country</th>
                                <th style="width: 8%">Shipping Yard / Type</th>
                                <th style="width:5%">Alteration</th>
                                <th style="width:7%;">Alteration Vendor</th>
                                <th style="width:5%">Request Comments</th>
                                <th style="width:3%">Request Date</th>
                                <th style="width:13%;">Completion Comment</th>
                            </tr>
                            @foreach (ShippmentDetail detail in item.shipyardDetail)
                            {
                            string i = detail.sno.ToString();
                            int sno = detail.sno + 1;
                            <tr>
                                <td>
                                    @sno &nbsp;<input type="checkbox" id=@i value=@detail.CustomerProductInvoiceId />
                                </td>
                                @*
                                <td>@det.customerProductInvoiceNumber</td>*@

                                <td>@detail.customerProductInvoiceNumber <br />@detail.Make  @detail.Model<br />  @detail.Year</td>
                                <td>@detail.ChasisID</td>
                                <td>@detail.Port <br /> @detail.Country</td>
                                <td>@detail.ShippingYard <br /> @detail.ShipmentType</td>
                                <td>
                                    @detail.Alteration
                                    @if (Convert.ToDecimal(detail.RequestedMeterReading == null ? "0" : detail.RequestedMeterReading) > 0)
                                    {<br />
                                    <span class="info" style="font-size:smaller">Requested Meter Reading:@detail.RequestedMeterReading</span>
                                    }
                                </td>
                                <td>@detail.AlterationVendor</td>
                                <td>@detail.RequestComment</td>
                                <td>@(detail.DateModified != "" ? Convert.ToDateTime(detail.DateModified).ToString("MMMM dd yyyy") : "-")</td>
                                <td><textarea class="AlterComment form-control" style="padding:2px 5px;resize:none;" rows="2"></textarea></td>
                                @*
                                <td><button type="button" class="btn  btn-primary" data-toggle="tooltip" data-placement="top" title="Complete" onclick="UpdateSingle(this);" data-value=@det.CustomerProductInvoiceId><i class="fa fa-check"></i></button></td>*@

                            </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        }
        <br />
        <div class="row">
            <div class="col-md-2 col-md-offset-5">
                <button class="btn btn-block btn-primary" type="button" id="submitbutton" onclick="Update();" value="Approve"> <i class="fa fa-check"></i>&nbsp;Complete</button>
            </div>
        </div>

        <div id="MissingChassis">
            @if (((List<MissingChassis>)ViewData["MissingChassis"]).Count > 0)
            {
                var list = (List<MissingChassis>)ViewData["MissingChassis"];
                    <br />
                    <div class="box Miss-Chassis">
                        <table class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th id="hdrChckBox" width="5%">
                                        Sno.
                                    </th>
                                    <th width="95%">Missing Chassis #</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{ int j = 0;
                                foreach (var item in list)
                                {
                                j++;
                                <tr>
                                    <td>@j</td>
                                    <td>@item.ChassisNo</td>
                                </tr>
                                }
                                }
                            </tbody>
                        </table>
                    </div>
                    }
        </div>
    </div>
</div>
<input type="hidden" id="shipyardid" />



+AuctionHousePicturesPending.cshtml


@{
    ViewBag.Title = "Auction House Pictures Pending";
}

<div class="content-wrapper">
    <section class="content-header">
        <div class="row" style="margin-left:0px; margin-right:0px;">
            <h4 class="pull-left">Auction House Pictures Pending</h4>
            @Html.Partial("_ChassisNoFilter")
        </div>
    </section>


    <div id="ReportList" class="row" style="margin-left:0px; margin-right:0px;">

        @Html.Action("_AuctionHousePicturesPending", new
                    {
                        PageCount = 1,
                        PageSize = 25

                    });

    </div>


    <div class="modal fade" role="dialog" id="uploadFileStatusModel">
    </div>
</div>
<script type="text/javascript">

        function toggleDetail(a) {
            $('div').find('.detail').removeClass('detail').addClass('detail hidden');
            $('div').find('#detail' + a.id).removeClass('detail hidden').addClass('detail');

            $('div').find('.selected').removeClass('selected');
            $(a).find('.info-box').addClass('selected');
        }
        var IsPageLoad = 0;
        $(document).ready(function () {
            if (IsPageLoad == 0) {
                $($('.info-box')[0]).addClass('selected');
            }
            else {
                IsPageLoad = 1;
            }
            $("body").on("click", ".Vendor", function () {
                GetfilteredRecords(currentPage, pageSize, $(this).attr('id'), $('#txtChassisNo').val().replace(/[\n\r]/g, ','));
            });

            $('#btnChassisNo').click(function () {
                GetfilteredRecords(currentPage, pageSize, null, $('#txtChassisNo').val().replace(/[\n\r]/g, ','));
            });
            $('#txtChassisNo').keyup(function (e) {
                if (e.keyCode == 13) {
                    GetfilteredRecords(currentPage, pageSize, null, $('#txtChassisNo').val().replace(/[\n\r]/g, ','));
                }
            });
            $("body").delegate("#uploadButton", "click", function () {
                GetExportDocumentZipFileStatus();
            });
            GetExportDocumentZipFileStatus = function () {
                var data = {};

                $.ajax({
                    async: true,
                    type: 'GET',
                    cache: false,
                    data: data,
                    dataType: 'html',   //response format
                    contentType: 'application/json; charset=utf-8', //request format
                    crossDomain: true,
                    url: '@Url.Action("_AuctionHousePicturesStatus")',
                    success: function (data) {
                        $('#uploadFileStatusModel').html(data);
                    }
                });
            };
        });
</script>




+CarInspection.cshtml
@using JTJapan.Core.AdminArea.ViewModel
<style type="text/css">
    .NoRecord {
        width: 100%;
    }

        .NoRecord tr td {
            text-align: center;
            padding-bottom: 2%;
        }


    .Error {
        border-color: #ff0000 !important;
        border: 1px solid #ff0000 !important;
    }

    .box-active {
        border-top: 3px solid transparent;
        margin-bottom: -2px;
        margin-right: 5px;
        border-top-color: #3c8dbc;
    }


    .Miss-Chassis {
        width: 25% !important;
        margin-top: 2% !important;
    }

        .Miss-Chassis table thead {
            color: #FF0000 !important;
        }
</style>
<script>
    function GetEmailForPreview(CustomerProductInvoiceId,btn) {      
        $.ajax({
            dataType: "html",
            async: true,

            type: 'GET',
            url: '@Url.Content("~/Shipment/_SendEmailPreview")',
            data: {
                'CustomerProductInvoiceId': CustomerProductInvoiceId,
                'Ins': $(btn).data('inspection')
            },
            type: 'GET',
            beforeSend: function () {
                //$('.loadingDiv').show();

            },
            success: function (data) {
                if (data != "") {
                    $('#EmailPreview').html(data);
                    $('#modal-email').modal('show');
                    $('.modal-body').height($('.col-md-12.Email').height() + 10);
                }
                else { ModalPopInn('Information', 'No email template is defined!'); }
            },
            complete: function () {
                // $('.loadingDiv').hide();
            }
        });
    }
    function ModalPopInn(title, body) {
        $("#modalbody").html();
        $('#myModal').find('.modal-title').html(title);
        $('#myModal').find('.modal-body').html(body);
        $('#myModal').modal('show');
        setTimeout(function () {
            $('#myModal').modal('hide');
        }, 3000);
    }
    var IsPageLoad = 0;
    $(document).ready(function () {
        if (IsPageLoad == 0) {
            $($('.info-box')[0]).addClass('selected');
            $($('.hidden')[0]).removeClass('hidden').addClass('detail');
            $('#submitbutton').hide();
            $('#btnChassisNo').click(function () {
                GetfilteredRecords($('#txtChassisNo').val().replace(/[\n\r]/g, ','));
            });



            $('#refreshbutton').click(function () {
                location.href = './CarInspection';
            });
            $('#txtChassisNo').keyup(function (e) {
                if (e.keyCode == 13) {
                    GetfilteredRecords($('#txtChassisNo').val().replace(/[\n\r]/g, ','));
                }
            });
        }
        else {
            IsPageLoad = 1;
        }
        var rows = $('.detail #dataintable tr').length;
        if (rows < 1) {
            $('#submitbutton').hide();
        }


    });

    function GetfilteredRecords(value) {
        $('#txtChassisNo').val(value);
        $('#searchChasis').submit();
    }

    function checkAllVisible(maincheck) {
        var chks = $('.detail').find('input:checkbox');
        if ($('#' + maincheck.id).prop('checked')) {
            var chks = $('.detail').find('input:checkbox');
            $(chks).not(this).prop('checked', true);
        }
        else {
            $(chks).not(this).prop('checked', false);
        }
    }
    function toggleDetail(ClickElement) {
        if (ClickElement == null) {
            allbox = $(document).find('.info-box');
            ClickElement = allbox[0];
        }
        $('div').find('.detail').removeClass('detail').addClass('hidden');
        $('div').find('#detail' + ClickElement.id).removeClass('hidden').addClass('detail');
        $('div').find('.selected').removeClass('selected');
        $(ClickElement).find('.info-box').addClass('selected');
    }
    function UpdateSingle(btn) {
        var checkedValues = $(btn).data('value');
        UpdateMain(checkedValues);
        $(btn).closest('tr').remove();
        if ($('.detail #dataintable tr').length == 1) {
            location.href = './CarInspection';
        }
    }
    function UpdateMain(checkedValues) {
        if (checkedValues.length == 0) {
            checkedValues = null;
            ModalPopInn('Warning', 'Please select record');
            setTimeout(3000, function () { return; });
        }
        $.ajax({
            async: true,
            type: 'POST',
            cache: false,
            data: { customerproductinvoiceids: checkedValues },
            url: 'UpdateInspectionDetail',
            success: function (data) {
                ModalPopInn('Success', 'Record Updated!');
                setTimeout(function () { location.href = './CarInspection'; }, 3000);
            }
        });

    }

    function Update() {
        var checkedValues = $('.detail').find('input:checkbox:checked').map(function () {
            return this.value;
        }).get();
        UpdateMain(checkedValues);

    }
</script>

<div id="EmailPreview">
</div>

<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#3C8DBC">
                <h4 class="modal-title" style="color:white"><b>Inspection Marked Successfully!</b></h4>
            </div>
            <div class="modal-body" id="modalbody">
                <p>Information Saved</p>
            </div>
        </div>
    </div>
</div>
<div class="content-wrapper">
    <section class="content-header">
        <div class="row" style="margin-right:4px;">
            <div class="col-lg-5">
                <h4>Units Inspection Pending</h4>
            </div>
            @using (Html.BeginForm("CarInspection", "Shipment", FormMethod.Post, new { id = "searchChasis" }))
            {
                @Html.Partial("_ChassisNoFilter");
            }
        </div>
    </section>
    <div id="Databind" class="content">
        <div class="row">
            @foreach (ShippingYard item in Model)
            {
                string k = item.shipyardId;
                string buttonid = "vBtnApprove" + k;
                string divid = "vCollapse" + k;
                <div class=" col-md-2 col-sm-4 col-xs-4" style="cursor:pointer" id=@item.shipyardId onclick="toggleDetail(this)">
                    <div class="info-box count-box">
                        <div class="info-box-content count-box-content">
                            <div class="pull-left circle">
                                <p> @item.shipyardDetail.Count    </p>
                            </div>
                            <span class="info-box-text count-box-text">@item.shipyard</span>
                        </div>
                    </div>
                </div>
            }
        </div>
        @foreach (ShippingYard item in Model)
        {
            string id = "detail" + item.shipyardId;
            string chkAllId = "chkAll" + item.shipyardId;
            <div class="hidden" id=@id>
                <div class="box">
                    <div class="box-header">
                        <h3 class="box-title">@item.shipyard</h3>
                    </div>
                    <div class="box-body no-padding">
                        <table id="dataintable" class="table table-bordered table-striped table-condensed table-hover table-even-widths">
                            <tbody id="vendordetail">
                                <tr>
                                    <th style="width:3%;">
                                        #
                                    </th>
                                    <th style="width: 8%">Invoice #</th>
                                    <th style="width: 15%">Vehicle Detail</th>
                                    <th style="width: 10%">Chasis #</th>
                                    <th style="width: 5%">Port</th>
                                    <th style="width: 10%">Country</th>
                                    <th style="width: 10%">Shipping Yard</th>
                                    <th style="width: 10%">Shipping Type</th>
                                    <th style="width:10%">Inspection Type</th>
                                    <th style="width:5%">Cost</th>
                                    <th style="width:10%"></th>
                                </tr>
                                @foreach (ShippmentDetail det in item.shipyardDetail)
                                {
                                    string i = det.sno.ToString();
                                    int sno = @det.sno + 1;
                                    <tr>

                                        <td>
                                            @sno &nbsp;&nbsp;
                                        </td>
                                        <td>@det.customerProductInvoiceNumber</td>
                                        <td>@det.Make  @det.Model<br />  @det.Year</td>
                                        <td>@det.ChasisID</td>
                                        <td>@det.Port </td>
                                        <td>@det.Country</td>
                                        <td>@det.ShippingYard</td>
                                        <td>@det.ShipmentType</td>
                                        <td>@det.InspectionName</td>
                                        <td>@det.InspectionCost</td>
                                        @if (@det.EmailStatus == "1")
                                        {
                                            <td><span class="label label-warning" style="font-weight:100">In Progress</span></td>
                                        }
                                        else
                                        {
                                            <td>
                                                <button type="button" class="btn  btn-primary btn-xs btn-xs" onclick="GetEmailForPreview(@det.CustomerProductInvoiceId,this);" data-value=@det.CustomerProductInvoiceId data-inspection="@det.InspectionName">Email</button>
                                        </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
        <br />
        <div class="row">
            <div class="col-md-2 col-md-offset-5">
                <input class="btn btn-block btn-primary" type="button" id="submitbutton" onclick="Update();" value="Inspected" />
            </div>
        </div>
        <div id="MissingChassis">
            @if (((List<MissingChassis>)ViewData["MissingChassis"]).Count > 0)
            {
                var list = (List<MissingChassis>)ViewData["MissingChassis"];
                <br />
                <div class="box Miss-Chassis">
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th id="hdrChckBox" width="5%">
                                    Sno.
                                </th>
                                <th width="95%">Missing Chassis #</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{ int j = 0;
                             foreach (var item in list)
                             {
                                 j++;
                                <tr>
                                    <td>@j</td>
                                    <td>@item.ChassisNo</td>
                                </tr>
                             }
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>
<input type="hidden" id="shipyardid" />


+CarInspectionRequest.cshtml

@using JTJapan.Core.AdminArea.ViewModel
<style type="text/css">
    .coupontooltip {
        display: none;
        background: #C8C8C8;
        margin-left: 28px;
        padding: 10px;
        position: absolute;
        z-index: 1000;
        width: 200px;
        height: 100px;
    }



    .Miss-Chassis {
        width: 25% !important;
        margin-top: 2% !important;
    }

        .Miss-Chassis table thead {
            color: #FF0000 !important;
        }
</style>
<script>





    function FailDetailModal(CustomerProductInvoiceId, VendorID) {
        $.ajax({
            dataType: "html",
            async: true,

            type: 'GET',
            url: '@Url.Content("~/Shipment/_FailDetailModal")',
            data: {
                'CustomerProductInvoiceId': CustomerProductInvoiceId,
            },
            type: 'GET',
            beforeSend: function () {
                //$('.loadingDiv').show();

            },
            success: function (data) {
                if (data != "") {
                    $('#FailDetail').html(data);
                    $('#modal-email').modal('show');
                    $('.modal-body').height($('.col-md-12.Email').height() + 10);
                }
                else { ModalPopInn('Information', 'No email template is defined!'); }
            },
            complete: function () {
                // $('.loadingDiv').hide();
            }
        });
    }






    function ModalPopInn(title, body) {
        $("#modalbody").html();
        $('#myModal').find('.modal-title').html(title);
        $('#myModal').find('.modal-body').html(body);
        $('#myModal').modal('show');
        setTimeout(function () {
            $('#myModal').modal('hide');
        }, 3000);
    }
    var Btn;
    var IsPageLoad = 0;
    $(document).ready(function () {
        $('#submitbuttonReject').hide();

        if (IsPageLoad == 0) {
            $($('.info-box')[0]).addClass('selected');
            $($('.hidden')[0]).removeClass('hidden').addClass('detail');
        }
        else {
            IsPageLoad = 1;
        }

        var rows = $('.detail #dataintable tr').length;
        if (rows < 1) {
            $('.mainbuttons').hide();
        }
        $('#btnChassisNo').click(function () {
            GetfilteredRecords($('#txtChassisNo').val().replace(/[\n\r]/g, ','));
        });
        $('#refreshbutton').click(function () {
            location.href = './CarInspectionRequest';
        });
        $('#txtChassisNo').keyup(function (e) {
            if (e.keyCode == 13) {
                GetfilteredRecords($('#txtChassisNo').val().replace(/[\n\r]/g, ','));
            }
        });

    });
    function GetfilteredRecords(value) {
        $('#txtChassisNo').val(value);
        $('#searchChasis').submit();
    }

    function checkAllVisible(maincheck) {
        var chks = $('.detail').find('input:checkbox');
        if ($('#' + maincheck.id).prop('checked')) {
            var chks = $('.detail').find('input:checkbox');
            $(chks).not(this).prop('checked', true);
        }
        else {
            $(chks).not(this).prop('checked', false);
        }
    }
    function toggleDetail(ClickElement) {
        if (ClickElement == null) {
            allbox = $(document).find('.info-box');
            ClickElement = allbox[0];
        }
        $('div').find('.detail').removeClass('detail').addClass('hidden');
        $('div').find('#detail' + ClickElement.id).removeClass('hidden').addClass('detail');
        $('div').find('.selected').removeClass('selected');
        $(ClickElement).find('.info-box').addClass('selected');
    }

    function Cancel() {
        $('#ModalComment').modal('hide');
        return;
    }

    function Forward() {
        UpdateSingle(Btn);
        $('#ModalComment').modal('hide');

    }

    function OpenFailModal(btn) {
        $('#ModalComment').modal('show');
        Btn = btn;

    }


    function UpdateSingle(btn) {
        var checkedValues = $(btn).data('value');
        var cmd = $(btn).data('val');
        if (cmd == 0) {

        }
        else {

        UpdateMain(checkedValues, btn);
        $(btn).closest('tr').remove();
        if ($('.detail #dataintable tr').length == 1) {
            location.href = './CarInspectionRequest';
        }
    }
    }
    function UpdateMain(checkedValues, btn) {
        if (checkedValues.length == 0) {
            checkedValues = null;
            ModalPopInn('Warning', 'Please select at least one record');
        }
        else {
            $.ajax({
                async: true,
                type: 'POST',
                cache: false,
                data: { customerproductinvoiceids: checkedValues, cmd: $(btn).data('cmd'), inspectId: $(btn).data('inspectid'), comment: $('#txtComment').val() },
                url: 'UpdateInspectionRequestDetail',
                success: function (data) {
                    ModalPopInn('Success', 'Record Updated!');
                }
            });
        }
    }
    function Update(btn) {
        var checkedValues = $('.detail').find('input:checkbox:checked').map(function () {
            return this.value;
        }).get();
        $('#txtComment').val('');
        UpdateMain(checkedValues, btn);
        setTimeout(location.reload(true), 3000);
    }
</script>

<div id="FailDetail">
</div>
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#3C8DBC">
                <h4 class="modal-title" style="color:white"><b>Acknowledged Successfully!</b></h4>
            </div>
            <div class="modal-body" id="modalbody">
                <p>Information Saved</p>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="ModalComment"  role="dialog">
    <div class="modal-dialog" style="width:35%;">
        <div class="modal-content">

            <div class="modal-header" style="background-color:#3C8DBC">
                <h4 class="modal-title" style="color:white"><b>Inspection Fail Comment</b></h4>
            </div>
            <div class="modal-body" id="modalbody">
                <div class="row">
                    <div class="col-md-12">
                        <textarea id="txtComment" name="txtcomment" style="width:inherit;height:100px;resize:none;"></textarea>
                    </div>
                </div>
                <div align="center">
                    <button class="btn btn-default btn-sm" id="forward" name="forward" onclick="Cancel()">Cancel</button>
                    <button class="btn btn-primary btn-sm" id="forward" name="forward" onclick="Forward()">Save</button>
                </div>
            </div>

        </div>
    </div>
</div>
<div class="content-wrapper">
    <section class="content-header">
        <div class="row" style="margin-right:4px;">
            <div class="col-lg-5">
                <h4>Inspection Requests Pending</h4>
            </div>
            @using (Html.BeginForm("CarInspectionRequest", "Shipment", FormMethod.Post, new { id = "searchChasis" }))
            {
                @Html.Partial("_ChassisNoFilter");
            }
        </div>
    </section>
    <div id="Databind" class="content">
        <div class="row">
            @foreach (ShippingYard item in Model)
            {
                string k = item.shipyardId;
                string buttonid = "vBtnApprove" + k;
                string divid = "vCollapse" + k;
                <div class=" col-md-2 col-sm-4 col-xs-4" style="cursor:pointer" id=@item.shipyardId onclick="toggleDetail(this)">
                    <span class="coupontooltip"> @item.shipyard</span>
                    <div class="info-box count-box">
                        <div class="info-box-content count-box-content">
                            <div class="pull-left circle">
                                <p> @item.shipyardDetail.Count    </p>
                            </div>
                            <span class="info-box-text count-box-text">@item.shipyard</span>
                        </div>
                    </div>
                </div>
            }
        </div>
        @foreach (ShippingYard item in Model)
        {
            string id = "detail" + item.shipyardId;
            string chkAllId = "chkAll" + item.shipyardId;
            <div class="hidden" id=@id>
                <div class="box">
                    <div class="box-header">
                        <h3 class="box-title">@item.shipyard</h3>
                    </div>
                    <div class="box-body no-padding">
                        <table id="dataintable" class="table table-bordered table-striped table-condensed table-hover table-even-widths">
                            <tbody id="vendordetail">
                                <tr>
                                    <th style="width:5%;">
                                        # &nbsp;&nbsp;<input type="checkbox" class="checkall" id=@chkAllId onchange="checkAllVisible(this)" value="0">
                                    </th>
                                    <th style="width: 8%">Invoice #</th>
                                    <th style="width: 19%">Vehicle Detail</th>
                                    <th style="width: 10%">Chasis #</th>
                                    <th style="width: 10%">Port/Country</th>
                                    <th style="width: 10%">Shipping Yard</th>
                                    <th style="width: 10%">Shipping Type</th>
                                    <th style="width:10%">Inspection Type</th>
                                    <th style="width:5%">Cost</th>
                                    <th style="width:10%"></th>
                                </tr>
                                @foreach (ShippmentDetail det in item.shipyardDetail)
                                {
                                    string i = det.sno.ToString();
                                    int sno = @det.sno + 1;
                                    <tr>
                                        <td>@sno &nbsp;&nbsp;<input type="checkbox" id=@i value=@det.CustomerProductInvoiceId /> </td>
                                        <td>@det.customerProductInvoiceNumber</td>
                                        <td>@det.Make  @det.Model<br />  @det.Year</td>
                                        <td>@det.ChasisID</td>
                                        <td>@det.Port <br />@det.Country</td>
                                        <td>@det.ShippingYard</td>
                                        <td>@det.ShipmentType</td>
                                        <td>@det.InspectionName</td>
                                        <td>@det.InspectionCost</td>
                                        <td>
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-primary btn-sm" data-toggle="tooltip" data-placement="top" title="Pass" onclick="UpdateSingle(this)" data-value=@det.CustomerProductInvoiceId style="margin-right:10px;" data-cmd="1" data-inspectid="@det.InspectionId"><i class="fa fa-check"></i></button>
                                                <button type="button" class="btn btn-primary btn-sm btn-danger" onclick="OpenFailModal(this)" data-value=@det.CustomerProductInvoiceId data-toggle="tooltip" data-placement="top" title="Fail" data-cmd="0" data-inspectid="@det.InspectionId"><i class="fa fa-close"></i></button>
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
        <div class="row">
            <span class="mainbuttons col-md-5 col-md-offset-5 btn-group">
                <button class="btn btn-primary" type="button" id="submitbuttonApprove" onclick="Update(this)" value="Pass" style="margin-right:5px;" data-cmd="1"><i class="fa fa-check"></i>&nbsp;Pass</button>
                <button class="btn btn-primary btn-danger hidden" type="button" id="submitbuttonReject" onclick="Update(this)" value="Fail" data-cmd="0"><i class="fa fa-close"></i>&nbsp; Fail</button>
            </span>
        </div>


        <div id="MissingChassis">
            @if (((List<MissingChassis>)ViewData["MissingChassis"]).Count > 0)
            {
                var list = (List<MissingChassis>)ViewData["MissingChassis"];
                <br />
                <div class="box Miss-Chassis">
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th id="hdrChckBox" width="5%">
                                    Sno.
                                </th>
                                <th width="95%">Missing Chassis #</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{ int j = 0;
                             foreach (var item in list)
                             {
                                 j++;
                                <tr>
                                    <td>@j</td>
                                    <td>@item.ChassisNo</td>
                                </tr>
                             }
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>




    </div>
</div>
<input type="hidden" id="shipyardid" />


+CarPending.cshtml

@using JTJapan.Core.AdminArea.ViewModel
<style type="text/css">
    .coupontooltip {
        display: none;
        background: #C8C8C8;
        margin-left: 28px;
        padding: 10px;
        position: absolute;
        z-index: 1000;
        width: 200px;
        height: 100px;
    }

    .Error {
        border-color: #ff0000 !important;
        border: 1px solid #ff0000 !important;
    }


    .Miss-Chassis {
        width: 25% !important;
        margin-top: 2% !important;
    }

        .Miss-Chassis table thead {
            color: #FF0000 !important;
        }
</style>
<script>
    function ModalPopInn(title, body) {
        $("#modalbody").html();
        $('#myModal').find('.modal-title').html(title);
        $('#myModal').find('.modal-body').html(body);
        $('#myModal').modal('show');
        setTimeout(function () {
            $('#myModal').modal('hide');
        }, 2000);
    }
    var IsPageLoad = 0;
    $(document).ready(function () {
        if (IsPageLoad == 0) {
            $($('.info-box')[0]).addClass('selected');
            $($('.hidden')[0]).removeClass('hidden').addClass('detail');
        }
        else {
            IsPageLoad = 1;
        }

        $('#btnChassisNo').click(function () {
            GetfilteredRecords($('#txtChassisNo').val().replace(/[\n\r]/g, ','));
        });
        $('#refreshbutton').click(function () {
            location.href = './CarPending';
        });
        $('#txtChassisNo').keyup(function (e) {
            if (e.keyCode == 13) {
                GetfilteredRecords($('#txtChassisNo').val().replace(/[\n\r]/g, ','));
            }
        });
        var rows = $('.detail #dataintable tr').length;
        if (rows < 1) {
            $('#submitbutton').hide();
        }
    });
    function GetfilteredRecords(value) {
        $('#txtChassisNo').val(value);
        $('#searchChasis').submit();
    }
    function checkAllVisible(maincheck) {
        var chks = $('.detail').find('input:checkbox');
        if ($('#' + maincheck.id).prop('checked')) {
            var chks = $('.detail').find('input:checkbox');
            $(chks).not(this).prop('checked', true);
        }
        else {
            $(chks).not(this).prop('checked', false);
        }
    }
    function toggleDetail(ClickElement) {
        if (ClickElement == null) {
            allbox = $(document).find('.info-box');
            ClickElement = allbox[0];
        }
        $('div').find('.detail').removeClass('detail').addClass('hidden');
        $('div').find('#detail' + ClickElement.id).removeClass('hidden').addClass('detail');
        $('div').find('.selected').removeClass('selected');
        $(ClickElement).find('.info-box').addClass('selected');
    }
    function UpdateSingle(btn) {
        $(".Error").removeClass("Error");
        var $row;
        var checkedvalues = [];
        $row = $(btn).closest('tr');
        for (i = 0; i < $row.length; i++) {
            var val1 = $($row[i]).find('input:text').val();
            if (val1.length < 1) {
                $($($row[i]).find('input:text')).addClass("Error");
                return;
            }
            var obj = { cpid: $(btn).data('value'), stockid: $($row[i]).find('input:text').val() }
            checkedvalues.push(obj);
        }
        UpdateMain(checkedvalues);
    }
    function UpdateMain(checkedvalues) {
        if (checkedvalues.length == 0) {
            checkedValues = null;
            ModalPopInn('Warning', 'Please select at least one record');
            return;
        }
        $.ajax({
            async: true,
            type: 'POST',
            cache: false,
            data: { customerproductinvoiceids: checkedvalues },
            url: 'UpdateShipmentDetail',
            success: function (data) {
                if (data == "success") {
                    ModalPopInn('Success', 'Record Updated!');
                    location.reload();
                }
            }
        });
    }
    function Update() {
        $(".Error").removeClass("Error");
        var checkedvalues = [];
        $row = $('.detail').find('tr');
        var valid = 1;
        for (i = 1; i < $row.length; i++) {

            if ($($row[i]).find('input:checkbox').prop('checked')) {
                if ($($row[i]).find('input:text').val() == "" || $($row[i]).find('input:text').val().length < 1) {
                    $($row[i]).find('input:text').addClass('Error');
                    valid = 0;
                } else {
                    var obj = { cpid: $($row[i]).find('input:checkbox').val(), stockid: $($row[i]).find('input:text').val() }
                    checkedvalues.push(obj);
                }
            }
        }
        if (valid == 0) {
            return;
        }
        else {
            UpdateMain(checkedvalues);
        }
    }


    ExportToExcel = function (type, Client) {
        window.location = "CarPendingExportToExcel";
    };



</script>
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#3C8DBC">
                <h4 class="modal-title" style="color:white"><b>Acknowledged Successfully!</b></h4>
            </div>
            <div class="modal-body" id="modalbody">
                <p>Information Saved</p>
            </div>
        </div>
    </div>
</div>
<div class="content-wrapper">
    <section class="content-header">
        <div class="row" style="margin-right:4px;">
            <div class="col-lg-5">
                <h4>Unit Received at Yard Pending</h4>
                <button id="exportToExcel" title="Export To Excel" type="button" class="btn btn-success" onclick="ExportToExcel()">
                    <i class="fa fa-file-excel-o"></i>
                </button>                
            </div>
            @using (Html.BeginForm("CarPending", "Shipment", FormMethod.Post, new { id = "searchChasis" }))
            {

                @Html.Partial("_ChassisNoFilter");
            }
        </div>
    </section>
    <div id="Databind" class="content">
        <div class="row">
            @foreach (ShippingYard item in Model)
            {
                string k = item.shipyardId;
                string buttonid = "vBtnApprove" + k;
                string divid = "vCollapse" + k;
                <div class=" col-md-2 col-sm-4 col-xs-4" style="cursor:pointer" id=@item.shipyardId onclick="toggleDetail(this)">
                    <span class="coupontooltip"> @item.shipyard</span>
                    <div class="info-box count-box">
                        <div class="info-box-content count-box-content">
                            <div class="pull-left circle">
                                <p> @item.shipyardDetail.Count    </p>
                            </div>
                            <span class="info-box-text count-box-text">@item.shipyard</span>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="row">
            
          
        </div>
        <br />
        @foreach (ShippingYard item in Model)
        {
            string id = "detail" + item.shipyardId;
            string chkAllId = "chkAll" + item.shipyardId;


            <div class="hidden" id=@id>
                <div class="box">
                    <div class="box-header">
                        <h3 class="box-title">@item.shipyard</h3>
                    </div>
                    <div class="box-body no-padding">
                        <table id="dataintable" class="table table-bordered table-striped table-condensed table-hover table-even-widths">
                            <tbody id="vendordetail">
                                <tr>
                                    <th style="width:5%;">
                                        #&nbsp;<input type="checkbox" class="checkall" id=@chkAllId onchange="checkAllVisible(this)" value="0">
                                    </th>
                                    <th style="width: 8%">Invoice #</th>
                                    <th style="width: 19%">Vehicle Detail</th>
                                    <th style="width: 10%">Chasis #</th>
                                    <th style="width: 5%">Port</th>
                                    <th style="width:10% ">Country</th>
                                    <th style="width:8%">Purchase Date</th>
                                    <th style="width:15%">Transport Vendor</th>
                                    <th style="width: 10%">Shipping Yard</th>
                                    <th style="width: 10%">Shipping Type</th>
                                    <th style="width:5%">Stock ID</th>
                                    <th style="width:5%"></th>
                                </tr>
                                @foreach (ShippmentDetail det in item.shipyardDetail)
                                {
                                    string i = det.sno.ToString();
                                    int sno = @det.sno + 1;
                                    <tr>
                                        <td>@sno &nbsp;<input type="checkbox" id=@i value=@det.CustomerProductInvoiceId /> </td>
                                        <td>@det.customerProductInvoiceNumber</td>
                                        <td>@det.Make  @det.Model<br />  @det.Year</td>
                                        <td>@det.ChasisID</td>
                                        <td>@det.Port</td>
                                        <td>@det.Country</td>
                                        <td>@(det.PurchaseDate != "" ? Convert.ToDateTime(det.PurchaseDate).ToString("MMM dd, yyyy") : "-")</td>
                                        <td>@det.VendorName</td>
                                        <td>@det.ShippingYard</td>
                                        <td>@det.ShipmentType</td>
                                        <td><input type="text" id="@i" style="width: 100px;" maxlength="10" /></td>
                                        <td><button type="button" class="btn  btn-primary btn-xs" onclick="UpdateSingle(this)" data-value=@det.CustomerProductInvoiceId>Received</button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
        <div class="row">
            <div class="col-md-2 col-md-offset-5">
                <input class="btn btn-block btn-primary" type="button" id="submitbutton" onclick="Update()" value="Received" />
            </div>
        </div>
        <div id="MissingChassis">
            @if (((List<MissingChassis>)ViewData["MissingChassis"]).Count > 0)
            {
                var list = (List<MissingChassis>)ViewData["MissingChassis"];

                <br />
                <div class="box Miss-Chassis">
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th id="hdrChckBox" width="5%">
                                    Sno.
                                </th>
                                <th width="95%">Missing Chassis #</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{ int j = 0;
                             foreach (var item in list)
                             {
                                 j++;
                                <tr>
                                    <td>@j</td>
                                    <td>@item.ChassisNo</td>
                                </tr>
                             }
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>
<input type="hidden" id="shipyardid" />


+InspectionCertificateRequest.cshtml

@using JTJapan.Core.AdminArea.ViewModel
<style type="text/css">
    .NoRecord {
        width: 100%;
    }

        .NoRecord tr td {
            text-align: center;
            padding-bottom: 2%;
        }

    .Error {
        border-color: #ff0000 !important;
        border: 1px solid #ff0000 !important;
    }

    .box-active {
        border-top: 3px solid transparent;
        margin-bottom: -2px;
        margin-right: 5px;
        border-top-color: #3c8dbc;
    }

    .Miss-Chassis {
        width: 25% !important;
        margin-top: 2% !important;
    }

        .Miss-Chassis table thead {
            color: #FF0000 !important;
        }
</style>
<script>
    function ModalPopInn(title, body) {
        $("#modalbody").html();
        $('#myModal').find('.modal-title').html(title);
        $('#myModal').find('.modal-body').html(body);
        $('#myModal').modal('show');
        setTimeout(function () {
            $('#myModal').modal('hide');
        }, 2000);
    }
    var IsPageLoad = 0;
    $(document).ready(function () {
        if (IsPageLoad == 0) {
            $($('.info-box')[0]).addClass('selected');
            $($('.hidden')[0]).removeClass('hidden').addClass('detail');

            $('#btnChassisNo').click(function () {
                GetfilteredRecords($('#txtChassisNo').val().replace(/[\n\r]/g, ','));
            });


            $('#refreshbutton').click(function () {
                location.href = './InspectionCertificateRequest';
            });
            $('#txtChassisNo').keyup(function (e) {
                if (e.keyCode == 13) {
                    GetfilteredRecords($('#txtChassisNo').val().replace(/[\n\r]/g, ','));
                }
            });
        }
        else {
            IsPageLoad = 1;
        }
        var rows = $('.detail #dataintable tr').length;
        if (rows < 1) {
            $('#submitbutton').hide();
        }
    });

    function GetfilteredRecords(value) {
        $('#txtChassisNo').val(value);
        $('#searchChasis').submit();
    }

    function checkAllVisible(maincheck) {
        var chks = $('.detail').find('input:checkbox');
        if ($('#' + maincheck.id).prop('checked')) {
            var chks = $('.detail').find('input:checkbox');
            $(chks).not(this).prop('checked', true);
        }
        else {
            $(chks).not(this).prop('checked', false);
        }
    }
    function toggleDetail(ClickElement) {
        if (ClickElement == null) {
            allbox = $(document).find('.info-box');
            ClickElement = allbox[0];
        }
        $('div').find('.detail').removeClass('detail').addClass('hidden');
        $('div').find('#detail' + ClickElement.id).removeClass('hidden').addClass('detail');
        $('div').find('.selected').removeClass('selected');
        $(ClickElement).find('.info-box').addClass('selected');
    }
    function UpdateSingle(btn) {
        var checkedValues = $(btn).data('value');
        UpdateMain(checkedValues);
        $(btn).closest('tr').remove();
        if ($('.detail #dataintable tr').length == 1) {
            location.href = './InspectionCertificateRequest';
        }
    }
    function UpdateMain(checkedValues) {
        if (checkedValues.length == 0) {
            checkedValues = null;
            ModalPopInn('Warning', 'Please select at least one record');
            return 0;

        }
        else {
            $.ajax({
                async: true,
                type: 'POST',
                cache: false,
                data: { customerproductinvoiceids: checkedValues },
                url: 'UpdateInspectionCertificateRequest',
                success: function (data) {
                    ModalPopInn('Success', 'Record Updated!');
                    setTimeout(function () { window.location = './InspectionCertificateRequest' }, 2000);
                }
            });
            return 1;
        }
    }

    function Update() {
        var checkedValues = $('.detail').find('input:checkbox:checked').map(function () {
            return this.value;
        }).get();
        UpdateMain(checkedValues);

    }
</script>

<div id="EmailPreview">
</div>

<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#3C8DBC">
                <h4 class="modal-title" style="color:white"><b>Inspection Marked Successfully!</b></h4>
            </div>
            <div class="modal-body" id="modalbody">
                <p>Information Saved</p>
            </div>
        </div>
    </div>
</div>
<div class="content-wrapper">
    <section class="content-header">
        <div class="row" style="margin-right:4px;">
            <div class="col-lg-5">
                <h4>Inspection Certification Request</h4>
            </div>
            @*@using (Html.BeginForm("CarInspection", "Shipment", FormMethod.Post, new { id = "searchChasis" }))
                {
                    <div class="col-lg-5 input-group input-group-sm pull-right">
                        <input id="txtChassisNo" type="text" class="form-control" name="Chasisno" placeholder="Chassis # 1 , Chassis # 2" maxlength="150">
                        <span class="input-group-btn">
                            <button class="btn btn-primary" style="margin-right:5px;" type="submit" id="btnChassisNo"><i class="glyphicon glyphicon-search"></i></button>
                            <button class="btn btn-default" type="button" id="refreshbutton" onclick="location.href = './CarInspection';" value="Refresh"><i class="glyphicon glyphicon-refresh"></i></button>
                        </span>
                    </div>     }*@

            @using (Html.BeginForm("InspectionCertificateRequest", "Shipment", FormMethod.Post, new { id = "searchChasis" }))
            {

                @Html.Partial("_ChassisNoFilter");
            }

        </div>
    </section>
    <div id="Databind" class="content">
        <div class="row">

            @foreach (ShippingYard item in Model)
            {
                string k = item.shipyardId;
                string buttonid = "vBtnApprove" + k;
                string divid = "vCollapse" + k;
                <div class=" col-md-2 col-sm-4 col-xs-4" style="cursor:pointer" id=@item.shipyardId onclick="toggleDetail(this)">
                    <div class="info-box count-box">
                        <div class="info-box-content count-box-content">
                            <div class="pull-left circle">
                                <p> @item.shipyardDetail.Count    </p>
                            </div>
                            <span class="info-box-text count-box-text">@item.shipyard</span>
                        </div>
                    </div>
                </div>
            }
        </div>
        @foreach (ShippingYard item in Model)
        {
            string id = "detail" + item.shipyardId;
            string chkAllId = "chkAll" + item.shipyardId;
            <div class="hidden" id=@id>
                <div class="box">
                    <div class="box-header">
                        <h3 class="box-title">@item.shipyard</h3>
                    </div>
                    <div class="box-body no-padding">
                        <table id="dataintable" class="table table-bordered table-striped table-condensed table-hover table-even-widths">
                            <tbody id="vendordetail">
                                <tr>
                                    <th style="width:5%;">
                                        # &nbsp;&nbsp;<input type="checkbox" class="checkall" id=@chkAllId onchange="checkAllVisible(this);" value="0">
                                    </th>
                                    <th style="width: 8%">Invoice #</th>
                                    <th style="width: 15%">Vehicle Detail</th>
                                    <th style="width: 10%">Chasis #</th>
                                    <th style="width: 5%">Port</th>
                                    <th style="width: 10%">Country</th>
                                    <th style="width: 10%">Shipping Yard</th>
                                    <th style="width: 10%">Shipping Type</th>
                                    <th style="width:10%">Inspection Type</th>
                                    <th style="width:5%">Cost</th>
                                    <th>Inspection Date</th>
                                    <th style="width:10%"></th>
                                </tr>
                                @foreach (ShippmentDetail det in item.shipyardDetail)
                                {
                                    string i = det.sno.ToString();
                                    int sno = @det.sno + 1;
                                    <tr>

                                        <td>
                                            @sno &nbsp;&nbsp;
                                            @if (@det.EmailStatus == "1")
                                            {
                                                <input type="checkbox" id=@i value=@det.CustomerProductInvoiceId style="display:none;" />}
                                            else
                                            {
                                                <input type="checkbox" id=@i value=@det.CustomerProductInvoiceId />}
                                        </td>
                                        <td>@det.customerProductInvoiceNumber</td>
                                        <td>@det.Make  @det.Model<br />  @det.Year</td>
                                        <td>@det.ChasisID</td>
                                        <td>@det.Port </td>
                                        <td>@det.Country</td>
                                        <td>@det.ShippingYard</td>
                                        <td>@det.ShipmentType</td>
                                        <td>@det.InspectionName</td>
                                        <td>@det.InspectionCost</td>
                                        <td> @(det.InpspectionDate != "" ? Convert.ToDateTime(det.InpspectionDate).ToString("MMMM dd yyyy") : "-")</td>
                                        @if (@det.EmailStatus == "1")
                                        {
                                            <td><span class="bg-light-blue" style="font-weight:100">In Progress</span></td>
                                        }
                                        else
                                        {
                                            <td style="align-content:center"><button type="button" class="btn btn-primary  btn-xs" onclick="UpdateSingle(this);" data-value=@det.CustomerProductInvoiceId>Request</button></td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
        <br />
        <div class="row">
            <div class="col-md-2 col-md-offset-5">
                <input class="btn btn-block btn-primary" type="button" id="submitbutton" onclick="Update();" value="Request" />
            </div>
        </div>
        <div id="MissingChassis">
            @if (((List<MissingChassis>)ViewData["MissingChassis"]).Count > 0)
            {
                var list = (List<MissingChassis>)ViewData["MissingChassis"];
                <br />
                <div class="box Miss-Chassis">
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th id="hdrChckBox" width="5%">
                                    Sno.
                                </th>
                                <th width="95%">Missing Chassis #</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{ int j = 0;
                             foreach (var item in list)
                             {
                                 j++;
                                <tr>
                                    <td>@j</td>
                                    <td>@item.ChassisNo</td>
                                </tr>
                             }
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>
<input type="hidden" id="shipyardid" />


+UnitPicturesPending.cshtml
@using JTJapan.Core;
@model IEnumerable<JTJapan.Core.AdminArea.ViewModel.UnitPicturesPendingCountVendorWise>
    @{
        ViewBag.Title = "Unit Pictures Pending";
    }

    <div class="content-wrapper">
        <section class="content-header">
            <div class="row" style="margin-left:0px; margin-right:0px;">
                <h4 class="pull-left">Unit Pictures Pending</h4>
                @Html.Partial("_ChassisNoFilter")
            </div>
        </section>


        <div id="ReportList" class="row" style="margin-left:0px; margin-right:0px;">

            @Html.Action("_UnitPicturesPendingDetail", new
                    {
                        PageCount = 1,
                        PageSize = 25

                    });

        </div>


        <div class="modal fade" role="dialog" id="uploadFileStatusModel">
        </div>
    </div>

    <script type="text/javascript">

        function toggleDetail(a) {
            $('div').find('.detail').removeClass('detail').addClass('detail hidden');
            $('div').find('#detail' + a.id).removeClass('detail hidden').addClass('detail');

            $('div').find('.selected').removeClass('selected');
            $(a).find('.info-box').addClass('selected');
        }
        var IsPageLoad = 0;
        $(document).ready(function () {
            if (IsPageLoad == 0) {
                $($('.info-box')[0]).addClass('selected');
            }
            else {
                IsPageLoad = 1;
            }
            $("body").on("click", ".Vendor", function () {
                GetfilteredRecords(currentPage, pageSize, $(this).attr('id'), $('#txtChassisNo').val().replace(/[\n\r]/g, ','));
            });

            $('#btnChassisNo').click(function () {
                GetfilteredRecords(currentPage, pageSize, null, $('#txtChassisNo').val().replace(/[\n\r]/g, ','));
            });
            $('#txtChassisNo').keyup(function (e) {
                if (e.keyCode == 13) {
                    GetfilteredRecords(currentPage, pageSize, null, $('#txtChassisNo').val().replace(/[\n\r]/g, ','));
                }
            });
           
            $("body").delegate("#uploadButton", "click", function () {
                GetExportDocumentZipFileStatus();
            });
            GetExportDocumentZipFileStatus = function () {
                var data = {};

                $.ajax({
                    async: true,
                    type: 'GET',
                    cache: false,
                    data: data,
                    dataType: 'html',   //response format
                    contentType: 'application/json; charset=utf-8', //request format
                    crossDomain: true,
                    url: '@Url.Action("_UnitPicturesStatus")',
                    success: function (data) {
                        $('#uploadFileStatusModel').html(data);
                    }
                });
            };
        });
    </script>



























